{
  "text-transformation": {
    "casual": "Hey team, this is a really casual message that needs to be made more professional. It's got some informal language and could use better structure. Let's make it work better for our stakeholders.",
    "technical": "The API is returning 500 errors intermittently. Users are experiencing timeouts when uploading large files. The database connection pool is getting exhausted under high load.",
    "business": "We need to improve our quarterly results. The sales team has been underperforming lately. Let's implement some changes to boost productivity and revenue.",
    "formal": "The committee requires a comprehensive review of the current operational procedures. Stakeholders have expressed concerns regarding efficiency and compliance. We should prioritize these matters accordingly."
  },
  "code-specs": {
    "button": {
      "description": "A reusable button component with variants and sizes",
      "requirements": [
        "Accepts children, onClick handler, variant (primary/secondary), size (sm/md/lg)",
        "Proper TypeScript types and interfaces",
        "Follow React best practices",
        "Include proper JSDoc comments",
        "Handle disabled state",
        "Export as default"
      ],
      "props": {
        "children": "ReactNode",
        "onClick": "() => void",
        "variant": "'primary' | 'secondary'",
        "size": "'sm' | 'md' | 'lg'",
        "disabled": "boolean"
      }
    },
    "form": {
      "description": "A login form with validation and error handling",
      "requirements": [
        "Email and password fields with validation",
        "Submit button with loading state",
        "Error display and handling",
        "TypeScript interfaces for form data",
        "Proper form submission handling",
        "Accessibility attributes"
      ],
      "fields": [
        {
          "name": "email",
          "type": "email",
          "required": true,
          "validation": "email format"
        },
        {
          "name": "password",
          "type": "password",
          "required": true,
          "validation": "minimum length"
        }
      ]
    },
    "card": {
      "description": "A flexible card component for content display",
      "requirements": [
        "Flexible content areas (header, body, footer)",
        "Optional shadow and border variants",
        "Responsive design",
        "Proper spacing and typography",
        "TypeScript support"
      ]
    }
  },
  "design-systems": {
    "basic": {
      "colors": {
        "bg.default": "#ffffff",
        "bg.secondary": "#f8f9fa",
        "text.primary": "#212529",
        "text.secondary": "#6c757d",
        "brand.primary": "#007bff",
        "brand.secondary": "#6c757d"
      },
      "space": {
        "xs": "0.25rem",
        "sm": "0.5rem",
        "md": "1rem",
        "lg": "1.5rem",
        "xl": "3rem"
      },
      "radius": {
        "sm": "0.25rem",
        "md": "0.375rem",
        "lg": "0.5rem",
        "full": "9999px"
      }
    },
    "comprehensive": {
      "colors": {
        "bg.default": "#ffffff",
        "bg.secondary": "#f8f9fa",
        "bg.accent": "#007bff",
        "text.primary": "#212529",
        "text.secondary": "#6c757d",
        "text.inverse": "#ffffff",
        "border.light": "#dee2e6",
        "border.medium": "#adb5bd",
        "success": "#28a745",
        "warning": "#ffc107",
        "error": "#dc3545",
        "info": "#17a2b8"
      },
      "space": {
        "xs": "0.25rem",
        "sm": "0.5rem",
        "md": "1rem",
        "lg": "1.5rem",
        "xl": "3rem",
        "xxl": "4rem"
      },
      "radius": {
        "sm": "0.25rem",
        "md": "0.375rem",
        "lg": "0.5rem",
        "xl": "0.75rem",
        "full": "9999px"
      },
      "typography": {
        "font-size.xs": "0.75rem",
        "font-size.sm": "0.875rem",
        "font-size.md": "1rem",
        "font-size.lg": "1.125rem",
        "font-size.xl": "1.25rem",
        "font-size.2xl": "1.5rem",
        "line-height.tight": "1.25",
        "line-height.normal": "1.5",
        "line-height.loose": "2"
      },
      "shadows": {
        "sm": "0 1px 2px 0 rgba(0, 0, 0, 0.05)",
        "md": "0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)",
        "lg": "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)",
        "xl": "0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)"
      }
    }
  },
  "evaluation-thresholds": {
    "text-transformation": {
      "min-score": 0.75,
      "mandatory-gates": ["formal-language", "no-banned-phrases"],
      "iteration-policy": {
        "max-iterations": 3,
        "min-delta-to-continue": 0.05,
        "no-change-budget": 1
      }
    },
    "code-generation": {
      "min-score": 0.8,
      "mandatory-gates": ["syntax-valid", "functional-correct"],
      "iteration-policy": {
        "max-iterations": 3,
        "min-delta-to-continue": 0.1,
        "no-change-budget": 1
      }
    },
    "design-tokens": {
      "min-score": 0.85,
      "mandatory-gates": ["no-hardcoded-colors", "uses-design-tokens"],
      "iteration-policy": {
        "max-iterations": 2,
        "min-delta-to-continue": 0.1,
        "no-change-budget": 1
      }
    }
  },
  "expected-outputs": {
    "text-transformation": {
      "professional": "The team requires a more professional approach to stakeholder communications. The content contains informal language that should be revised for better clarity and structure. We need to ensure our messaging aligns with organizational standards.",
      "technical": "The API is experiencing intermittent 500 errors. Users encounter timeouts during large file uploads. Database connection pool exhaustion occurs under high load conditions.",
      "business": "Quarterly performance improvement is required. Recent sales team underperformance necessitates immediate intervention. Productivity enhancement and revenue growth strategies should be implemented."
    },
    "code-generation": {
      "button": "export interface ButtonProps {\n  children: React.ReactNode;\n  onClick?: () => void;\n  variant?: 'primary' | 'secondary';\n  size?: 'sm' | 'md' | 'lg';\n  disabled?: boolean;\n}\n\nexport const Button: React.FC<ButtonProps> = ({\n  children,\n  onClick,\n  variant = 'primary',\n  size = 'md',\n  disabled = false\n}) => {\n  const handleClick = () => {\n    if (!disabled && onClick) {\n      onClick();\n    }\n  };\n\n  return (\n    <button\n      onClick={handleClick}\n      disabled={disabled}\n      className={`btn btn-${variant} btn-${size}`}\n    >\n      {children}\n    </button>\n  );\n};",
      "form": "export interface LoginFormData {\n  email: string;\n  password: string;\n}\n\nexport interface LoginFormProps {\n  onSubmit: (data: LoginFormData) => Promise<void>;\n  loading?: boolean;\n  error?: string;\n}\n\nexport const LoginForm: React.FC<LoginFormProps> = ({\n  onSubmit,\n  loading = false,\n  error\n}) => {\n  const [formData, setFormData] = useState<LoginFormData>({\n    email: '',\n    password: ''\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    await onSubmit(formData);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      {error && <div className=\"error\">{error}</div>}\n      <input\n        type=\"email\"\n        value={formData.email}\n        onChange={(e) => setFormData({...formData, email: e.target.value})}\n        required\n        aria-label=\"Email address\"\n      />\n      <input\n        type=\"password\"\n        value={formData.password}\n        onChange={(e) => setFormData({...formData, password: e.target.value})}\n        required\n        minLength={8}\n        aria-label=\"Password\"\n      />\n      <button type=\"submit\" disabled={loading}>\n        {loading ? 'Signing in...' : 'Sign In'}\n      </button>\n    </form>\n  );\n};"
    },
    "design-tokens": {
      "styled-card": "const Card = styled.div`\n  background-color: ${tokens.colors.bg.default};\n  color: ${tokens.text.primary};\n  padding: ${tokens.space.md};\n  border-radius: ${tokens.radius.md};\n  border: 1px solid ${tokens.colors.border.light};\n  box-shadow: ${tokens.shadows.sm};\n`;",
      "button-variants": "const Button = styled.button<{ variant: 'primary' | 'secondary' }>`\n  padding: ${tokens.space.sm} ${tokens.space.md};\n  border-radius: ${tokens.radius.sm};\n  border: none;\n  font-size: ${tokens.typography.fontSize.md};\n  cursor: pointer;\n\n  ${props => props.variant === 'primary' && `\n    background-color: ${tokens.colors.brand.primary};\n    color: ${tokens.colors.text.inverse};\n  `}\n\n  ${props => props.variant === 'secondary' && `\n    background-color: ${tokens.colors.bg.secondary};\n    color: ${tokens.colors.text.primary};\n    border: 1px solid ${tokens.colors.border.medium};\n  `}\n\n  &:hover {\n    opacity: 0.9;\n  }\n`;"
    }
  }
}
