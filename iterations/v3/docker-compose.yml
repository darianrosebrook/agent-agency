version: '3.8'

services:
  # Runtime Optimization Service
  runtime-optimization:
    build:
      context: .
      dockerfile: docker/Dockerfile.runtime-optimization
    container_name: agent-agency-runtime-opt
    ports:
      - "8080:8080"
    environment:
      - RUST_LOG=info
      - SERVICE_NAME=runtime-optimization
      - HEALTH_CHECK_PORT=8080
    networks:
      - agent-agency-network
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Tool Ecosystem Service
  tool-ecosystem:
    build:
      context: .
      dockerfile: docker/Dockerfile.tool-ecosystem
    container_name: agent-agency-tool-ecosystem
    ports:
      - "8081:8081"
    environment:
      - RUST_LOG=info
      - SERVICE_NAME=tool-ecosystem
      - HEALTH_CHECK_PORT=8081
      - MCP_ENABLED=true
    networks:
      - agent-agency-network
    depends_on:
      - redis
      - postgres
      - runtime-optimization
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Federated Learning Service
  federated-learning:
    build:
      context: .
      dockerfile: docker/Dockerfile.federated-learning
    container_name: agent-agency-federated-learning
    ports:
      - "8082:8082"
    environment:
      - RUST_LOG=info
      - SERVICE_NAME=federated-learning
      - HEALTH_CHECK_PORT=8082
      - PRIVACY_EPSILON=1.0
      - PRIVACY_DELTA=0.00001
    networks:
      - agent-agency-network
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Model Hot-Swap Service
  model-hotswap:
    build:
      context: .
      dockerfile: docker/Dockerfile.model-hotswap
    container_name: agent-agency-model-hotswap
    ports:
      - "8083:8083"
    environment:
      - RUST_LOG=info
      - SERVICE_NAME=model-hotswap
      - HEALTH_CHECK_PORT=8083
      - CANARY_ENABLED=true
    networks:
      - agent-agency-network
    depends_on:
      - redis
      - postgres
      - runtime-optimization
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Demo Application
  demo-app:
    build:
      context: .
      dockerfile: docker/Dockerfile.demo-app
    container_name: agent-agency-demo
    ports:
      - "3000:3000"
    environment:
      - RUST_LOG=info
      - SERVICE_NAME=demo-app
      - RUNTIME_OPTIMIZATION_URL=http://runtime-optimization:8080
      - TOOL_ECOSYSTEM_URL=http://tool-ecosystem:8081
      - FEDERATED_LEARNING_URL=http://federated-learning:8082
      - MODEL_HOTSWAP_URL=http://model-hotswap:8083
    networks:
      - agent-agency-network
    depends_on:
      - runtime-optimization
      - tool-ecosystem
      - federated-learning
      - model-hotswap
    restart: unless-stopped

  # Redis for caching and coordination
  redis:
    image: redis:7-alpine
    container_name: agent-agency-redis
    ports:
      - "6379:6379"
    networks:
      - agent-agency-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for data persistence
  postgres:
    image: postgres:15-alpine
    container_name: agent-agency-postgres
    environment:
      POSTGRES_DB: agent_agency
      POSTGRES_USER: agent_agency
      POSTGRES_PASSWORD: agent_agency_password
    ports:
      - "5432:5432"
    networks:
      - agent-agency-network
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agent_agency"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: agent-agency-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - agent-agency-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: agent-agency-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - agent-agency-network
    restart: unless-stopped

networks:
  agent-agency-network:
    driver: bridge

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
