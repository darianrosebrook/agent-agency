name: Self-Governing Agent Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Run unit tests
        run: cargo test --package self-prompting-agent --lib --verbose

      - name: Run council unit tests
        run: cargo test --package agent-agency-council --lib --verbose

      - name: Generate coverage report
        run: |
          cargo install cargo-tarpaulin
          cargo tarpaulin --package self-prompting-agent --out Xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: cobertura.xml
          flags: unit-tests
          name: unit-tests-coverage

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      ollama:
        image: ollama/ollama:latest
        ports:
          - 11434:11434
        options: >-
          --health-cmd "ollama list"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Setup Ollama models
        run: |
          # Pull required models for testing
          curl -X POST http://localhost:11434/api/pull -d '{"name":"gemma3:1b"}'

      - name: Run integration tests
        run: cargo test --package self-prompting-agent --test integration --verbose
        env:
          REDIS_URL: redis://localhost:6379
          OLLAMA_BASE_URL: http://localhost:11434

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      ollama:
        image: ollama/ollama:latest
        ports:
          - 11434:11434
        options: >-
          --health-cmd "ollama list"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/web-dashboard/package-lock.json

      - name: Install web dashboard dependencies
        run: |
          cd apps/web-dashboard
          npm ci

      - name: Setup test database
        run: |
          cargo run --bin agent-agency -- setup-test-db

      - name: Start web dashboard
        run: |
          cd apps/web-dashboard
          npm run build
          npm run start &
          sleep 10

      - name: Run E2E tests
        run: |
          cd apps/web-dashboard
          npm run test:e2e:ci

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    services:
      ollama:
        image: ollama/ollama:latest
        ports:
          - 11434:11434
        options: >-
          --health-cmd "ollama list"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Setup Ollama models
        run: |
          curl -X POST http://localhost:11434/api/pull -d '{"name":"gemma3:1b"}'

      - name: Run performance benchmarks
        run: |
          cargo bench --package self-prompting-agent-benchmarks
          cargo bench --package agent-agency-council

      - name: Store benchmark results
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: Self-Governing Agent Performance
          tool: 'cargo'
          output-file-path: target/criterion/data.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Run cargo audit
        uses: actions-rs/cargo@v1
        with:
          command: audit

      - name: Run cargo outdated
        run: cargo outdated --exit-code 1

  lint-and-format:
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Lint web dashboard
        run: |
          cd apps/web-dashboard
          npm run lint
          npm run type-check

  playground-tests:
    name: Playground Validation
    runs-on: ubuntu-latest
    services:
      ollama:
        image: ollama/ollama:latest
        ports:
          - 11434:11434
        options: >-
          --health-cmd "ollama list"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Setup test playground
        run: |
          mkdir -p playground-test
          cd playground-test
          git init

      - name: Run playground test harness
        run: cargo run --package self-prompting-agent --example playground_test
        env:
          PLAYGROUND_DIR: playground-test
          OLLAMA_BASE_URL: http://localhost:11434

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, performance-tests, security-tests, lint-and-format, playground-tests]
    if: always()
    steps:
      - name: Generate test summary
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check each job status
          jobs=(
            "unit-tests:Unit Tests"
            "integration-tests:Integration Tests"
            "e2e-tests:End-to-End Tests"
            "performance-tests:Performance Tests"
            "security-tests:Security Tests"
            "lint-and-format:Lint and Format"
            "playground-tests:Playground Tests"
          )

          all_passed=true

          for job in "${jobs[@]}"; do
            job_name="${job%%:*}"
            display_name="${job##*:}"

            if [ "${{ needs[\"$job_name\"][\"result\"] }}" = "success" ]; then
              echo " $display_name: PASSED" >> $GITHUB_STEP_SUMMARY
            else
              echo " $display_name: FAILED" >> $GITHUB_STEP_SUMMARY
              all_passed=false
            fi
          done

          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "$all_passed" = true ]; then
            echo "##  All Tests Passed!" >> $GITHUB_STEP_SUMMARY
            echo "Self-governing agent system is ready for deployment." >> $GITHUB_STEP_SUMMARY
          else
            echo "##  Some Tests Failed" >> $GITHUB_STEP_SUMMARY
            echo "Please review the failed tests and fix issues before deployment." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
