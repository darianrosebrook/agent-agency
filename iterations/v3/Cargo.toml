[workspace]
resolver = "2"
members = [
    "workers",
    "apple-silicon",
    "research",
    "mcp-integration",
    "provenance",
    "claim-extraction",
    "reflexive-learning",
    "model-benchmarking",
    "security-policy-enforcer",
    "minimal-diff-evaluator",
    "context-preservation-engine",
    "embedding-service",
    "system-health-monitor",
    "workspace-state-manager",
    "resilience",
    "observability",
    "source-integrity",
    "config",
    "database",
    "integration-tests",
    "agent-agency-contracts",
    "planning-agent",
    "council",
    "ingestors",
    "enrichers",
    "indexers",
    "knowledge-ingestor"
]

[workspace.package]
version = "0.1.0"
edition = "2021"
authors = ["Darian Rosebrook <darian@example.com>"]
license = "MIT"

[workspace.dependencies]
# Core async runtime
tokio = { version = "1.0", features = ["full"] }
async-trait = "0.1.74"

# Serialization
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
toml = "0.8"

# Database
sqlx = { version = "0.7", features = ["runtime-tokio-rustls", "postgres", "chrono", "uuid"] }
chrono = { version = "0.4", features = ["serde"] }

# HTTP and web
reqwest = { version = "0.11", features = ["json", "stream"] }
axum = { version = "0.7", features = ["json", "ws"] }
tower = "0.4"
tower-http = { version = "0.5", features = ["cors", "trace"] }

# Logging and observability
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter"] }
tracing-opentelemetry = "0.22"
opentelemetry = { version = "0.21", features = ["trace", "metrics"] }

# Error handling
anyhow = "1.0"
thiserror = "1.0"

# Utilities
uuid = { version = "1.0", features = ["v4", "serde"] }

# Configuration
config = "0.14"
clap = { version = "4.0", features = ["derive"] }

# Apple Silicon specific
core-foundation = "0.9"
objc = "0.2"

# Vector operations for embeddings
ndarray = "0.15"

# CAWS integration (using Node.js tools, not Rust crate)
# caws-core = { path = "../../apps/tools/caws" }

pkcs8 = "0.10"

# Security utilities
security = { path = "security" }

# Observability backends (now in individual crates)
# redis = { version = "0.24", features = ["tokio-comp", "connection-manager"] }
# prometheus = "0.13"
# cadence = "1.4"   # StatsD client

[profile.release]
opt-level = 3
debug = 1                  # keep some symbols for backtraces
incremental = false        # avoid pathological LTO+incremental combos
codegen-units = 1          # best runtime perf/size
lto = "thin"               # great perf/size without full-fat link times
panic = "abort"            # if acceptable for binaries
strip = "symbols"          # if smaller artifacts help link time/size

[profile.dev]
opt-level = 0
debug = 2
incremental = true
codegen-units = 256        # maximize parallel codegen for quick rebuilds
lto = "off"
debug-assertions = true
overflow-checks = true

[profile.test]
opt-level = 0
debug = 1
incremental = true
codegen-units = 256
lto = "off"
debug-assertions = true
