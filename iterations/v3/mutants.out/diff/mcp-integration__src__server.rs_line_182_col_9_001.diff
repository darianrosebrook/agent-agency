--- mcp-integration/src/server.rs
+++ replace MCPServer::spawn_http_server -> Result<(oneshot::Receiver<()>, HttpServerHandle)> with Ok((Receiver::from_iter([()]), Default::default()))
@@ -174,79 +174,17 @@
             status = "running",
             "MCP server started successfully"
         );
         Ok(())
     }
 
     /// Spawn the MCP HTTP server and return a readiness receiver plus handle.
     async fn spawn_http_server(&self) -> Result<(oneshot::Receiver<()>, HttpServerHandle)> {
-        if !self.config.server.enable_http {
-            bail!("HTTP disabled");
-        }
-
-        let (ready_tx, ready_rx) = oneshot::channel();
-        let (stop_tx, stop_rx) = oneshot::channel();
-
-        let addr = format!("{}:{}", self.config.server.host, self.config.server.port);
-        let registry = self.tool_registry.clone();
-        let caws = self.caws_integration.clone();
-        let registry_for_stats = self.tool_registry.clone();
-        let version_payload = Arc::new(serde_json::json!({
-            "name": self.config.server.server_name.clone(),
-            "version": self.config.server.version.clone(),
-        }));
-        let auth_api_key = self.config.server.auth_api_key.clone();
-        let rate_limiter = self.rate_limiter.clone();
-
-        let handle = tokio::task::spawn_blocking(move || {
-            let io = Self::build_io_handler(
-                registry.clone(),
-                registry_for_stats.clone(),
-                caws.clone(),
-                version_payload.clone(),
-            );
-            let builder = ServerBuilder::new(io).request_middleware(
-                move |request: jsonrpc_http_server::hyper::Request<Body>| {
-                    if let Some(ref expected) = auth_api_key {
-                        let provided = request
-                            .headers()
-                            .get("x-api-key")
-                            .and_then(|value| value.to_str().ok());
-                        if provided != Some(expected.as_str()) {
-                            return RequestMiddlewareAction::from(unauthorized_http_response());
-                        }
-                    }
-
-                    if let Some(ref limiter) = rate_limiter {
-                        let mut guard = limiter.lock().unwrap();
-                        if !guard.allow() {
-                            return RequestMiddlewareAction::from(rate_limited_http_response());
-                        }
-                    }
-
-                    RequestMiddlewareAction::from(request)
-                },
-            );
-
-            let server = builder
-                .threads(1)
-                .start_http(&addr.parse().expect("valid addr"))
-                .expect("start http");
-            let _ = ready_tx.send(());
-            let _ = stop_rx.blocking_recv();
-            server.close();
-        });
-
-        let http_handle = HttpServerHandle {
-            join_handle: handle,
-            shutdown_tx: Some(stop_tx),
-        };
-
-        Ok((ready_rx, http_handle))
+        Ok((Receiver::from_iter([()]), Default::default())) /* ~ changed by cargo-mutants ~ */
     }
 
     fn build_io_handler(
         registry: Arc<ToolRegistry>,
         registry_stats: Arc<ToolRegistry>,
         caws: Arc<CawsIntegration>,
         version_payload: Arc<serde_json::Value>,
     ) -> IoHandler<()> {
