version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: agent-agency-postgres
    environment:
      POSTGRES_DB: agent_agency
      POSTGRES_USER: agent_agency
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-secure-password-change-me}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - agent-agency-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agent_agency -d agent_agency"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: agent-agency-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-secure-redis-password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - agent-agency-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  # Agent Agency API Service
  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile.api
    container_name: agent-agency-api
    environment:
      DATABASE_URL: postgresql://agent_agency:${DATABASE_PASSWORD:-secure-password-change-me}@postgres:5432/agent_agency
      REDIS_URL: redis://:${REDIS_PASSWORD:-secure-redis-password}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secure-jwt-secret-change-me}
      API_KEY: ${API_KEY:-your-api-key-change-me}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      ARBITER_COUNCIL_SIZE: ${ARBITER_COUNCIL_SIZE:-3}
      ARBITER_DEBATE_ROUNDS: ${ARBITER_DEBATE_ROUNDS:-2}
      MAX_CONCURRENT_TASKS: ${MAX_CONCURRENT_TASKS:-5}
      TASK_TIMEOUT_SECONDS: ${TASK_TIMEOUT_SECONDS:-600}
      RUST_LOG: ${RUST_LOG:-info}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - agent-agency-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
      - ./workspace:/app/workspace

  # Agent Agency Web Dashboard
  dashboard:
    build:
      context: ..
      dockerfile: docker/Dockerfile.dashboard
    container_name: agent-agency-dashboard
    environment:
      NEXT_PUBLIC_API_URL: http://api:3000
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-your-nextauth-secret-change-me}
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3001}
    ports:
      - "3001:3001"
    depends_on:
      - api
    networks:
      - agent-agency-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Worker Pool for Task Execution
  worker:
    build:
      context: ..
      dockerfile: docker/Dockerfile.worker
    container_name: agent-agency-worker
    environment:
      DATABASE_URL: postgresql://agent_agency:${DATABASE_PASSWORD:-secure-password-change-me}@postgres:5432/agent_agency
      REDIS_URL: redis://:${REDIS_PASSWORD:-secure-redis-password}@redis:6379
      WORKER_POOL_SIZE: ${WORKER_POOL_SIZE:-10}
      MAX_MEMORY_MB: ${MAX_MEMORY_MB:-4096}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      RUST_LOG: ${RUST_LOG:-info}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      api:
        condition: service_started
    networks:
      - agent-agency-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
      - ./workspace:/app/workspace
    deploy:
      replicas: 2

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.24-alpine
    container_name: agent-agency-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - api
      - dashboard
    networks:
      - agent-agency-network
    restart: unless-stopped

  # Monitoring Stack (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: agent-agency-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - agent-agency-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: agent-agency-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: "false"
    ports:
      - "3002:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - agent-agency-network
    restart: unless-stopped

  # Log Aggregation (Optional)
  fluent-bit:
    image: fluent/fluent-bit:latest
    container_name: agent-agency-fluent-bit
    volumes:
      - ./monitoring/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
      - ./logs:/var/log/agent-agency:ro
    ports:
      - "24224:24224"
    networks:
      - agent-agency-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  agent-agency-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16