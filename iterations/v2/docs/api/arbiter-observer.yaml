openapi: 3.1.0
info:
  title: Arbiter Observer API
  version: "1.0.0"
  description: >
    Read-only interface for inspecting the Arbiter orchestrator. Endpoints expose
    status, metrics, events, and chain-of-thought artefacts produced by the
    observer bridge. All requests require loopback access plus bearer-token
    authentication unless the bridge is configured for Unix domain sockets.
servers:
  - url: http://127.0.0.1:4387
    description: Default loopback listener
security:
  - bearerAuth: []
paths:
  /observer/status:
    get:
      summary: Retrieve observer runtime status
      tags: [status]
      responses:
        "200":
          description: Observer status summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObserverStatus'
        "401":
          $ref: '#/components/responses/Unauthorized'
  /observer/metrics:
    get:
      summary: Retrieve metrics snapshot
      tags: [metrics]
      responses:
        "200":
          description: Metrics snapshot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObserverMetrics'
        "401":
          $ref: '#/components/responses/Unauthorized'
  /observer/progress:
    get:
      summary: Retrieve aggregated reasoning progress
      tags: [metrics]
      responses:
        "200":
          description: Reasoning progress counters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObserverProgress'
        "401":
          $ref: '#/components/responses/Unauthorized'
  /observer/logs:
    get:
      summary: List persisted events
      tags: [events]
      parameters:
        - $ref: '#/components/parameters/Cursor'
        - $ref: '#/components/parameters/Limit'
        - name: sinceTs
          in: query
          schema:
            type: string
            format: date-time
        - name: untilTs
          in: query
          schema:
            type: string
            format: date-time
        - name: type
          in: query
          schema:
            type: string
        - name: taskId
          in: query
          schema:
            type: string
        - name: severity
          in: query
          schema:
            type: string
            enum: [debug, info, warn, error]
      responses:
        "200":
          description: Event list with pagination cursor
          content:
            application/json:
              schema:
                type: object
                properties:
                  events:
                    type: array
                    items:
                      $ref: '#/components/schemas/ObserverEvent'
                  nextCursor:
                    type: string
                    nullable: true
        "401":
          $ref: '#/components/responses/Unauthorized'
  /observer/cot:
    get:
      summary: List chain-of-thought entries
      tags: [reasoning]
      parameters:
        - $ref: '#/components/parameters/Cursor'
        - $ref: '#/components/parameters/Limit'
        - name: taskId
          in: query
          schema:
            type: string
        - name: since
          in: query
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: Chain-of-thought entries
          content:
            application/json:
              schema:
                type: object
                properties:
                  entries:
                    type: array
                    items:
                      $ref: '#/components/schemas/ChainOfThoughtEntry'
                  nextCursor:
                    type: string
                    nullable: true
        "401":
          $ref: '#/components/responses/Unauthorized'
  /observer/tasks:
    post:
      summary: Submit task instructions to the arbiter
      tags: [tasks]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                specPath:
                  type: string
                metadata:
                  type: object
              anyOf:
                - required: [description]
                - required: [specPath]
      responses:
        "202":
          description: Task accepted for processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitTaskResponse'
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
  /observer/tasks/{taskId}:
    get:
      summary: Retrieve task progress snapshot
      tags: [tasks]
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Task summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskSummary'
        "404":
          $ref: '#/components/responses/NotFound'
        "401":
          $ref: '#/components/responses/Unauthorized'
  /observer/tasks/{taskId}/cot:
    get:
      summary: List chain-of-thought entries for a task
      tags: [reasoning]
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/Cursor'
        - $ref: '#/components/parameters/Limit'
      responses:
        "200":
          description: Task-specific chain-of-thought entries
          content:
            application/json:
              schema:
                type: object
                properties:
                  entries:
                    type: array
                    items:
                      $ref: '#/components/schemas/ChainOfThoughtEntry'
                  nextCursor:
                    type: string
                    nullable: true
        "401":
          $ref: '#/components/responses/Unauthorized'
  /observer/observations:
    post:
      summary: Append an observation note
      tags: [events]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [message]
              properties:
                message:
                  type: string
                taskId:
                  type: string
                author:
                  type: string
      responses:
        "201":
          description: Observation recorded
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
  /observer/events/stream:
    get:
      summary: Subscribe to server-sent events
      tags: [events]
      parameters:
        - name: taskId
          in: query
          schema:
            type: string
        - name: type
          in: query
          schema:
            type: string
        - name: severity
          in: query
          schema:
            type: string
            enum: [debug, info, warn, error]
        - name: verbose
          in: query
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Server-sent event stream
          content:
            text/event-stream:
              schema:
                type: string
        "401":
          $ref: '#/components/responses/Unauthorized'
  /observer/arbiter/start:
    post:
      summary: Ensure arbiter is running
      tags: [arbiter]
      responses:
        "200":
          description: Start acknowledgement
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [running, starting]
        "401":
          $ref: '#/components/responses/Unauthorized'
  /observer/arbiter/stop:
    post:
      summary: Request arbiter shutdown
      tags: [arbiter]
      responses:
        "200":
          description: Stop acknowledgement
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [stopping, stopped]
        "401":
          $ref: '#/components/responses/Unauthorized'
  /observer/commands:
    post:
      summary: Execute a shell-style command within arbiter context
      tags: [arbiter]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [command]
              properties:
                command:
                  type: string
      responses:
        "200":
          description: Command acknowledgement
          content:
            application/json:
              schema:
                type: object
                properties:
                  acknowledged:
                    type: boolean
                  note:
                    type: string
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  parameters:
    Cursor:
      name: cursor
      in: query
      schema:
        type: string
      required: false
    Limit:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 500
      required: false
  responses:
    Unauthorized:
      description: Authentication failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: Invalid request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
    ObserverStatus:
      type: object
      properties:
        status:
          type: string
          enum: [running, stopped, degraded]
        startedAt:
          type: string
          format: date-time
        uptimeMs:
          type: integer
        queueDepth:
          type: integer
        maxQueueSize:
          type: integer
        observerDegraded:
          type: boolean
        lastFlushMs:
          type: integer
        activeFile:
          type: string
          nullable: true
        backpressureEvents:
          type: integer
        authConfigured:
          type: boolean
    ObserverMetrics:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        reasoningDepthAvg:
          type: number
        reasoningDepthP95:
          type: number
        debateBreadthAvg:
          type: number
        taskSuccessRate:
          type: number
        toolBudgetUtilization:
          type: number
        activeTasks:
          type: integer
        queuedTasks:
          type: integer
        policyViolations:
          type: integer
        observerDegraded:
          type: boolean
        queueDepth:
          type: integer
    ObserverProgress:
      type: object
      properties:
        status:
          type: string
          enum: [not_started, running, completed, degraded]
        reasoningSteps:
          type: object
          properties:
            observations: { type: integer }
            analyses: { type: integer }
            plans: { type: integer }
            decisions: { type: integer }
            executions: { type: integer }
            verifications: { type: integer }
        totalReasoningSteps:
          type: integer
        uptimeMinutes:
          type: integer
    ObserverEvent:
      type: object
      properties:
        id: { type: string }
        type: { type: string }
        severity:
          type: string
          enum: [debug, info, warn, error]
        source: { type: string }
        taskId:
          type: string
          nullable: true
        agentId:
          type: string
          nullable: true
        timestamp:
          type: string
          format: date-time
        traceId:
          type: string
          nullable: true
        spanId:
          type: string
          nullable: true
        correlationId:
          type: string
          nullable: true
        metadata:
          type: object
          additionalProperties: true
    ChainOfThoughtEntry:
      type: object
      properties:
        id: { type: string }
        taskId:
          type: string
          nullable: true
        sessionId:
          type: string
          nullable: true
        phase:
          type: string
          enum:
            [observation, analysis, plan, decision, execute, verify, hypothesis, critique, other]
        agentId:
          type: string
          nullable: true
        agentRole:
          type: string
          nullable: true
        timestamp:
          type: string
          format: date-time
        confidence:
          type: number
          nullable: true
        content:
          type: string
          nullable: true
        redacted:
          type: boolean
        hash:
          type: string
          nullable: true
    SubmitTaskResponse:
      type: object
      properties:
        taskId:
          type: string
        assignmentId:
          type: string
          nullable: true
        queued:
          type: boolean
        overrideRequired:
          type: string
          nullable: true
    TaskSummary:
      type: object
      properties:
        taskId: { type: string }
        state:
          type: string
          enum: [running, failed, completed]
        progress:
          type: array
          items: { type: string }
        lastUpdated:
          type: string
          format: date-time
        currentPlan:
          type: string
          nullable: true
        nextActions:
          type: array
          nullable: true
          items: { type: string }
        redacted:
          type: boolean

