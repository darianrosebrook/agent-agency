openapi: 3.0.0
info:
  title: Benchmark Data API
  version: 2.0.0
  description: |
    API for Agent Agency V2 Benchmark Data collection and management.
    
    Provides data collection, quality validation, and RL training batch export.

servers:
  - url: http://localhost:3000/api/v2
    description: Local development server

paths:
  /benchmark/collect:
    post:
      summary: Collect benchmark data point
      description: Record performance data from task execution
      operationId: collectBenchmarkData
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BenchmarkDataPoint'
      responses:
        '201':
          description: Data point recorded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  rlReady:
                    type: boolean
        '400':
          description: Validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrors'

  /benchmark/query:
    post:
      summary: Query benchmark data
      description: Retrieve benchmark data matching criteria
      operationId: queryBenchmarkData
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BenchmarkQuery'
      responses:
        '200':
          description: Matching data points
          content:
            application/json:
              schema:
                type: object
                properties:
                  dataPoints:
                    type: array
                    items:
                      $ref: '#/components/schemas/BenchmarkDataPoint'
                  total:
                    type: integer
                  page:
                    type: integer

  /benchmark/export/rl-batch:
    post:
      summary: Export batch for RL training
      description: |
        Export quality-validated, anonymized benchmark data
        formatted for RL training consumption.
      operationId: exportRLBatch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RLBatchExportRequest'
      responses:
        '200':
          description: RL training batch ready
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RLTrainingBatch'
        '400':
          description: Insufficient data or invalid criteria

  /benchmark/statistics:
    get:
      summary: Get benchmark data statistics
      description: Retrieve aggregate statistics about collected data
      operationId: getBenchmarkStatistics
      parameters:
        - name: timeRange
          in: query
          schema:
            type: string
            enum: [7d, 30d, 90d, all]
        - name: aggregateBy
          in: query
          schema:
            type: string
            enum: [task-type, agent, complexity, day]
      responses:
        '200':
          description: Aggregate statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BenchmarkStatistics'

components:
  schemas:
    BenchmarkDataPoint:
      type: object
      required:
        - id
        - timestamp
        - task
        - routing
        - execution
        - evaluation
      properties:
        id:
          type: string
          format: uuid
        timestamp:
          type: string
          format: date-time
        tenantId:
          type: string
          description: Anonymized tenant identifier (hashed)
        task:
          $ref: '#/components/schemas/TaskContext'
        routing:
          $ref: '#/components/schemas/RoutingContext'
        execution:
          $ref: '#/components/schemas/ExecutionMetrics'
        evaluation:
          $ref: '#/components/schemas/EvaluationMetrics'
        rlLabels:
          $ref: '#/components/schemas/RLTrainingLabels'
        provenance:
          $ref: '#/components/schemas/Provenance'

    TaskContext:
      type: object
      required:
        - id
        - type
        - complexity
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum: [code-editing, research, data-analysis, design, planning]
        complexity:
          type: string
          enum: [trivial, standard, complex]
        requirements:
          type: array
          items:
            type: string
        description:
          type: string
          description: Anonymized task description
        cawsSpecId:
          type: string

    RoutingContext:
      type: object
      required:
        - selectedAgent
        - strategy
        - confidence
      properties:
        selectedAgent:
          type: object
          properties:
            id:
              type: string
              format: uuid
            name:
              type: string
            modelFamily:
              type: string
        strategy:
          type: string
          enum: [multi-armed-bandit, capability-match, load-balance, fallback]
        confidence:
          type: number
          format: float
          minimum: 0
          maximum: 1
        rationale:
          type: string
        alternativesConsidered:
          type: array
          items:
            type: object
            properties:
              agentId:
                type: string
              score:
                type: number
              reason:
                type: string

    ExecutionMetrics:
      type: object
      required:
        - success
        - latencyMs
        - tokensUsed
      properties:
        success:
          type: boolean
        failureReason:
          type: string
        partialSuccess:
          type: boolean
        latencyMs:
          type: integer
        tokensUsed:
          type: integer
        thinkingTokens:
          type: integer
        outputTokens:
          type: integer
        toolCallCount:
          type: integer
        toolCallSuccessRate:
          type: number
          format: float
        toolsUsed:
          type: array
          items:
            type: object
            properties:
              toolName:
                type: string
              callCount:
                type: integer
              successRate:
                type: number
              avgLatency:
                type: integer

    EvaluationMetrics:
      type: object
      required:
        - cawsCompliant
        - overallScore
      properties:
        cawsCompliant:
          type: boolean
        budgetCompliant:
          type: boolean
        qualityGates:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              passed:
                type: boolean
              score:
                type: number
              threshold:
                type: number
              mandatory:
                type: boolean
        rubricScores:
          type: object
          properties:
            format:
              type: number
              minimum: 0
              maximum: 1
            tool:
              type: number
              minimum: 0
              maximum: 1
            task:
              type: number
              minimum: 0
              maximum: 1
            minimal:
              type: number
              minimum: 0
              maximum: 1
            cost:
              type: number
              minimum: 0
              maximum: 1
            safety:
              type: number
              minimum: 0
              maximum: 1
        overallScore:
          type: number
          format: float
          minimum: 0
          maximum: 1

    RLTrainingLabels:
      type: object
      properties:
        turns:
          type: array
          items:
            type: object
            properties:
              turnNumber:
                type: integer
              toolCalled:
                type: string
              informationGain:
                type: number
              formatCorrectness:
                type: number
              taskProgress:
                type: number
              safetyScore:
                type: number
              turnReward:
                type: number
        finalOutcome:
          type: string
          enum: [success, failure, partial]
        totalReward:
          type: number

    Provenance:
      type: object
      properties:
        aiAssisted:
          type: boolean
        humanReviewed:
          type: boolean
        commitHash:
          type: string
        cawsVersion:
          type: string

    BenchmarkQuery:
      type: object
      properties:
        taskType:
          type: string
        complexity:
          type: string
        agentId:
          type: string
        minQualityScore:
          type: number
        timeRange:
          type: object
          properties:
            start:
              type: string
              format: date-time
            end:
              type: string
              format: date-time
        limit:
          type: integer
          default: 100
        offset:
          type: integer
          default: 0

    RLBatchExportRequest:
      type: object
      required:
        - minDataPoints
        - minQualityScore
      properties:
        minDataPoints:
          type: integer
          minimum: 1000
        maxDataPoints:
          type: integer
          maximum: 50000
        minQualityScore:
          type: number
          minimum: 0
          maximum: 1
        taskTypes:
          type: array
          items:
            type: string
        anonymize:
          type: boolean
          default: true
        addDifferentialPrivacyNoise:
          type: boolean
          default: false

    RLTrainingBatch:
      type: object
      properties:
        id:
          type: string
          format: uuid
        dataPoints:
          type: array
          items:
            $ref: '#/components/schemas/BenchmarkDataPoint'
        exportedAt:
          type: string
          format: date-time
        metadata:
          type: object
          properties:
            totalPoints:
              type: integer
            qualityStats:
              type: object
            taskTypeDistribution:
              type: object

    BenchmarkStatistics:
      type: object
      properties:
        totalDataPoints:
          type: integer
        validDataPoints:
          type: integer
        rlReadyDataPoints:
          type: integer
        avgQualityScore:
          type: number
        collectionRate:
          type: object
          properties:
            perDay:
              type: number
            perHour:
              type: number
        taskTypeDistribution:
          type: object
          additionalProperties:
            type: integer

    ValidationErrors:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string
              severity:
                type: string
                enum: [error, warning, info]

