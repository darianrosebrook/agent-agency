# CAWS Working Specification: V2 Database Layer
# Version: 1.0
# Author: @darianrosebrook
# Date: 2025-10-12
# Purpose: Hybrid vector-graph database architecture with multi-tenant isolation

id: V2-DATABASE-LAYER
title: V2 Database Layer - Hybrid Vector-Graph with Multi-Tenant Isolation
risk_tier: 1  # Critical infrastructure
mode: feature

change_budget:
  max_files: 25
  max_loc: 3000

blast_radius:
  modules:
    - iterations/v2/migrations/
    - iterations/v2/src/database/
    - iterations/v2/src/orchestrator/DatabaseClient.ts
    - iterations/v2/docs/database/
  data_migration: true  # New tables, RLS policies, and vector indexes
  
operational_rollback_slo: 30m

threats:
  - Data loss during migration execution
  - RLS policy misconfiguration exposing tenant data to unauthorized access
  - Vector index performance degradation under high query load
  - Graph traversal performance issues with deep relationship chains
  - Provenance chain corruption compromising audit integrity
  - Connection pool exhaustion under multi-tenant load
  - Migration failures leaving database in inconsistent state

scope:
  in:
    # Migrations
    - iterations/v2/migrations/006_create_knowledge_graph_schema.sql
    - iterations/v2/migrations/007_add_multi_tenant_isolation.sql
    - iterations/v2/migrations/008_create_hybrid_search_views.sql
    
    # Database clients (to be created)
    - iterations/v2/src/database/KnowledgeGraphClient.ts
    - iterations/v2/src/database/MultiTenantClient.ts
    - iterations/v2/src/database/HybridSearchClient.ts
    
    # Type definitions
    - iterations/v2/src/types/database-types.ts
    
    # Documentation
    - iterations/v2/docs/database/DATABASE-PATTERN-COMPARISON.md
    - iterations/v2/docs/database/PATTERN-LEARNINGS.md
    - iterations/v2/docs/database/SCHEMA-DOCUMENTATION.md
    - iterations/v2/docs/database/MIGRATION-PLAN.md
    - iterations/v2/docs/database/QUERY-PATTERNS.md
    
  out:
    - iterations/poc/
    - obsidian-rag/
    - iterations/v2/src/ai/
    - iterations/v2/src/orchestrator/ # Except DatabaseClient.ts
    - node_modules/

invariants:
  - All existing data remains accessible after migration completion
  - Tenant isolation must be enforced at database level via Row Level Security
  - Provenance chains maintain cryptographic integrity using SHA-256 hash chains
  - Vector search performance remains under 100ms P95 for semantic queries
  - Graph traversal completes within 200ms for 2-hop relationship queries
  - No data loss occurs during migration rollback procedures
  - Connection pool maintains minimum 10 connections for tenant-scoped queries
  - All CAWS entities are semantically discoverable via vector embeddings

acceptance:
  # Vector Search Acceptance
  - id: DB-VEC-001
    given: Agent capability stored with 768-dimensional embedding
    when: Semantic search query executed with target embedding
    then: Similar capabilities returned within 100ms using HNSW index with >95% recall
  
  - id: DB-VEC-002
    given: CAWS verdict stored with constitutional references and embedding
    when: Governance discovery query executed
    then: Related verdicts discoverable within 100ms with constitutional context preserved
  
  # Graph Traversal Acceptance
  - id: DB-GRAPH-001
    given: Agent relationships exist in graph with typed edges
    when: 2-hop traversal query executed from starting agent
    then: Related agents discovered within 200ms with confidence scores and relationship paths
  
  - id: DB-GRAPH-002
    given: Two agents connected through intermediate relationships
    when: Shortest path query executed
    then: Path returned with relationship types, total confidence, and hop count
  
  # Multi-Tenant Isolation Acceptance
  - id: DB-TENANT-001
    given: Multiple tenants with data in agent_profiles table
    when: Tenant A queries agent_profiles with app.current_tenant set
    then: Tenant B data completely inaccessible via RLS policies, zero rows returned
  
  - id: DB-TENANT-002
    given: Tenant configured with federated isolation level
    when: Cross-tenant aggregation query executed
    then: Aggregated data accessible with differential privacy noise applied per tenant config
  
  - id: DB-TENANT-003
    given: Tenant configured with strict isolation level
    when: Any query executed by different tenant
    then: Zero rows visible, audit log entry created, no data leakage possible
  
  # Provenance Integrity Acceptance
  - id: DB-PROV-001
    given: CAWS verdict recorded with parent provenance node
    when: Provenance chain validated
    then: Hash chain integrity verified using SHA-256, signature valid, constitutional refs discoverable
  
  - id: DB-PROV-002
    given: Multiple provenance nodes in chain
    when: Hash chain traversed from leaf to root
    then: All hashes verify correctly, no tampering detected, chain complete
  
  # Hybrid Search Acceptance
  - id: DB-HYBRID-001
    given: Capability search query with both embedding and graph parameters
    when: hybrid_search function invoked
    then: Results combine vector similarity and graph relationships, ranked by relevance
  
  - id: DB-HYBRID-002
    given: Search includes 2-hop graph traversal
    when: Hybrid search executed
    then: Graph-discovered entities included with hop distance and confidence scores
  
  # Performance Under Load Acceptance
  - id: DB-PERF-001
    given: 100 concurrent vector search queries
    when: Queries executed simultaneously
    then: P95 latency remains under 100ms, no query failures, HNSW index performs optimally
  
  - id: DB-PERF-002
    given: Multiple tenants querying simultaneously
    when: RLS policies active on all queries
    then: Tenant isolation overhead under 10ms per query, no policy evaluation bottlenecks
  
  # Migration Safety Acceptance
  - id: DB-MIG-001
    given: Existing production data in agent_profiles
    when: Migration 007 adds tenant_id and enables RLS
    then: All existing data backfilled to default-tenant, zero data loss, queries still functional
  
  - id: DB-MIG-002
    given: Migration 006 creates knowledge graph schema
    when: Migration executes in transaction
    then: All tables, indexes, and functions created successfully or entire transaction rolled back

non_functional:
  a11y: []  # Database layer, no accessibility requirements
  
  perf:
    vector_search_p95_ms: 100     # Semantic search latency target
    graph_traversal_2hop_ms: 200  # Graph query latency target
    tenant_isolation_overhead_ms: 10  # RLS policy evaluation overhead
    provenance_write_ms: 50       # Provenance node creation latency
    hybrid_search_p95_ms: 250     # Combined search latency
    connection_pool_min: 10       # Minimum connections for multi-tenant
    connection_pool_max: 50       # Maximum connections
    
  security:
    - row-level-security           # Database-level tenant isolation
    - tenant-isolation             # Multi-tenant data separation
    - data-encryption-at-rest      # PostgreSQL encryption
    - provenance-chain-integrity   # Cryptographic hash chains
    - audit-logging                # All tenant access logged
    - differential-privacy         # Federated learning privacy
    - no-sql-injection             # Parameterized queries only
    
  reliability:
    migration_success_rate: 1.0    # Zero tolerance for migration failures
    data_integrity: 1.0            # No data corruption allowed
    backup_frequency_hours: 24     # Daily backups minimum
    recovery_point_objective_hours: 1  # Max 1 hour data loss
    recovery_time_objective_minutes: 30  # Max 30 min downtime

contracts:
  - type: sql
    path: iterations/v2/migrations/006_create_knowledge_graph_schema.sql
    description: Knowledge graph schema with pgvector embeddings and typed relationships
    
  - type: sql
    path: iterations/v2/migrations/007_add_multi_tenant_isolation.sql
    description: Multi-tenant isolation with RLS policies and privacy configurations
    
  - type: sql
    path: iterations/v2/migrations/008_create_hybrid_search_views.sql
    description: Hybrid vector-graph search views and traversal functions
    
  - type: typescript
    path: iterations/v2/src/types/database-types.ts
    description: TypeScript types matching database schema for type safety

observability:
  logs:
    - tenant_access_log             # All cross-tenant access
    - graph_search_sessions         # Search performance tracking
    - migration_execution           # Migration audit trail
    
  metrics:
    - vector_search_latency_ms      # HNSW query performance
    - graph_traversal_latency_ms    # Relationship query performance
    - tenant_query_count            # Per-tenant usage
    - rls_overhead_ms               # Isolation cost
    - connection_pool_utilization   # Connection usage
    
  traces:
    - hybrid_search_execution       # Full search pipeline trace
    - graph_traversal_path          # Multi-hop query trace
    - tenant_context_setup          # RLS context establishment

phases:
  - name: Documentation and Analysis
    deliverables:
      - DATABASE-PATTERN-COMPARISON.md
      - PATTERN-LEARNINGS.md
    
  - name: Schema Design
    deliverables:
      - 006_create_knowledge_graph_schema.sql
      - 007_add_multi_tenant_isolation.sql
      - 008_create_hybrid_search_views.sql
    
  - name: Type Definitions
    deliverables:
      - database-types.ts
    
  - name: Migration Execution
    deliverables:
      - MIGRATION-PLAN.md
      - Migration testing results
      - Performance benchmarks
    
  - name: Client Implementation
    deliverables:
      - KnowledgeGraphClient.ts
      - MultiTenantClient.ts
      - HybridSearchClient.ts
    
  - name: Query Patterns and Optimization
    deliverables:
      - QUERY-PATTERNS.md
      - SCHEMA-DOCUMENTATION.md
      - Performance tuning results

test_coverage:
  unit: 0.85    # 85% minimum
  integration: 0.90  # 90% minimum (database integration critical)
  e2e: 0.70     # 70% for full system tests

dependencies:
  - postgresql: ">=13"      # Required for pgvector
  - pgvector: ">=0.5.0"     # Vector extension
  - pg: ">=8.11.0"          # Node.js client
  - uuid-ossp: "latest"     # UUID generation
  - pg_trgm: "latest"       # Fuzzy text search

validation:
  required_env:
    - DATABASE_URL           # PostgreSQL connection string
    - DATABASE_SSL           # SSL configuration
    - DATABASE_POOL_SIZE     # Connection pool size
    
  pre_deployment:
    - migrations_test_suite  # All migrations run on test DB
    - rollback_test_suite    # Rollback procedures tested
    - performance_benchmarks # Vector/graph performance verified
    - tenant_isolation_test  # RLS policies verified
    - data_integrity_check   # No data corruption
    
  post_deployment:
    - vector_index_health    # HNSW indexes functioning
    - rls_policy_active      # Tenant isolation enforced
    - provenance_chain_valid # Hash chains intact
    - query_performance      # P95 latencies met

rollback_plan:
  steps:
    - Disable RLS policies to restore full data access
    - Drop new tables (caws_provenance_graph, agent_relationships, agent_capabilities_graph)
    - Remove tenant_id columns from existing tables
    - Drop new indexes and views
    - Restore from pre-migration backup if data corruption detected
    
  validation:
    - All pre-existing queries functional
    - No data loss in original tables
    - Application can connect and query database
    
  slo: 30 minutes

success_criteria:
  - All 12 acceptance criteria pass automated tests
  - Vector search P95 < 100ms verified with 10K capabilities
  - Graph traversal P95 < 200ms verified with 1K agents
  - Tenant isolation verified with penetration testing
  - Zero data loss during migration
  - Rollback procedure tested and documented
  - Query patterns documented with examples
  - Schema documentation complete with ER diagrams
  - TypeScript types generated and validated
  - All migrations idempotent and transactional

notes: |
  This specification defines the foundational database architecture for V2's
  agent orchestration system. The hybrid vector-graph design enables:
  
  1. Semantic Discovery: CAWS governance entities (verdicts, waivers, gates)
     are semantically searchable via vector embeddings, making governance
     discoverable rather than just enforceable.
  
  2. Relationship Intelligence: Graph queries reveal agent collaboration
     patterns, capability overlaps, and performance correlations that inform
     intelligent routing decisions.
  
  3. Multi-Tenant Isolation: Database-level RLS policies guarantee tenant
     data separation, with support for federated learning across tenants
     using differential privacy.
  
  4. Cryptographic Provenance: All CAWS entities are stored in an immutable
     hash chain with ed25519 signatures, ensuring audit integrity and
     constitutional traceability.
  
  The design synthesizes proven patterns from POC (multi-tenancy, privacy)
  and Obsidian-RAG (knowledge graphs, vector search) while adding CAWS-
  specific requirements for governance and provenance.
  
  Key architectural decisions:
  - HNSW indexes for vector search (better recall than IVFFlat)
  - Typed relationships with ENUMs (stronger contracts than strings)
  - Materialized views for hybrid search (performance optimization)
  - Row Level Security for tenant isolation (database-level guarantee)
  - SHA-256 hash chains for provenance (cryptographic integrity)
  
  Implementation must proceed incrementally:
  1. Schema migrations in isolated transactions
  2. Backfill existing data carefully
  3. Enable RLS policies one table at a time
  4. Performance test each component
  5. Document rollback at each step

metadata:
  priority: critical
  estimated_effort_days: 15
  assigned_to: agent-orchestrator
  reviewers:
    - arbiter
    - database-architect
  created_at: 2025-10-12
  updated_at: 2025-10-12


