name: ARBITER-001 CI/CD

on:
    push:
        branches: [main, v2]
    pull_request:
        branches: [main, v2]
    workflow_dispatch:

env:
    NODE_VERSION: "20.x"
    POSTGRES_DB: arbiter_test
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: password

jobs:
    test:
        name: Test Suite
        runs-on: ubuntu-latest
        services:
            postgres:
                image: postgres:15
                env:
                    POSTGRES_DB: ${{ env.POSTGRES_DB }}
                    POSTGRES_USER: ${{ env.POSTGRES_USER }}
                    POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    - 5432:5432

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: "npm"

            - name: Install dependencies
              run: npm ci

            - name: Type checking
              run: npm run typecheck

            - name: Linting
              run: npm run lint

            - name: Run unit tests
              run: npm test -- --testPathIgnorePatterns="integration" --coverage
              env:
                  CI: true

            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v3
              with:
                  file: ./coverage/lcov.info
                  flags: unit-tests
                  name: codecov-umbrella

            - name: Run performance benchmarks
              run: npm run benchmark:agent-registry

            - name: Setup database
              run: npm run db:setup
              env:
                  DB_HOST: localhost
                  DB_PORT: 5432
                  POSTGRES_DB: ${{ env.POSTGRES_DB }}
                  POSTGRES_USER: ${{ env.POSTGRES_USER }}
                  POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}

            - name: Run integration tests
              run: npm test -- --testPathPattern="integration"
              env:
                  DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}

    mutation-test:
        name: Mutation Testing
        runs-on: ubuntu-latest
        needs: test
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: "npm"

            - name: Install dependencies
              run: npm ci

            - name: Run mutation tests
              run: npm run test:mutation
              continue-on-error: true # Mutation tests might fail if score is too low

    security:
        name: Security Scan
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: "npm"

            - name: Install dependencies
              run: npm ci

            - name: Run security audit
              run: npm audit --audit-level moderate

            - name: Run CAWS validation
              run: |
                  # Check if CAWS tools are available
                  if command -v caws >/dev/null 2>&1; then
                    caws validate
                  else
                    echo "CAWS tools not available, skipping validation"
                  fi

    deploy-staging:
        name: Deploy to Staging
        runs-on: ubuntu-latest
        needs: [test, security]
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        environment: staging

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}

            - name: Install dependencies
              run: npm ci

            - name: Build application
              run: npm run build

            - name: Deploy to staging
              run: |
                  echo "Deploying to staging environment..."
                  # Add deployment commands here
                  echo "Staging deployment completed"

    quality-gate:
        name: Quality Gate
        runs-on: ubuntu-latest
        needs: [test, mutation-test, security]
        if: always()

        steps:
            - name: Check all jobs
              run: |
                  if [[ "${{ needs.test.result }}" != "success" ]]; then
                    echo "❌ Unit tests failed"
                    exit 1
                  fi

                  if [[ "${{ needs.security.result }}" != "success" ]]; then
                    echo "❌ Security scan failed"
                    exit 1
                  fi

                  # Mutation tests might fail if score is too low - make this configurable
                  if [[ "${{ needs.mutation-test.result }}" == "failure" ]]; then
                    echo "⚠️  Mutation tests failed - check score requirements"
                    # Don't fail the gate for mutation test failures in CI
                  fi

                  echo "✅ All quality gates passed"
