apiVersion: apps/v1
kind: Deployment
metadata:
  name: agent-agency-council
  namespace: agent-agency
  labels:
    app: agent-agency-council
    component: council
    version: v3.0.0
spec:
  replicas: 2
  selector:
    matchLabels:
      app: agent-agency-council
  template:
    metadata:
      labels:
        app: agent-agency-council
        component: council
        version: v3.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8081"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: agent-agency-council
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
        - name: council
          image: agent-agency/council:v3.0.0
          ports:
            - containerPort: 8081
              name: http
              protocol: TCP
          env:
            - name: PYTHONPATH
              value: "/app"
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: agent-agency-secrets
                  key: database-url
            - name: REDIS_URL
              value: "redis://agent-agency-redis:6379"
            - name: OPENAI_API_KEY
              valueFrom:
                secretKeyRef:
                  name: agent-agency-secrets
                  key: openai-api-key
                  optional: true
            - name: ANTHROPIC_API_KEY
              valueFrom:
                secretKeyRef:
                  name: agent-agency-secrets
                  key: anthropic-api-key
                  optional: true
            - name: PROMETHEUS_ENDPOINT
              value: "http://agent-agency-prometheus:9090"
            - name: JAEGER_ENDPOINT
              value: "http://agent-agency-jaeger:14268/api/traces"
          resources:
            requests:
              cpu: 1
              memory: 2Gi
            limits:
              cpu: 4
              memory: 8Gi
          livenessProbe:
            httpGet:
              path: /health
              port: 8081
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /ready
              port: 8081
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          volumeMounts:
            - name: models
              mountPath: /app/models
            - name: logs
              mountPath: /app/logs
      volumes:
        - name: models
          persistentVolumeClaim:
            claimName: agent-agency-models-pvc
        - name: logs
          emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - agent-agency-council
                topologyKey: kubernetes.io/hostname
      # GPU support (uncomment for GPU-enabled deployments)
      # nodeSelector:
      #   accelerator: nvidia-tesla-k80
      # tolerations:
      #   - key: nvidia.com/gpu
      #     operator: Exists
      #     effect: NoSchedule
