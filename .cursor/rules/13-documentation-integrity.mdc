---
description: Documentation must match implementation reality - no claims of unimplemented features
globs:
alwaysApply: true
---

# Documentation Integrity & Reality Alignment

## Core Principle

**Documentation must accurately reflect implementation reality.** Never claim features exist that don't work, APIs that aren't implemented, or capabilities that are just placeholders.

## Documentation Standards

### README Accuracy

- **Feature Claims**: Only document features that are fully implemented and tested
- **Installation Instructions**: Must work on a clean environment
- **Usage Examples**: Code examples must run without errors
- **API Documentation**: All documented endpoints must exist and work
- **Prerequisites**: All required dependencies and versions listed

### API Documentation

- **Endpoint Completeness**: All documented endpoints implemented
- **Parameter Accuracy**: Request/response schemas match implementation
- **Error Responses**: Documented error codes match actual errors
- **Authentication**: Auth requirements match implementation
- **Examples**: Working code examples for all major endpoints

### Architecture Documentation

- **Component Diagrams**: Reflect actual code structure
- **Data Flow**: Match actual data processing paths
- **Integration Points**: Document real integrations, not planned ones
- **Deployment Architecture**: Match actual infrastructure
- **Scaling Strategy**: Based on implemented capabilities

## Implementation vs Documentation Verification

### Feature Claims Verification

Before documenting any feature, verify:

- [ ] Feature fully implemented (not placeholder/mock)
- [ ] Feature tested end-to-end
- [ ] Feature handles error cases
- [ ] Feature documented in user-facing docs
- [ ] Feature matches acceptance criteria

### API Documentation Verification

For every documented API:

- [ ] Endpoint exists and responds
- [ ] Request/response formats match docs
- [ ] Authentication works as documented
- [ ] Error handling matches documentation
- [ ] Rate limits implemented if documented

### Code Documentation Verification

For all public APIs:

- [ ] JSDoc/TSDoc comments accurate
- [ ] Parameter types match implementation
- [ ] Return types correct
- [ ] Error conditions documented
- [ ] Usage examples work

## Prohibited Documentation Patterns

### ‚ùå Feature Bloat Documentation

```markdown
<!-- DON'T document unimplemented features -->

## Features

- ‚úÖ User authentication
- ‚úÖ Real-time notifications
- ‚úÖ Advanced analytics dashboard <!-- Not implemented yet -->
- ‚úÖ Machine learning recommendations <!-- Placeholder only -->
```

### ‚ùå Vague Status Claims

```markdown
<!-- DON'T use ambiguous status -->

Status: Production Ready (75% complete) <!-- Confusing -->
Status: In Development (25% complete) <!-- Better -->
```

### ‚ùå Outdated Examples

```javascript
// DON'T: Example that doesn't work
fetch("/api/users", {
  method: "POST",
  body: JSON.stringify({ name: "John" }), // Missing required email field
});
```

### ‚ùå Missing Error Documentation

```typescript
// DON'T: Undocumented error conditions
function processPayment(amount: number): Promise<PaymentResult> {
  // What happens if amount < 0? Not documented
}
```

## Documentation Maintenance Standards

### Change Documentation Updates

- **Breaking Changes**: Update documentation immediately
- **New Features**: Document before release
- **API Changes**: Update API docs in same PR
- **Deprecations**: Mark deprecated features clearly
- **Migration Guides**: Provide for breaking changes

### Version Consistency

- **Changelog**: Accurate for each version
- **Version Numbers**: Match actual releases
- **Deprecation Notices**: Clear timelines and alternatives
- **Compatibility Matrix**: Accurate version compatibility

### Documentation Testing

- **Link Validation**: All links in docs work
- **Code Example Testing**: Examples tested in CI
- **Installation Verification**: Setup instructions tested
- **Cross-Platform**: Docs work on documented platforms

## Reality Alignment Checks

### Implementation Inventory

Maintain accurate inventory:

- [ ] Count actual source files vs documented components
- [ ] Verify test coverage matches claims
- [ ] Check database schema matches docs
- [ ] Validate configuration options exist
- [ ] Confirm external integrations work

### Feature Parity Audit

Regular audits to ensure:

- [ ] No documented features are missing
- [ ] No implemented features are undocumented
- [ ] No placeholder implementations documented as complete
- [ ] No deprecated features still documented as current

### User Experience Verification

- [ ] Onboarding works as documented
- [ ] Common use cases work end-to-end
- [ ] Error messages helpful and accurate
- [ ] Performance matches documented SLAs

## Correct Documentation Patterns

### ‚úÖ Accurate Feature Status

```markdown
## Features

### ‚úÖ Implemented

- User authentication with JWT tokens
- Real-time notifications via WebSocket
- Basic analytics dashboard

### üöß In Development

- Advanced ML recommendations (Q2 2025)
- Multi-tenant isolation (Q1 2025)

### üìã Planned

- AI-powered chat support (Q3 2025)
```

### ‚úÖ Working Code Examples

```javascript
// POST /api/users
const response = await fetch("/api/users", {
  method: "POST",
  headers: {
    "Content-Type": "application/json",
    Authorization: `Bearer ${token}`,
  },
  body: JSON.stringify({
    name: "John Doe",
    email: "john@example.com", // Required field included
    password: "securePassword123",
  }),
});

if (!response.ok) {
  throw new Error(`Failed to create user: ${response.statusText}`);
}

const user = await response.json();
console.log("Created user:", user);
```

### ‚úÖ Complete API Documentation

```typescript
/**
 * Creates a new user account
 * @param userData User registration data
 * @returns Promise<User> The created user object
 * @throws ValidationError if email format invalid
 * @throws ConflictError if email already exists
 * @throws RateLimitError if too many requests
 */
async function createUser(userData: CreateUserRequest): Promise<User> {
  // Implementation
}
```

### ‚úÖ Realistic Status Claims

```markdown
# Project Status

**Current Status**: In Development (Proof of Concept)

**Production Readiness**: 25% - Core authentication and basic API working, but missing:

- Database persistence (in-memory only)
- Security hardening
- Comprehensive testing
- Production deployment pipeline

**Next Milestone**: Alpha release (Q1 2025) with full persistence layer
```

## Documentation Quality Metrics

### Completeness Score

- **API Coverage**: % of public APIs documented
- **Feature Documentation**: % of features with user docs
- **Code Examples**: % of APIs with working examples
- **Error Documentation**: % of error conditions documented

### Accuracy Score

- **Working Examples**: % of code examples that run successfully
- **Link Validity**: % of documentation links that work
- **Version Accuracy**: % of version references that are current
- **Implementation Match**: % of documented features that work as described

### Maintenance Score

- **Update Frequency**: How often docs are updated vs code changes
- **Review Coverage**: % of doc changes that are reviewed
- **User Feedback**: Response time to documentation issues
- **Cross-Platform**: % of supported platforms with verified docs

## Enforcement Mechanisms

### Automated Checks

- **Documentation Tests**: CI runs documentation validation
- **Link Checking**: Automated link validation in docs
- **Example Testing**: Code examples executed in CI
- **API Contract Testing**: Docs vs implementation validation

### Review Requirements

- **Documentation Reviews**: Require review for doc changes
- **Implementation Reviews**: Check docs match implementation
- **User Testing**: Validate docs from user perspective
- **Cross-Functional Reviews**: Include different roles in reviews

### Accountability Measures

- **Documentation Debt**: Track unimplemented documented features
- **Reality Gap Metrics**: Measure docs vs implementation accuracy
- **User Feedback Integration**: Incorporate user-reported doc issues
- **Continuous Improvement**: Regular documentation quality reviews
