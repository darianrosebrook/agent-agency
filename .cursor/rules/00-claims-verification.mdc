---
description: Production readiness claims require rigorous verification - agents must prove, not assert
globs:
alwaysApply: true
---

# Production Readiness Verification & Accountability

## Core Principle

**Never claim "production-ready", "production-grade", or similar unless ALL criteria below are met.** If any criterion is not satisfied, use these statuses instead:

- ❌ **"In development"** - Active development with known issues
- ❌ **"Partially implemented"** - Some features working, major gaps remain
- ❌ **"Proof of concept"** - Core concept demonstrated, not production-viable

## Mandatory Production Readiness Criteria

Before claiming production readiness, **agents must verify ALL of these**:

### ✅ Code Quality Gates

- **Zero linting errors or warnings** (ESLint, TypeScript, etc.)
- **Zero TypeScript compilation errors**
- **All TODOs, PLACEHOLDERs, and MOCK DATA cleared from production code**
- **No dead code or unused imports**
- **Consistent code formatting** (Prettier/ESLint rules)

### ✅ Testing & Quality Assurance

- **Complete unit test coverage** (80%+ line coverage, 90%+ branch coverage)
- **All unit tests passing** (no skipped tests in production code)
- **Integration tests passing** (database, external APIs, end-to-end flows)
- **Mutation testing** (70%+ score for critical components)
- **Performance tests** meeting documented SLAs

### ✅ Infrastructure & Persistence

- **Actual database persistence implemented** (not just in-memory mocks)
- **Database integration tests passing** with real database
- **Migration scripts tested and working**
- **Data consistency and rollback capabilities**
- **Connection pooling and error handling**

### ✅ Security & Reliability

- **Security controls tested and validated** (authentication, authorization, input validation)
- **No security scan violations** (SAST, dependency scanning)
- **Circuit breakers and retry logic** for external dependencies
- **Graceful degradation** under failure conditions
- **Logging and monitoring** implemented

### ✅ Documentation & Reality Alignment

- **Documentation matches implementation reality** (no claims of features that don't exist)
- **API documentation** current and accurate
- **Deployment and operational docs** exist
- **Architecture diagrams** reflect actual implementation
- **README and changelogs** accurate

## Accountability Measures for Coding Agents

### Pre-Claim Verification Process

1. **Run full test suite** - All tests pass locally
2. **Run linters** - Zero errors/warnings
3. **Run security scans** - No vulnerabilities
4. **Check coverage reports** - Meet or exceed thresholds
5. **Verify database operations** - Real persistence working
6. **Test deployment pipeline** - CI/CD passes
7. **Document verification evidence** - Include in PR/commit

### Prohibited Claims

**NEVER claim these without verification:**

- "Production-ready" without all criteria met
- "Enterprise-grade" without enterprise testing
- "Battle-tested" without comprehensive testing
- "Stable" with failing tests or linting errors
- "Complete" with TODOs, placeholders, or mock data
- "Secure" without security testing and scans

### Evidence Requirements

For any production readiness claim, provide:

- Test execution results (screenshots/logs)
- Coverage reports
- Lint results
- Security scan reports
- Performance benchmarks
- Database connectivity proofs
- Deployment verification

## Common Failure Patterns to Avoid

### Implementation Gaps

- Empty directories claiming "full implementation"
- Mock functions in production code
- TODO comments in core business logic
- Placeholder implementations
- Missing error handling

### Testing Shortcuts

- Skipping integration tests
- Mocking database operations
- Ignoring linting errors
- Not testing error conditions
- Fake test data instead of real fixtures

### Documentation Lies

- Claiming 100% coverage with 75% actual
- Features documented but not implemented
- APIs documented with wrong signatures
- Missing breaking changes in changelogs

### Infrastructure Pretending

- In-memory storage claiming "persistence"
- No-op security claiming "secure"
- Console.log claiming "monitoring"
- No circuit breakers claiming "resilient"

## Verification Checklist

Use this before any production claim:

- [ ] `npm test` passes all tests
- [ ] `npm run lint` shows zero errors
- [ ] `npm run typecheck` passes
- [ ] Database tests use real PostgreSQL/MySQL/etc.
- [ ] Security tests validate actual controls
- [ ] Performance tests meet SLAs
- [ ] No TODO/PLACEHOLDER/MOCK_DATA in src/
- [ ] Coverage reports show adequate thresholds
- [ ] CI/CD pipeline passes
- [ ] Deployment docs exist and are tested
- [ ] Documentation matches code reality

**If ANY box is unchecked, do not claim production readiness.**
