---
description: Infrastructure, deployment, and operational standards
globs:
alwaysApply: true
---

# Infrastructure & Deployment Standards

## Database Standards

### Connection Management

- **Connection Pooling**: Always use connection pools, never single connections
- **Pool Configuration**: Set appropriate min/max connections based on load
- **Timeout Handling**: Configure connection, query, and idle timeouts
- **Health Checks**: Implement connection health validation
- **Graceful Shutdown**: Properly close connections on application shutdown

### Schema Management

- **Migration Scripts**: Version-controlled, transactional migrations
- **Downgrade Scripts**: Provide rollback migrations for all changes
- **Idempotent Operations**: Migrations safe to run multiple times
- **Testing**: All migrations tested against production-like data
- **Documentation**: Migration purpose and impact clearly documented

### Data Integrity

- **Constraints**: Foreign keys, unique constraints, check constraints
- **Transactions**: All multi-table operations in transactions
- **Atomicity**: Either all changes succeed or all fail
- **Consistency**: Database always in valid state
- **Isolation**: Concurrent operations don't interfere

## API Standards

### RESTful Design

- **Resource Naming**: Plural nouns, consistent casing
- **HTTP Methods**: GET (read), POST (create), PUT/PATCH (update), DELETE
- **Status Codes**: Proper HTTP status codes (200, 201, 400, 404, 500, etc.)
- **Content Types**: JSON for data, appropriate content-type headers
- **Versioning**: API versioning strategy (URL, headers, or content negotiation)

### Error Handling

- **Structured Errors**: Consistent error response format
- **Error Codes**: Machine-readable error codes with human-readable messages
- **Logging**: All errors logged with appropriate severity
- **Client Guidance**: Error responses include actionable information
- **No Information Leakage**: Sensitive information not exposed in errors

## Security Standards

### Authentication & Authorization

- **Token Management**: Secure token storage and validation
- **Session Handling**: Proper session lifecycle management
- **Role-Based Access**: Clear role definitions and enforcement
- **Permission Checking**: Every operation validates permissions
- **Audit Logging**: All security events logged

### Input Validation

- **Schema Validation**: All inputs validated against schemas
- **Sanitization**: User input sanitized before processing
- **Type Safety**: Runtime type checking for external inputs
- **Length Limits**: Reasonable limits on input sizes
- **Content Filtering**: Malicious content detection and blocking

## Monitoring & Observability

### Logging Standards

- **Structured Logging**: JSON format with consistent field names
- **Log Levels**: ERROR, WARN, INFO, DEBUG appropriately used
- **Context Information**: Request IDs, user context, operation details
- **Performance Logging**: Response times, resource usage
- **Error Correlation**: Related events linked together

### Metrics Collection

- **Business Metrics**: User registrations, API calls, conversion rates
- **Performance Metrics**: Response times, throughput, error rates
- **Resource Metrics**: CPU, memory, disk, network usage
- **Custom Metrics**: Application-specific KPIs
- **Alert Thresholds**: Defined thresholds for automated alerts

### Health Checks

- **Application Health**: Service availability and responsiveness
- **Dependency Health**: Database, external APIs, message queues
- **Resource Health**: Disk space, memory, connection pools
- **Business Health**: Core business operations functional
- **Automated Recovery**: Self-healing capabilities

## Deployment Standards

### Environment Configuration

- **Environment Variables**: No hardcoded configuration values
- **Configuration Files**: Version-controlled, environment-specific configs
- **Secrets Management**: Secure storage and access for secrets
- **Validation**: Configuration validated at startup
- **Documentation**: All configuration options documented

### Container Standards

- **Base Images**: Minimal, secure base images
- **Layer Optimization**: Efficient layer caching and ordering
- **Security Scanning**: Container images scanned for vulnerabilities
- **Resource Limits**: CPU and memory limits set appropriately
- **Health Checks**: Container health checks implemented

### CI/CD Pipeline

- **Automated Testing**: Full test suite runs on every commit
- **Security Scanning**: Automated security scans in pipeline
- **Performance Testing**: Automated performance regression tests
- **Deployment Automation**: Zero-touch deployment processes
- **Rollback Capability**: Automated rollback procedures

## Reliability Standards

### Circuit Breaker Pattern

- **Failure Threshold**: Configurable failure count before opening
- **Recovery Timeout**: Time before attempting recovery
- **Success Threshold**: Successes needed to close circuit
- **Fallback Behavior**: Graceful degradation when circuit open
- **Monitoring**: Circuit state and failure rates monitored

### Retry Logic

- **Exponential Backoff**: Increasing delay between retries
- **Jitter**: Randomization to prevent thundering herd
- **Maximum Retries**: Configurable retry limits
- **Retry Conditions**: Only retry appropriate error types
- **Circuit Integration**: Retry logic respects circuit breaker state

### Graceful Degradation

- **Feature Flags**: Ability to disable features under load
- **Fallback Content**: Cached or simplified content when services fail
- **Progressive Enhancement**: Core functionality works without extras
- **User Communication**: Clear messaging about degraded functionality
- **Automatic Recovery**: Services automatically recover when possible

## Performance Standards

### Response Time SLAs

- **API Endpoints**: P95 response times defined and monitored
- **Page Load Times**: Frontend performance budgets
- **Database Queries**: Query performance thresholds
- **Background Jobs**: Job completion time limits
- **Real-time Operations**: Sub-second response requirements

### Resource Management

- **Memory Usage**: Monitor and limit memory consumption
- **CPU Utilization**: Efficient CPU usage patterns
- **Disk I/O**: Optimize file system operations
- **Network Usage**: Efficient network communication
- **Connection Pools**: Proper sizing of database and external connections

### Caching Strategy

- **Cache Invalidation**: Proper cache invalidation strategies
- **Cache Penetration**: Protection against cache penetration attacks
- **Cache Warming**: Proactive cache population for hot data
- **Distributed Caching**: Scalable caching across multiple instances
- **Cache Monitoring**: Cache hit rates and performance monitoring

## Scalability Standards

### Horizontal Scaling

- **Stateless Design**: Applications designed for horizontal scaling
- **Shared Nothing**: Instances don't share local state
- **Load Balancing**: Proper load distribution across instances
- **Session Management**: Distributed session storage
- **Configuration**: Centralized configuration management

### Database Scaling

- **Read Replicas**: Read operations distributed across replicas
- **Sharding Strategy**: Data partitioning strategy defined
- **Connection Pooling**: Efficient connection management
- **Query Optimization**: Efficient query patterns
- **Indexing Strategy**: Appropriate indexes for query patterns

### Asynchronous Processing

- **Message Queues**: Asynchronous task processing
- **Background Jobs**: Long-running tasks processed asynchronously
- **Event-Driven Architecture**: Loose coupling through events
- **Dead Letter Queues**: Handling of failed message processing
- **Monitoring**: Queue depth and processing rate monitoring

## Backup & Recovery

### Data Backup

- **Regular Backups**: Automated backup schedules
- **Backup Verification**: Backup integrity validation
- **Retention Policies**: Backup retention periods defined
- **Encryption**: Backup data encrypted at rest and in transit
- **Testing**: Backup restoration regularly tested

### Disaster Recovery

- **Recovery Time Objective (RTO)**: Maximum acceptable downtime
- **Recovery Point Objective (RPO)**: Maximum data loss acceptable
- **Multi-Region Deployment**: Geographic redundancy
- **Failover Procedures**: Automated and manual failover processes
- **Recovery Testing**: Regular disaster recovery drills

### Business Continuity

- **Service Level Agreements**: Defined uptime and performance guarantees
- **Incident Response**: Defined incident response procedures
- **Communication Plans**: Stakeholder communication during incidents
- **Post-Mortem Process**: Incident analysis and improvement process
- **Continuous Improvement**: Regular review and improvement of processes

## Compliance & Governance

### Security Compliance

- **Data Encryption**: Data encrypted at rest and in transit
- **Access Controls**: Principle of least privilege enforced
- **Audit Trails**: Comprehensive audit logging
- **Vulnerability Management**: Regular security assessments
- **Incident Response**: Security incident response procedures

### Data Privacy

- **Data Classification**: Sensitive data properly classified
- **Retention Policies**: Data retention periods defined
- **Consent Management**: User consent properly managed
- **Data Deletion**: Right to deletion implemented
- **Privacy Impact Assessments**: Privacy risks assessed

### Regulatory Compliance

- **GDPR Compliance**: EU data protection regulations
- **CCPA Compliance**: California consumer privacy regulations
- **Industry Standards**: Relevant industry compliance requirements
- **Audit Readiness**: Systems designed for regulatory audits
- **Documentation**: Compliance evidence properly documented
