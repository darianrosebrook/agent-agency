{"$message_type":"diagnostic","message":"unused imports: `ConflictPrediction` and `LearningIntegrator`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"iterations/v3/council/src/advanced_arbitration_tests.rs","byte_start":282,"byte_end":300,"line_start":8,"line_end":8,"column_start":73,"column_end":91,"is_primary":true,"text":[{"text":"        AdvancedArbitrationEngine, ArbitrationResult, ConfidenceScorer, ConflictPrediction,","highlight_start":73,"highlight_end":91}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"iterations/v3/council/src/advanced_arbitration_tests.rs","byte_start":363,"byte_end":381,"line_start":9,"line_end":9,"column_start":62,"column_end":80,"is_primary":true,"text":[{"text":"        ConsensusBuilder, ConsensusResult, LearningInsights, LearningIntegrator,","highlight_start":62,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"iterations/v3/council/src/advanced_arbitration_tests.rs","byte_start":280,"byte_end":300,"line_start":8,"line_end":8,"column_start":71,"column_end":91,"is_primary":true,"text":[{"text":"        AdvancedArbitrationEngine, ArbitrationResult, ConfidenceScorer, ConflictPrediction,","highlight_start":71,"highlight_end":91}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"iterations/v3/council/src/advanced_arbitration_tests.rs","byte_start":361,"byte_end":381,"line_start":9,"line_end":9,"column_start":60,"column_end":80,"is_primary":true,"text":[{"text":"        ConsensusBuilder, ConsensusResult, LearningInsights, LearningIntegrator,","highlight_start":60,"highlight_end":80}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `ConflictPrediction` and `LearningIntegrator`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0miterations/v3/council/src/advanced_arbitration_tests.rs:8:73\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        AdvancedArbitrationEngine, ArbitrationResult, ConfidenceScorer, ConflictPrediction,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ConsensusBuilder, ConsensusResult, LearningInsights, LearningIntegrator,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `crate::types::*`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"iterations/v3/council/src/advanced_arbitration_tests.rs","byte_start":518,"byte_end":533,"line_start":13,"line_end":13,"column_start":9,"column_end":24,"is_primary":true,"text":[{"text":"    use crate::types::*;","highlight_start":9,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"iterations/v3/council/src/advanced_arbitration_tests.rs","byte_start":514,"byte_end":534,"line_start":13,"line_end":13,"column_start":5,"column_end":25,"is_primary":true,"text":[{"text":"    use crate::types::*;","highlight_start":5,"highlight_end":25}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::types::*`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0miterations/v3/council/src/advanced_arbitration_tests.rs:13:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use crate::types::*;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `LearningEventType`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"iterations/v3/council/src/predictive_learning_system_tests.rs","byte_start":224,"byte_end":241,"line_start":8,"line_end":8,"column_start":30,"column_end":47,"is_primary":true,"text":[{"text":"        LearningAccelerator, LearningEventType, LearningInsights, OutcomePredictor, OutcomeType,","highlight_start":30,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"iterations/v3/council/src/predictive_learning_system_tests.rs","byte_start":222,"byte_end":241,"line_start":8,"line_end":8,"column_start":28,"column_end":47,"is_primary":true,"text":[{"text":"        LearningAccelerator, LearningEventType, LearningInsights, OutcomePredictor, OutcomeType,","highlight_start":28,"highlight_end":47}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `LearningEventType`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0miterations/v3/council/src/predictive_learning_system_tests.rs:8:30\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        LearningAccelerator, LearningEventType, LearningInsights, OutcomePredictor, OutcomeType,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `TestType`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"iterations/v3/council/src/intelligent_edge_case_testing_tests.rs","byte_start":507,"byte_end":515,"line_start":11,"line_end":11,"column_start":28,"column_end":36,"is_primary":true,"text":[{"text":"        TestSpecification, TestType,","highlight_start":28,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"iterations/v3/council/src/intelligent_edge_case_testing_tests.rs","byte_start":505,"byte_end":515,"line_start":11,"line_end":11,"column_start":26,"column_end":36,"is_primary":true,"text":[{"text":"        TestSpecification, TestType,","highlight_start":26,"highlight_end":36}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `TestType`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0miterations/v3/council/src/intelligent_edge_case_testing_tests.rs:11:28\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        TestSpecification, TestType,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `std::collections::HashMap`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"iterations/v3/council/src/intelligent_edge_case_testing_tests.rs","byte_start":553,"byte_end":578,"line_start":14,"line_end":14,"column_start":9,"column_end":34,"is_primary":true,"text":[{"text":"    use std::collections::HashMap;","highlight_start":9,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"iterations/v3/council/src/intelligent_edge_case_testing_tests.rs","byte_start":549,"byte_end":579,"line_start":14,"line_end":14,"column_start":5,"column_end":35,"is_primary":true,"text":[{"text":"    use std::collections::HashMap;","highlight_start":5,"highlight_end":35}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `std::collections::HashMap`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0miterations/v3/council/src/intelligent_edge_case_testing_tests.rs:14:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use std::collections::HashMap;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `execution`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"iterations/v3/council/src/intelligent_edge_case_testing.rs","byte_start":18381,"byte_end":18390,"line_start":702,"line_end":702,"column_start":9,"column_end":18,"is_primary":true,"text":[{"text":"        execution: &TestExecution,","highlight_start":9,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"iterations/v3/council/src/intelligent_edge_case_testing.rs","byte_start":18381,"byte_end":18390,"line_start":702,"line_end":702,"column_start":9,"column_end":18,"is_primary":true,"text":[{"text":"        execution: &TestExecution,","highlight_start":9,"highlight_end":18}],"label":null,"suggested_replacement":"_execution","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `execution`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0miterations/v3/council/src/intelligent_edge_case_testing.rs:702:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m702\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        execution: &TestExecution,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_execution`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `worker_id`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"iterations/v3/council/src/predictive_quality_assessor.rs","byte_start":27568,"byte_end":27577,"line_start":846,"line_end":846,"column_start":9,"column_end":18,"is_primary":true,"text":[{"text":"        worker_id: &str,","highlight_start":9,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"iterations/v3/council/src/predictive_quality_assessor.rs","byte_start":27568,"byte_end":27577,"line_start":846,"line_end":846,"column_start":9,"column_end":18,"is_primary":true,"text":[{"text":"        worker_id: &str,","highlight_start":9,"highlight_end":18}],"label":null,"suggested_replacement":"_worker_id","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `worker_id`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0miterations/v3/council/src/predictive_quality_assessor.rs:846:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m846\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        worker_id: &str,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_worker_id`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `resolve_conflicts` found for enum `std::result::Result` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"iterations/v3/council/src/advanced_arbitration_tests.rs","byte_start":9723,"byte_end":9740,"line_start":261,"line_end":261,"column_start":29,"column_end":46,"is_primary":true,"text":[{"text":"        let result = engine.resolve_conflicts(conflicting_outputs).await.unwrap();","highlight_start":29,"highlight_end":46}],"label":"method not found in `std::result::Result<AdvancedArbitrationEngine, anyhow::Error>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the method `resolve_conflicts` exists on the type `AdvancedArbitrationEngine`","code":null,"level":"note","spans":[{"file_name":"iterations/v3/council/src/advanced_arbitration.rs","byte_start":19885,"byte_end":20014,"line_start":583,"line_end":586,"column_start":5,"column_end":35,"is_primary":true,"text":[{"text":"    pub async fn resolve_conflicts(","highlight_start":5,"highlight_end":36},{"text":"        &self,","highlight_start":1,"highlight_end":15},{"text":"        conflicting_outputs: Vec<WorkerOutput>,","highlight_start":1,"highlight_end":48},{"text":"    ) -> Result<ArbitrationResult> {","highlight_start":1,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"consider using `Result::expect` to unwrap the `AdvancedArbitrationEngine` value, panicking if the value is a `Result::Err`","code":null,"level":"help","spans":[{"file_name":"iterations/v3/council/src/advanced_arbitration_tests.rs","byte_start":9722,"byte_end":9722,"line_start":261,"line_end":261,"column_start":28,"column_end":28,"is_primary":true,"text":[{"text":"        let result = engine.resolve_conflicts(conflicting_outputs).await.unwrap();","highlight_start":28,"highlight_end":28}],"label":null,"suggested_replacement":".expect(\"REASON\")","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `resolve_conflicts` found for enum `std::result::Result` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0miterations/v3/council/src/advanced_arbitration_tests.rs:261:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m261\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let result = engine.resolve_conflicts(conflicting_outputs).await.unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `std::result::Result<AdvancedArbitrationEngine, anyhow::Error>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the method `resolve_conflicts` exists on the type `AdvancedArbitrationEngine`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0miterations/v3/council/src/advanced_arbitration.rs:583:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m583\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn resolve_conflicts(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m584\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        &self,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m585\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        conflicting_outputs: Vec<WorkerOutput>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m586\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> Result<ArbitrationResult> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|__________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider using `Result::expect` to unwrap the `AdvancedArbitrationEngine` value, panicking if the value is a `Result::Err`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m261\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let result = engine\u001b[0m\u001b[0m\u001b[38;5;10m.expect(\"REASON\")\u001b[0m\u001b[0m.resolve_conflicts(conflicting_outputs).await.unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `predict_conflicts` found for enum `std::result::Result` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"iterations/v3/council/src/advanced_arbitration_tests.rs","byte_start":10498,"byte_end":10515,"line_start":279,"line_end":279,"column_start":33,"column_end":50,"is_primary":true,"text":[{"text":"        let prediction = engine.predict_conflicts(&task_spec).await.unwrap();","highlight_start":33,"highlight_end":50}],"label":"method not found in `std::result::Result<AdvancedArbitrationEngine, anyhow::Error>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the method `predict_conflicts` exists on the type `AdvancedArbitrationEngine`","code":null,"level":"note","spans":[{"file_name":"iterations/v3/council/src/advanced_arbitration.rs","byte_start":22963,"byte_end":23052,"line_start":667,"line_end":667,"column_start":5,"column_end":94,"is_primary":true,"text":[{"text":"    pub async fn predict_conflicts(&self, task_spec: &TaskSpec) -> Result<ConflictPrediction> {","highlight_start":5,"highlight_end":94}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"consider using `Result::expect` to unwrap the `AdvancedArbitrationEngine` value, panicking if the value is a `Result::Err`","code":null,"level":"help","spans":[{"file_name":"iterations/v3/council/src/advanced_arbitration_tests.rs","byte_start":10497,"byte_end":10497,"line_start":279,"line_end":279,"column_start":32,"column_end":32,"is_primary":true,"text":[{"text":"        let prediction = engine.predict_conflicts(&task_spec).await.unwrap();","highlight_start":32,"highlight_end":32}],"label":null,"suggested_replacement":".expect(\"REASON\")","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `predict_conflicts` found for enum `std::result::Result` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0miterations/v3/council/src/advanced_arbitration_tests.rs:279:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m279\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let prediction = engine.predict_conflicts(&task_spec).await.unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `std::result::Result<AdvancedArbitrationEngine, anyhow::Error>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the method `predict_conflicts` exists on the type `AdvancedArbitrationEngine`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0miterations/v3/council/src/advanced_arbitration.rs:667:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m667\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn predict_conflicts(&self, task_spec: &TaskSpec) -> Result<ConflictPrediction> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider using `Result::expect` to unwrap the `AdvancedArbitrationEngine` value, panicking if the value is a `Result::Err`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m279\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let prediction = engine\u001b[0m\u001b[0m\u001b[38;5;10m.expect(\"REASON\")\u001b[0m\u001b[0m.predict_conflicts(&task_spec).await.unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `resolve_conflicts` found for enum `std::result::Result` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"iterations/v3/council/src/advanced_arbitration_tests.rs","byte_start":11232,"byte_end":11249,"line_start":300,"line_end":300,"column_start":29,"column_end":46,"is_primary":true,"text":[{"text":"        let result = engine.resolve_conflicts(single_output).await.unwrap();","highlight_start":29,"highlight_end":46}],"label":"method not found in `std::result::Result<AdvancedArbitrationEngine, anyhow::Error>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the method `resolve_conflicts` exists on the type `AdvancedArbitrationEngine`","code":null,"level":"note","spans":[{"file_name":"iterations/v3/council/src/advanced_arbitration.rs","byte_start":19885,"byte_end":20014,"line_start":583,"line_end":586,"column_start":5,"column_end":35,"is_primary":true,"text":[{"text":"    pub async fn resolve_conflicts(","highlight_start":5,"highlight_end":36},{"text":"        &self,","highlight_start":1,"highlight_end":15},{"text":"        conflicting_outputs: Vec<WorkerOutput>,","highlight_start":1,"highlight_end":48},{"text":"    ) -> Result<ArbitrationResult> {","highlight_start":1,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"consider using `Result::expect` to unwrap the `AdvancedArbitrationEngine` value, panicking if the value is a `Result::Err`","code":null,"level":"help","spans":[{"file_name":"iterations/v3/council/src/advanced_arbitration_tests.rs","byte_start":11231,"byte_end":11231,"line_start":300,"line_end":300,"column_start":28,"column_end":28,"is_primary":true,"text":[{"text":"        let result = engine.resolve_conflicts(single_output).await.unwrap();","highlight_start":28,"highlight_end":28}],"label":null,"suggested_replacement":".expect(\"REASON\")","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `resolve_conflicts` found for enum `std::result::Result` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0miterations/v3/council/src/advanced_arbitration_tests.rs:300:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m300\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let result = engine.resolve_conflicts(single_output).await.unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `std::result::Result<AdvancedArbitrationEngine, anyhow::Error>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the method `resolve_conflicts` exists on the type `AdvancedArbitrationEngine`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0miterations/v3/council/src/advanced_arbitration.rs:583:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m583\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn resolve_conflicts(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m584\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        &self,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m585\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        conflicting_outputs: Vec<WorkerOutput>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m586\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> Result<ArbitrationResult> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|__________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider using `Result::expect` to unwrap the `AdvancedArbitrationEngine` value, panicking if the value is a `Result::Err`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m300\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let result = engine\u001b[0m\u001b[0m\u001b[38;5;10m.expect(\"REASON\")\u001b[0m\u001b[0m.resolve_conflicts(single_output).await.unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `resolve_conflicts` found for enum `std::result::Result` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"iterations/v3/council/src/advanced_arbitration_tests.rs","byte_start":11890,"byte_end":11907,"line_start":317,"line_end":317,"column_start":29,"column_end":46,"is_primary":true,"text":[{"text":"        let result = engine.resolve_conflicts(empty_outputs).await;","highlight_start":29,"highlight_end":46}],"label":"method not found in `std::result::Result<AdvancedArbitrationEngine, anyhow::Error>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the method `resolve_conflicts` exists on the type `AdvancedArbitrationEngine`","code":null,"level":"note","spans":[{"file_name":"iterations/v3/council/src/advanced_arbitration.rs","byte_start":19885,"byte_end":20014,"line_start":583,"line_end":586,"column_start":5,"column_end":35,"is_primary":true,"text":[{"text":"    pub async fn resolve_conflicts(","highlight_start":5,"highlight_end":36},{"text":"        &self,","highlight_start":1,"highlight_end":15},{"text":"        conflicting_outputs: Vec<WorkerOutput>,","highlight_start":1,"highlight_end":48},{"text":"    ) -> Result<ArbitrationResult> {","highlight_start":1,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"consider using `Result::expect` to unwrap the `AdvancedArbitrationEngine` value, panicking if the value is a `Result::Err`","code":null,"level":"help","spans":[{"file_name":"iterations/v3/council/src/advanced_arbitration_tests.rs","byte_start":11889,"byte_end":11889,"line_start":317,"line_end":317,"column_start":28,"column_end":28,"is_primary":true,"text":[{"text":"        let result = engine.resolve_conflicts(empty_outputs).await;","highlight_start":28,"highlight_end":28}],"label":null,"suggested_replacement":".expect(\"REASON\")","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `resolve_conflicts` found for enum `std::result::Result` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0miterations/v3/council/src/advanced_arbitration_tests.rs:317:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m317\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let result = engine.resolve_conflicts(empty_outputs).await;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `std::result::Result<AdvancedArbitrationEngine, anyhow::Error>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the method `resolve_conflicts` exists on the type `AdvancedArbitrationEngine`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0miterations/v3/council/src/advanced_arbitration.rs:583:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m583\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn resolve_conflicts(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m584\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        &self,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m585\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        conflicting_outputs: Vec<WorkerOutput>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m586\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> Result<ArbitrationResult> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|__________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider using `Result::expect` to unwrap the `AdvancedArbitrationEngine` value, panicking if the value is a `Result::Err`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m317\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let result = engine\u001b[0m\u001b[0m\u001b[38;5;10m.expect(\"REASON\")\u001b[0m\u001b[0m.resolve_conflicts(empty_outputs).await;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `resolve_conflicts` found for enum `std::result::Result` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"iterations/v3/council/src/advanced_arbitration_tests.rs","byte_start":12475,"byte_end":12492,"line_start":332,"line_end":332,"column_start":29,"column_end":46,"is_primary":true,"text":[{"text":"        let result = engine.resolve_conflicts(outputs).await.unwrap();","highlight_start":29,"highlight_end":46}],"label":"method not found in `std::result::Result<AdvancedArbitrationEngine, anyhow::Error>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the method `resolve_conflicts` exists on the type `AdvancedArbitrationEngine`","code":null,"level":"note","spans":[{"file_name":"iterations/v3/council/src/advanced_arbitration.rs","byte_start":19885,"byte_end":20014,"line_start":583,"line_end":586,"column_start":5,"column_end":35,"is_primary":true,"text":[{"text":"    pub async fn resolve_conflicts(","highlight_start":5,"highlight_end":36},{"text":"        &self,","highlight_start":1,"highlight_end":15},{"text":"        conflicting_outputs: Vec<WorkerOutput>,","highlight_start":1,"highlight_end":48},{"text":"    ) -> Result<ArbitrationResult> {","highlight_start":1,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"consider using `Result::expect` to unwrap the `AdvancedArbitrationEngine` value, panicking if the value is a `Result::Err`","code":null,"level":"help","spans":[{"file_name":"iterations/v3/council/src/advanced_arbitration_tests.rs","byte_start":12474,"byte_end":12474,"line_start":332,"line_end":332,"column_start":28,"column_end":28,"is_primary":true,"text":[{"text":"        let result = engine.resolve_conflicts(outputs).await.unwrap();","highlight_start":28,"highlight_end":28}],"label":null,"suggested_replacement":".expect(\"REASON\")","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `resolve_conflicts` found for enum `std::result::Result` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0miterations/v3/council/src/advanced_arbitration_tests.rs:332:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m332\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let result = engine.resolve_conflicts(outputs).await.unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `std::result::Result<AdvancedArbitrationEngine, anyhow::Error>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the method `resolve_conflicts` exists on the type `AdvancedArbitrationEngine`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0miterations/v3/council/src/advanced_arbitration.rs:583:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m583\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn resolve_conflicts(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m584\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        &self,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m585\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        conflicting_outputs: Vec<WorkerOutput>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m586\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> Result<ArbitrationResult> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|__________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider using `Result::expect` to unwrap the `AdvancedArbitrationEngine` value, panicking if the value is a `Result::Err`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m332\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let result = engine\u001b[0m\u001b[0m\u001b[38;5;10m.expect(\"REASON\")\u001b[0m\u001b[0m.resolve_conflicts(outputs).await.unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `resolve_conflicts` found for enum `std::result::Result` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"iterations/v3/council/src/advanced_arbitration_tests.rs","byte_start":16470,"byte_end":16487,"line_start":431,"line_end":431,"column_start":29,"column_end":46,"is_primary":true,"text":[{"text":"        let result = engine.resolve_conflicts(similar_outputs).await.unwrap();","highlight_start":29,"highlight_end":46}],"label":"method not found in `std::result::Result<AdvancedArbitrationEngine, anyhow::Error>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the method `resolve_conflicts` exists on the type `AdvancedArbitrationEngine`","code":null,"level":"note","spans":[{"file_name":"iterations/v3/council/src/advanced_arbitration.rs","byte_start":19885,"byte_end":20014,"line_start":583,"line_end":586,"column_start":5,"column_end":35,"is_primary":true,"text":[{"text":"    pub async fn resolve_conflicts(","highlight_start":5,"highlight_end":36},{"text":"        &self,","highlight_start":1,"highlight_end":15},{"text":"        conflicting_outputs: Vec<WorkerOutput>,","highlight_start":1,"highlight_end":48},{"text":"    ) -> Result<ArbitrationResult> {","highlight_start":1,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"consider using `Result::expect` to unwrap the `AdvancedArbitrationEngine` value, panicking if the value is a `Result::Err`","code":null,"level":"help","spans":[{"file_name":"iterations/v3/council/src/advanced_arbitration_tests.rs","byte_start":16469,"byte_end":16469,"line_start":431,"line_end":431,"column_start":28,"column_end":28,"is_primary":true,"text":[{"text":"        let result = engine.resolve_conflicts(similar_outputs).await.unwrap();","highlight_start":28,"highlight_end":28}],"label":null,"suggested_replacement":".expect(\"REASON\")","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `resolve_conflicts` found for enum `std::result::Result` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0miterations/v3/council/src/advanced_arbitration_tests.rs:431:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m431\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let result = engine.resolve_conflicts(similar_outputs).await.unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `std::result::Result<AdvancedArbitrationEngine, anyhow::Error>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the method `resolve_conflicts` exists on the type `AdvancedArbitrationEngine`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0miterations/v3/council/src/advanced_arbitration.rs:583:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m583\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn resolve_conflicts(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m584\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        &self,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m585\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        conflicting_outputs: Vec<WorkerOutput>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m586\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> Result<ArbitrationResult> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|__________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider using `Result::expect` to unwrap the `AdvancedArbitrationEngine` value, panicking if the value is a `Result::Err`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m431\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let result = engine\u001b[0m\u001b[0m\u001b[38;5;10m.expect(\"REASON\")\u001b[0m\u001b[0m.resolve_conflicts(similar_outputs).await.unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"no method named `resolve_conflicts` found for enum `std::result::Result` in the current scope","code":{"code":"E0599","explanation":"This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"},"level":"error","spans":[{"file_name":"iterations/v3/council/src/advanced_arbitration_tests.rs","byte_start":16920,"byte_end":16937,"line_start":440,"line_end":440,"column_start":30,"column_end":47,"is_primary":true,"text":[{"text":"        let result2 = engine.resolve_conflicts(varied_outputs).await.unwrap();","highlight_start":30,"highlight_end":47}],"label":"method not found in `std::result::Result<AdvancedArbitrationEngine, anyhow::Error>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the method `resolve_conflicts` exists on the type `AdvancedArbitrationEngine`","code":null,"level":"note","spans":[{"file_name":"iterations/v3/council/src/advanced_arbitration.rs","byte_start":19885,"byte_end":20014,"line_start":583,"line_end":586,"column_start":5,"column_end":35,"is_primary":true,"text":[{"text":"    pub async fn resolve_conflicts(","highlight_start":5,"highlight_end":36},{"text":"        &self,","highlight_start":1,"highlight_end":15},{"text":"        conflicting_outputs: Vec<WorkerOutput>,","highlight_start":1,"highlight_end":48},{"text":"    ) -> Result<ArbitrationResult> {","highlight_start":1,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"consider using `Result::expect` to unwrap the `AdvancedArbitrationEngine` value, panicking if the value is a `Result::Err`","code":null,"level":"help","spans":[{"file_name":"iterations/v3/council/src/advanced_arbitration_tests.rs","byte_start":16919,"byte_end":16919,"line_start":440,"line_end":440,"column_start":29,"column_end":29,"is_primary":true,"text":[{"text":"        let result2 = engine.resolve_conflicts(varied_outputs).await.unwrap();","highlight_start":29,"highlight_end":29}],"label":null,"suggested_replacement":".expect(\"REASON\")","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0599]\u001b[0m\u001b[0m\u001b[1m: no method named `resolve_conflicts` found for enum `std::result::Result` in the current scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0miterations/v3/council/src/advanced_arbitration_tests.rs:440:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m440\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let result2 = engine.resolve_conflicts(varied_outputs).await.unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmethod not found in `std::result::Result<AdvancedArbitrationEngine, anyhow::Error>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the method `resolve_conflicts` exists on the type `AdvancedArbitrationEngine`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0miterations/v3/council/src/advanced_arbitration.rs:583:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m583\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub async fn resolve_conflicts(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m584\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        &self,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m585\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        conflicting_outputs: Vec<WorkerOutput>,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m586\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ) -> Result<ArbitrationResult> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|__________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider using `Result::expect` to unwrap the `AdvancedArbitrationEngine` value, panicking if the value is a `Result::Err`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m440\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let result2 = engine\u001b[0m\u001b[0m\u001b[38;5;10m.expect(\"REASON\")\u001b[0m\u001b[0m.resolve_conflicts(varied_outputs).await.unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[38;5;10m+++++++++++++++++\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `content_lower`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"iterations/v3/council/src/advanced_arbitration.rs","byte_start":73124,"byte_end":73137,"line_start":2063,"line_end":2063,"column_start":13,"column_end":26,"is_primary":true,"text":[{"text":"        let content_lower = content.to_lowercase();","highlight_start":13,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"iterations/v3/council/src/advanced_arbitration.rs","byte_start":73124,"byte_end":73137,"line_start":2063,"line_end":2063,"column_start":13,"column_end":26,"is_primary":true,"text":[{"text":"        let content_lower = content.to_lowercase();","highlight_start":13,"highlight_end":26}],"label":null,"suggested_replacement":"_content_lower","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `content_lower`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0miterations/v3/council/src/advanced_arbitration.rs:2063:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2063\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let content_lower = content.to_lowercase();\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_content_lower`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `stable_count` is assigned to, but never used","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"iterations/v3/council/src/predictive_quality_assessor.rs","byte_start":15940,"byte_end":15952,"line_start":495,"line_end":495,"column_start":17,"column_end":29,"is_primary":true,"text":[{"text":"        let mut stable_count = 0;","highlight_start":17,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using `_stable_count` instead","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `stable_count` is assigned to, but never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0miterations/v3/council/src/predictive_quality_assessor.rs:495:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m495\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut stable_count = 0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: consider using `_stable_count` instead\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `line_num`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"iterations/v3/council/src/todo_analyzer.rs","byte_start":35414,"byte_end":35422,"line_start":932,"line_end":932,"column_start":9,"column_end":17,"is_primary":true,"text":[{"text":"        line_num: Option<u32>,","highlight_start":9,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"iterations/v3/council/src/todo_analyzer.rs","byte_start":35414,"byte_end":35422,"line_start":932,"line_end":932,"column_start":9,"column_end":17,"is_primary":true,"text":[{"text":"        line_num: Option<u32>,","highlight_start":9,"highlight_end":17}],"label":null,"suggested_replacement":"_line_num","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `line_num`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0miterations/v3/council/src/todo_analyzer.rs:932:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m932\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        line_num: Option<u32>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_line_num`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `language`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"iterations/v3/council/src/todo_analyzer.rs","byte_start":35445,"byte_end":35453,"line_start":933,"line_end":933,"column_start":9,"column_end":17,"is_primary":true,"text":[{"text":"        language: &Option<String>,","highlight_start":9,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"iterations/v3/council/src/todo_analyzer.rs","byte_start":35445,"byte_end":35453,"line_start":933,"line_end":933,"column_start":9,"column_end":17,"is_primary":true,"text":[{"text":"        language: &Option<String>,","highlight_start":9,"highlight_end":17}],"label":null,"suggested_replacement":"_language","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `language`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0miterations/v3/council/src/todo_analyzer.rs:933:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m933\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        language: &Option<String>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_language`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `config`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"iterations/v3/council/src/todo_analyzer.rs","byte_start":36878,"byte_end":36884,"line_start":989,"line_end":989,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        config: &TodoAnalysisConfig,","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"iterations/v3/council/src/todo_analyzer.rs","byte_start":36878,"byte_end":36884,"line_start":989,"line_end":989,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        config: &TodoAnalysisConfig,","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":"_config","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `config`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0miterations/v3/council/src/todo_analyzer.rs:989:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m989\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        config: &TodoAnalysisConfig,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_config`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `engine`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"iterations/v3/council/src/advanced_arbitration_tests.rs","byte_start":2935,"byte_end":2941,"line_start":85,"line_end":85,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"        let engine = AdvancedArbitrationEngine::new();","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"iterations/v3/council/src/advanced_arbitration_tests.rs","byte_start":2935,"byte_end":2941,"line_start":85,"line_end":85,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"        let engine = AdvancedArbitrationEngine::new();","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":"_engine","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `engine`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0miterations/v3/council/src/advanced_arbitration_tests.rs:85:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m85\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let engine = AdvancedArbitrationEngine::new();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_engine`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `testing_system`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"iterations/v3/council/src/intelligent_edge_case_testing_tests.rs","byte_start":10656,"byte_end":10670,"line_start":272,"line_end":272,"column_start":13,"column_end":27,"is_primary":true,"text":[{"text":"        let testing_system = IntelligentEdgeCaseTesting::new();","highlight_start":13,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"iterations/v3/council/src/intelligent_edge_case_testing_tests.rs","byte_start":10656,"byte_end":10670,"line_start":272,"line_end":272,"column_start":13,"column_end":27,"is_primary":true,"text":[{"text":"        let testing_system = IntelligentEdgeCaseTesting::new();","highlight_start":13,"highlight_end":27}],"label":null,"suggested_replacement":"_testing_system","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `testing_system`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0miterations/v3/council/src/intelligent_edge_case_testing_tests.rs:272:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m272\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let testing_system = IntelligentEdgeCaseTesting::new();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_testing_system`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `test_execution`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"iterations/v3/council/src/intelligent_edge_case_testing_tests.rs","byte_start":10721,"byte_end":10735,"line_start":274,"line_end":274,"column_start":13,"column_end":27,"is_primary":true,"text":[{"text":"        let test_execution = TestExecution {","highlight_start":13,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"iterations/v3/council/src/intelligent_edge_case_testing_tests.rs","byte_start":10721,"byte_end":10735,"line_start":274,"line_end":274,"column_start":13,"column_end":27,"is_primary":true,"text":[{"text":"        let test_execution = TestExecution {","highlight_start":13,"highlight_end":27}],"label":null,"suggested_replacement":"_test_execution","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `test_execution`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0miterations/v3/council/src/intelligent_edge_case_testing_tests.rs:274:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m274\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let test_execution = TestExecution {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_test_execution`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `testing_system`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"iterations/v3/council/src/intelligent_edge_case_testing_tests.rs","byte_start":11445,"byte_end":11459,"line_start":295,"line_end":295,"column_start":13,"column_end":27,"is_primary":true,"text":[{"text":"        let testing_system = IntelligentEdgeCaseTesting::new();","highlight_start":13,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"iterations/v3/council/src/intelligent_edge_case_testing_tests.rs","byte_start":11445,"byte_end":11459,"line_start":295,"line_end":295,"column_start":13,"column_end":27,"is_primary":true,"text":[{"text":"        let testing_system = IntelligentEdgeCaseTesting::new();","highlight_start":13,"highlight_end":27}],"label":null,"suggested_replacement":"_testing_system","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `testing_system`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0miterations/v3/council/src/intelligent_edge_case_testing_tests.rs:295:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m295\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let testing_system = IntelligentEdgeCaseTesting::new();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_testing_system`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `test_execution`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"iterations/v3/council/src/intelligent_edge_case_testing_tests.rs","byte_start":11763,"byte_end":11777,"line_start":306,"line_end":306,"column_start":17,"column_end":31,"is_primary":true,"text":[{"text":"            let test_execution = TestExecution {","highlight_start":17,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"iterations/v3/council/src/intelligent_edge_case_testing_tests.rs","byte_start":11763,"byte_end":11777,"line_start":306,"line_end":306,"column_start":17,"column_end":31,"is_primary":true,"text":[{"text":"            let test_execution = TestExecution {","highlight_start":17,"highlight_end":31}],"label":null,"suggested_replacement":"_test_execution","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `test_execution`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0miterations/v3/council/src/intelligent_edge_case_testing_tests.rs:306:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m306\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let test_execution = TestExecution {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_test_execution`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `testing_system`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"iterations/v3/council/src/intelligent_edge_case_testing_tests.rs","byte_start":14749,"byte_end":14763,"line_start":386,"line_end":386,"column_start":13,"column_end":27,"is_primary":true,"text":[{"text":"        let testing_system = IntelligentEdgeCaseTesting::new();","highlight_start":13,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"iterations/v3/council/src/intelligent_edge_case_testing_tests.rs","byte_start":14749,"byte_end":14763,"line_start":386,"line_end":386,"column_start":13,"column_end":27,"is_primary":true,"text":[{"text":"        let testing_system = IntelligentEdgeCaseTesting::new();","highlight_start":13,"highlight_end":27}],"label":null,"suggested_replacement":"_testing_system","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `testing_system`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0miterations/v3/council/src/intelligent_edge_case_testing_tests.rs:386:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m386\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let testing_system = IntelligentEdgeCaseTesting::new();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_testing_system`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `execution`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"iterations/v3/council/src/intelligent_edge_case_testing_tests.rs","byte_start":16366,"byte_end":16375,"line_start":431,"line_end":431,"column_start":13,"column_end":22,"is_primary":true,"text":[{"text":"        for execution in test_executions {","highlight_start":13,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"iterations/v3/council/src/intelligent_edge_case_testing_tests.rs","byte_start":16366,"byte_end":16375,"line_start":431,"line_end":431,"column_start":13,"column_end":22,"is_primary":true,"text":[{"text":"        for execution in test_executions {","highlight_start":13,"highlight_end":22}],"label":null,"suggested_replacement":"_execution","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `execution`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0miterations/v3/council/src/intelligent_edge_case_testing_tests.rs:431:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m431\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        for execution in test_executions {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_execution`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 7 previous errors; 19 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 7 previous errors; 19 warnings emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0599`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0599`.\u001b[0m\n"}
