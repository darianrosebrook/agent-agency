id: AGENT-0004
title: "Implement hysteresis and no-progress guards in SatisficingEvaluator"
risk_tier: 2
mode: feature
change_budget:
  max_files: 8
  max_loc: 400
blast_radius:
  modules: ["self-prompting-agent", "evaluation"]
  data_migration: false
operational_rollback_slo: "2m"
scope:
  in:
    - "iterations/v3/self-prompting-agent/src/evaluation/satisficing.rs"
    - "iterations/v3/self-prompting-agent/src/types.rs"  # Add NoProgress StopReason
    - "iterations/v3/self-prompting-agent/src/loop_controller.rs"  # Integrate no-progress detection
  out:
    - "iterations/v3/orchestration/"
    - "iterations/v3/database/"
    - "iterations/v3/interfaces/"
    - "iterations/v3/council/"
invariants:
  - "Hysteresis prevents continue/stop flapping"
  - "No-progress detection stops on ineffective iterations"
  - "Sliding window analysis prevents premature plateau detection"
  - "Action request repetition detection catches loops"
  - "Zero-LOC diffs trigger immediate stop"
acceptance:
  - id: "A1"
    given: "Sliding window of N scores with K consecutive sub-threshold improvements"
    when: "plateau detection runs"
    then: "requires hysteresis before declaring plateau"
  - id: "A2"
    given: "Changeset with zero net LOC change"
    when: "no-progress guard evaluates"
    then: "stops iteration with NoProgress reason"
  - id: "A3"
    given: "Same ActionRequest generated K times consecutively"
    when: "repetition guard evaluates"
    then: "stops iteration with NoProgress reason"
  - id: "A4"
    given: "Continue/stop decisions oscillating"
    when: "hysteresis applied"
    then: "maintains stable decision until clear trend emerges"
  - id: "A5"
    given: "SatisficingEvaluator with hysteresis enabled"
    when: "evaluated over multiple iterations"
    then: "shows reduced decision volatility"
contracts:
  - type: "rust-api"
    path: "iterations/v3/self-prompting-agent/src/evaluation/satisficing.rs"
    endpoints:
      - "SatisficingEvaluator::should_continue()"
      - "SatisficingEvaluator::check_no_progress()"
      - "SatisficingEvaluator::check_action_repetition()"
    schemas:
      - name: "SatisficingConfig"
        fields: ["hysteresis_window: usize", "consecutive_threshold: usize", "no_progress_loc_threshold: usize"]
      - name: "StopReason"
        fields: ["NoProgress", "Satisficed", "MaxIterations", "QualityCeiling", "FailedGates", "Timeout", "Error", "Unknown"]
non_functional:
  perf:
    hysteresis_evaluation_ms: 5
    no_progress_check_ms: 2
  security:
    - "no-arbitrary-decision-injection"
    - "bounded-iteration-prevention"
  reliability:
    - "stable-decision-making"
    - "loop-prevention"