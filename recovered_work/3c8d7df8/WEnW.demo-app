# Agent Agency V3 - Demo Application
FROM rust:1.75-slim as builder

# Install system dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    ca-certificates \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create app user
ENV USER=demo-app
ENV UID=10005

RUN adduser \
    --disabled-password \
    --gecos "" \
    --home "/nonexistent" \
    --shell "/sbin/nologin" \
    --no-create-home \
    --uid "${UID}" \
    "${USER}"

WORKDIR /app

# Copy workspace configuration
COPY Cargo.toml Cargo.lock ./

# Copy all crates
COPY demo_app ./demo_app
COPY runtime-optimization ./runtime-optimization
COPY tool-ecosystem ./tool-ecosystem
COPY federated-learning ./federated-learning
COPY model-hotswap ./model-hotswap
COPY agent-agency-apple-silicon ./agent-agency-apple-silicon
COPY agent-agency-mcp ./agent-agency-mcp
COPY agent-agency-observability ./agent-agency-observability

# Build the demo application
RUN cargo build --release --package demo_app

# Runtime stage
FROM debian:bookworm-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    libssl3 \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Import from builder
COPY --from=builder /etc/passwd /etc/passwd
COPY --from=builder /etc/group /etc/group

WORKDIR /app

# Copy the compiled binary
COPY --from=builder /app/target/release/demo_app /app/demo_app

# Copy demo configuration
COPY demo_app/config ./config

# Use an unprivileged user
USER demo-app:demo-app

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# Expose port
EXPOSE 3000

# Run the demo application
CMD ["/app/demo_app"]
