name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
          - beta

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust ${{ matrix.rust }}
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev pkg-config

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy -- -D warnings

    - name: Build workspace
      run: cargo build --workspace --verbose

    - name: Run unit tests
      run: cargo test --workspace --verbose --lib

    - name: Run integration tests
      run: cargo test --workspace --verbose --test '*'

    - name: Run demo app tests
      run: |
        cd demo_app
        cargo test --verbose

    - name: Generate coverage report
      if: matrix.rust == 'stable'
      uses: actions-rs/tarpaulin@v0.1
      with:
        version: '0.20.1'
        args: '--workspace --exclude-files demo_app --exclude-files validate_implementations.rs --out Xml'

    - name: Upload coverage to Codecov
      if: matrix.rust == 'stable'
      uses: codecov/codecov-action@v3
      with:
        file: cobertura.xml

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  docs:
    name: Documentation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Build documentation
      run: cargo doc --workspace --no-deps

    - name: Deploy documentation
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc
        cname: docs.agent-agency.dev

  docker:
    name: Docker Build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push runtime-optimization
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.runtime-optimization
        push: true
        tags: agentagency/runtime-optimization:latest,agentagency/runtime-optimization:v3.0.0
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push tool-ecosystem
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.tool-ecosystem
        push: true
        tags: agentagency/tool-ecosystem:latest,agentagency/tool-ecosystem:v3.0.0
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push federated-learning
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.federated-learning
        push: true
        tags: agentagency/federated-learning:latest,agentagency/federated-learning:v3.0.0
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push model-hotswap
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.model-hotswap
        push: true
        tags: agentagency/model-hotswap:latest,agentagency/model-hotswap:v3.0.0
        cache-from: type=gha
        cache-to: type=gha,mode=max

  performance-test:
    name: Performance Benchmarking
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install cargo-criterion
      run: cargo install cargo-criterion

    - name: Run performance benchmarks
      run: cargo criterion --message-format=json > benchmark_results.json

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark_results.json

    - name: Compare benchmarks
      if: github.event.before != '0000000000000000000000000000000000000000'
      run: |
        echo "Benchmark comparison would be implemented here"
        echo "Comparing against baseline performance metrics"
