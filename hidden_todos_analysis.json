{
  "summary": {
    "total_files": 232926,
    "non_ignored_files": 4402,
    "ignored_files": 228524,
    "language_counts": {
      "rust": 1,
      "javascript": 10,
      "typescript": 325,
      "python": 26,
      "shell": 9,
      "yaml": 42,
      "json": 3934,
      "markdown": 55
    },
    "files_with_hidden_todos": 28,
    "total_hidden_todos": 97,
    "high_confidence_todos": 87,
    "medium_confidence_todos": 10,
    "low_confidence_todos": 0,
    "code_stub_todos": 1,
    "pattern_counts": {
      "\\bTODO\\b.*?:": 50,
      "\\bwill\\s+be\\b.*?(implemented|added|fixed)": 1,
      "\\bin\\s+a\\s+real\\s+implementation\\b": 31,
      "\\bplaceholder\\s+implementation\\b": 1,
      "\\bnot\\s+yet\\s+implemented\\b": 2,
      "\\bcould\\s+be\\b.*?(implemented|added|fixed)": 1,
      "\\bto\\s+be\\s+implemented\\b": 6,
      "\\bwould\\s+be\\b.*?(implemented|added|fixed)": 4,
      "python_pass_stub": 1
    },
    "min_confidence_threshold": 0.6
  },
  "files": {
    "playground/broken-rust.rs": {
      "file_path": "playground/broken-rust.rs",
      "language": "rust",
      "total_comments": 20,
      "hidden_todos": {
        "55": {
          "comment": "TODO: Implement proper error handling for API calls",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        }
      },
      "all_comments": [
        {
          "line": 1,
          "comment": "Intentionally broken Rust file for arbiter testing"
        },
        {
          "line": 2,
          "comment": "This file contains multiple compilation errors that the arbiter should fix"
        },
        {
          "line": 6,
          "comment": "Missing trait derives"
        },
        {
          "line": 15,
          "comment": "Duplicate struct definition (should be removed)"
        },
        {
          "line": 24,
          "comment": "Type mismatch - should be u32, not String"
        },
        {
          "line": 27,
          "comment": "Missing import"
        },
        {
          "line": 30,
          "comment": "Unused variable"
        },
        {
          "line": 33,
          "comment": "Function with wrong return type"
        },
        {
          "line": 38,
          "comment": "Missing error handling"
        },
        {
          "line": 44,
          "comment": "Inconsistent naming convention"
        },
        {
          "line": 48,
          "comment": "Missing type annotation"
        },
        {
          "line": 54,
          "comment": "TODO comment that should be addressed"
        },
        {
          "line": 55,
          "comment": "TODO: Implement proper error handling for API calls"
        },
        {
          "line": 57,
          "comment": "PLACEHOLDER: This is a placeholder that needs implementation"
        },
        {
          "line": 59,
          "comment": "PLACEHOLDER: Add actual implementation"
        },
        {
          "line": 63,
          "comment": "MOCK DATA: This should be replaced with real data"
        },
        {
          "line": 79,
          "comment": "Missing trait implementation"
        },
        {
          "line": 91,
          "comment": "Missing Display trait for custom error"
        },
        {
          "line": 99,
          "comment": "Missing field in struct"
        },
        {
          "line": 104,
          "comment": "Missing: pub created_at: Option<chrono::DateTime<chrono::Utc>>,"
        }
      ]
    },
    "src/orchestrator/task-worker.js": {
      "file_path": "src/orchestrator/task-worker.js",
      "language": "javascript",
      "total_comments": 26,
      "hidden_todos": {
        "41": {
          "comment": "Simple mock sandbox for now - workers will be fixed in proper implementation",
          "matches": {
            "future_improvements": [
              "\\bwill\\s+be\\b.*?(implemented|added|fixed)"
            ]
          },
          "confidence_score": 0.9,
          "confidence_breakdown": [
            [
              "future_improvements",
              0.9
            ]
          ],
          "context_score": 0.0
        }
      },
      "all_comments": [
        {
          "line": 7,
          "comment": "* * Task Worker - ARBITER-014 * * Worker thread implementation for isolated task execution. * * @author @darianrosebrook"
        },
        {
          "line": 11,
          "comment": "Import will be handled dynamically since we can't import TS directly in JS worker"
        },
        {
          "line": 12,
          "comment": "const { ArtifactSandbox } = require(\"./workers/ArtifactSandbox.js\");"
        },
        {
          "line": 29,
          "comment": "Task execution functions"
        },
        {
          "line": 41,
          "comment": "Simple mock sandbox for now - workers will be fixed in proper implementation"
        },
        {
          "line": 54,
          "comment": "Create isolated context"
        },
        {
          "line": 76,
          "comment": "Execute code with timeout"
        },
        {
          "line": 78,
          "comment": "Use Function constructor for isolated execution"
        },
        {
          "line": 85,
          "comment": "Execute the user code directly"
        },
        {
          "line": 88,
          "comment": "Update context result"
        },
        {
          "line": 150,
          "comment": "Basic HTTP client (in real implementation, use axios or fetch)"
        },
        {
          "line": 326,
          "comment": "Placeholder for AI inference - in real implementation,"
        },
        {
          "line": 327,
          "comment": "this would integrate with actual AI services"
        },
        {
          "line": 330,
          "comment": "Simulate AI processing time"
        },
        {
          "line": 374,
          "comment": "Import required modules"
        },
        {
          "line": 381,
          "comment": "Set project root (default to current working directory)"
        },
        {
          "line": 384,
          "comment": "Create file editing context"
        },
        {
          "line": 395,
          "comment": "File editing tools"
        },
        {
          "line": 437,
          "comment": "Basic security checks"
        },
        {
          "line": 453,
          "comment": "Run in background"
        },
        {
          "line": 457,
          "comment": "Run synchronously"
        },
        {
          "line": 469,
          "comment": "Execute operations"
        },
        {
          "line": 558,
          "comment": "Message handling"
        },
        {
          "line": 621,
          "comment": "Send ready signal"
        },
        {
          "line": 624,
          "comment": "Periodic metrics reporting"
        },
        {
          "line": 644,
          "comment": "Graceful shutdown"
        }
      ]
    },
    "playground/broken-types.ts": {
      "file_path": "playground/broken-types.ts",
      "language": "typescript",
      "total_comments": 16,
      "hidden_todos": {
        "51": {
          "comment": "TODO: Implement proper error handling for API calls",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        }
      },
      "all_comments": [
        {
          "line": 1,
          "comment": "Intentionally broken TypeScript file for arbiter testing"
        },
        {
          "line": 2,
          "comment": "This file contains multiple compilation errors that the arbiter should fix"
        },
        {
          "line": 8,
          "comment": "Missing required field: createdAt"
        },
        {
          "line": 11,
          "comment": "Duplicate interface definition (should be removed)"
        },
        {
          "line": 19,
          "comment": "Type mismatch - should be number, not string"
        },
        {
          "line": 22,
          "comment": "Missing import"
        },
        {
          "line": 25,
          "comment": "Unused variable"
        },
        {
          "line": 28,
          "comment": "Function with wrong return type"
        },
        {
          "line": 33,
          "comment": "Missing error handling"
        },
        {
          "line": 39,
          "comment": "Inconsistent naming convention"
        },
        {
          "line": 43,
          "comment": "Missing type annotation"
        },
        {
          "line": 50,
          "comment": "TODO comment that should be addressed"
        },
        {
          "line": 51,
          "comment": "TODO: Implement proper error handling for API calls"
        },
        {
          "line": 53,
          "comment": "PLACEHOLDER: This is a placeholder that needs implementation"
        },
        {
          "line": 55,
          "comment": "PLACEHOLDER: Add actual implementation"
        },
        {
          "line": 58,
          "comment": "MOCK DATA: This should be replaced with real data"
        }
      ]
    },
    "src/coordinator/FailureManager.ts": {
      "file_path": "src/coordinator/FailureManager.ts",
      "language": "typescript",
      "total_comments": 95,
      "hidden_todos": {
        "446": {
          "comment": "In a real implementation, this would integrate with:",
          "matches": {
            "future_improvements": [
              "\\bin\\s+a\\s+real\\s+implementation\\b"
            ]
          },
          "confidence_score": 0.9,
          "confidence_breakdown": [
            [
              "future_improvements",
              0.9
            ]
          ],
          "context_score": 0.0
        },
        "457": {
          "comment": "TODO: Implement real incident management system integration",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        },
        "491": {
          "comment": "In a real implementation, this would integrate with:",
          "matches": {
            "future_improvements": [
              "\\bin\\s+a\\s+real\\s+implementation\\b"
            ]
          },
          "confidence_score": 0.9,
          "confidence_breakdown": [
            [
              "future_improvements",
              0.9
            ]
          ],
          "context_score": 0.0
        },
        "502": {
          "comment": "TODO: Implement real notification system integration",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        },
        "536": {
          "comment": "In a real implementation, this would integrate with:",
          "matches": {
            "future_improvements": [
              "\\bin\\s+a\\s+real\\s+implementation\\b"
            ]
          },
          "confidence_score": 0.9,
          "confidence_breakdown": [
            [
              "future_improvements",
              0.9
            ]
          ],
          "context_score": 0.0
        },
        "547": {
          "comment": "TODO: Implement real monitoring system integration",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        },
        "593": {
          "comment": "In a real implementation, this would integrate with:",
          "matches": {
            "future_improvements": [
              "\\bin\\s+a\\s+real\\s+implementation\\b"
            ]
          },
          "confidence_score": 0.9,
          "confidence_breakdown": [
            [
              "future_improvements",
              0.9
            ]
          ],
          "context_score": 0.0
        },
        "602": {
          "comment": "TODO: Implement real incident management logging",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        },
        "618": {
          "comment": "TODO: Track recovery attempts and escalation status in FailureEvent",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        },
        "790": {
          "comment": "* * Send alert to specified target * In a real implementation, this integrates with notification systems",
          "matches": {
            "future_improvements": [
              "\\bin\\s+a\\s+real\\s+implementation\\b"
            ]
          },
          "confidence_score": 0.9,
          "confidence_breakdown": [
            [
              "future_improvements",
              0.9
            ]
          ],
          "context_score": 0.0
        }
      },
      "all_comments": [
        {
          "line": 8,
          "comment": "* * Failure Manager * * Detects component failures and orchestrates recovery procedures. * Implements automatic failover and escalation workflows. * * @author @darianrosebrook"
        },
        {
          "line": 38,
          "comment": "Initialize adapters with default configurations"
        },
        {
          "line": 79,
          "comment": "* * Handle component failure"
        },
        {
          "line": 93,
          "comment": "Record failure"
        },
        {
          "line": 98,
          "comment": "Check failure threshold for recovery initiation"
        },
        {
          "line": 114,
          "comment": "* * Initiate recovery process for failed component"
        },
        {
          "line": 133,
          "comment": "Set timeout for recovery"
        },
        {
          "line": 182,
          "comment": "Escalate to human intervention"
        },
        {
          "line": 185,
          "comment": "Clean up recovery after delay"
        },
        {
          "line": 194,
          "comment": "* * Determine appropriate recovery actions based on failure type"
        },
        {
          "line": 219,
          "comment": "Also try restart as fallback"
        },
        {
          "line": 279,
          "comment": "* * Execute recovery actions in sequence"
        },
        {
          "line": 291,
          "comment": "Log but continue with other actions"
        },
        {
          "line": 299,
          "comment": "Check if any action succeeded"
        },
        {
          "line": 308,
          "comment": "* * Execute individual recovery action"
        },
        {
          "line": 338,
          "comment": "* * Handle recovery timeout"
        },
        {
          "line": 351,
          "comment": "Escalate timeout as well"
        },
        {
          "line": 361,
          "comment": "* * Escalate failure to human intervention"
        },
        {
          "line": 367,
          "comment": "Create incident ticket in external system"
        },
        {
          "line": 373,
          "comment": "Notify on-call engineers"
        },
        {
          "line": 376,
          "comment": "Send diagnostics to monitoring system"
        },
        {
          "line": 407,
          "comment": "Fallback to basic logging if escalation fails"
        },
        {
          "line": 426,
          "comment": "Emit escalation event for external monitoring"
        },
        {
          "line": 438,
          "comment": "* * Create incident ticket in external ticketing system"
        },
        {
          "line": 443,
          "comment": "Generate unique incident ID"
        },
        {
          "line": 446,
          "comment": "In a real implementation, this would integrate with:"
        },
        {
          "line": 447,
          "comment": "- ServiceNow"
        },
        {
          "line": 448,
          "comment": "- Jira Service Management"
        },
        {
          "line": 449,
          "comment": "- Zendesk"
        },
        {
          "line": 450,
          "comment": "- PagerDuty incidents"
        },
        {
          "line": 452,
          "comment": "For now, simulate incident creation"
        },
        {
          "line": 457,
          "comment": "TODO: Implement real incident management system integration"
        },
        {
          "line": 458,
          "comment": "Example:"
        },
        {
          "line": 459,
          "comment": "const ticket = await this.incidentManagementSystem.createTicket({"
        },
        {
          "line": 460,
          "comment": "title: `Critical failure: ${failure.componentId}`,"
        },
        {
          "line": 461,
          "comment": "description: `Component ${failure.componentId} failed and recovery unsuccessful`,"
        },
        {
          "line": 462,
          "comment": "severity: \"critical\","
        },
        {
          "line": 463,
          "comment": "tags: [\"arbiter\", \"failure\", failure.failureType],"
        },
        {
          "line": 464,
          "comment": "metadata: {"
        },
        {
          "line": 465,
          "comment": "componentId: failure.componentId,"
        },
        {
          "line": 466,
          "comment": "failureType: failure.failureType,"
        },
        {
          "line": 467,
          "comment": "recoveryAttempts: failure.recoveryAttempts,"
        },
        {
          "line": 468,
          "comment": "recoveryError: recoveryError instanceof Error ? recoveryError.message : recoveryError,"
        },
        {
          "line": 469,
          "comment": "}"
        },
        {
          "line": 470,
          "comment": "});"
        },
        {
          "line": 477,
          "comment": "* * Notify on-call engineers via communication channels"
        },
        {
          "line": 491,
          "comment": "In a real implementation, this would integrate with:"
        },
        {
          "line": 492,
          "comment": "- Slack"
        },
        {
          "line": 493,
          "comment": "- Microsoft Teams"
        },
        {
          "line": 494,
          "comment": "- PagerDuty"
        },
        {
          "line": 495,
          "comment": "- Email"
        },
        {
          "line": 496,
          "comment": "- SMS"
        },
        {
          "line": 502,
          "comment": "TODO: Implement real notification system integration"
        },
        {
          "line": 503,
          "comment": "Example:"
        },
        {
          "line": 504,
          "comment": "await Promise.all(["
        },
        {
          "line": 505,
          "comment": "this.slackNotifier.notify(\"#ops-critical\", notification),"
        },
        {
          "line": 506,
          "comment": "this.pagerdutyNotifier.triggerIncident(notification),"
        },
        {
          "line": 507,
          "comment": "this.emailNotifier.notifyOnCallEngineers(notification),"
        },
        {
          "line": 508,
          "comment": "]);"
        },
        {
          "line": 513,
          "comment": "* * Send detailed diagnostics to monitoring system"
        },
        {
          "line": 536,
          "comment": "In a real implementation, this would integrate with:"
        },
        {
          "line": 537,
          "comment": "- DataDog"
        },
        {
          "line": 538,
          "comment": "- New Relic"
        },
        {
          "line": 539,
          "comment": "- Grafana"
        },
        {
          "line": 540,
          "comment": "- ELK Stack"
        },
        {
          "line": 541,
          "comment": "- Prometheus"
        },
        {
          "line": 547,
          "comment": "TODO: Implement real monitoring system integration"
        },
        {
          "line": 548,
          "comment": "Example:"
        },
        {
          "line": 549,
          "comment": "await this.monitoringSystem.sendEvent(\"arbiter.failure.escalated\", diagnostics);"
        },
        {
          "line": 550,
          "comment": "await this.monitoringSystem.updateDashboard(\"arbiter-health\", diagnostics);"
        },
        {
          "line": 555,
          "comment": "* * Log to central incident management system"
        },
        {
          "line": 593,
          "comment": "In a real implementation, this would integrate with:"
        },
        {
          "line": 594,
          "comment": "- Centralized logging systems (ELK, Splunk)"
        },
        {
          "line": 595,
          "comment": "- Incident management databases"
        },
        {
          "line": 596,
          "comment": "- Audit systems"
        },
        {
          "line": 602,
          "comment": "TODO: Implement real incident management logging"
        },
        {
          "line": 603,
          "comment": "Example:"
        },
        {
          "line": 604,
          "comment": "await this.incidentLogger.logIncident(incidentLog);"
        },
        {
          "line": 605,
          "comment": "await this.auditLogger.logSecurityEvent(\"incident.escalated\", incidentLog);"
        },
        {
          "line": 610,
          "comment": "* * Calculate recovery success rate for diagnostics"
        },
        {
          "line": 618,
          "comment": "TODO: Track recovery attempts and escalation status in FailureEvent"
        },
        {
          "line": 619,
          "comment": "For now, assume 80% success rate"
        },
        {
          "line": 627,
          "comment": "* * Get recent failures for component"
        },
        {
          "line": 640,
          "comment": "* * Get failure statistics"
        },
        {
          "line": 680,
          "comment": "* * Classify failure based on error characteristics"
        },
        {
          "line": 723,
          "comment": "* * Restart a failed component * Uses the infrastructure controller for real infrastructure management"
        },
        {
          "line": 742,
          "comment": "* * Switch over to backup component instance * Uses the infrastructure controller for real failover management"
        },
        {
          "line": 764,
          "comment": "* * Scale up component by provisioning additional instances * Uses the infrastructure controller for real auto-scaling"
        },
        {
          "line": 790,
          "comment": "* * Send alert to specified target * In a real implementation, this integrates with notification systems"
        },
        {
          "line": 795,
          "comment": "Format alert message"
        },
        {
          "line": 800,
          "comment": "Determine notification channel based on target"
        },
        {
          "line": 807,
          "comment": "Send to notification system"
        },
        {
          "line": 820,
          "comment": "* * Isolate a component to prevent further damage * Uses the infrastructure controller for real component isolation"
        },
        {
          "line": 836,
          "comment": "Legacy methods - now handled by adapters"
        },
        {
          "line": 837,
          "comment": "These methods are kept for backward compatibility but delegate to the new adapters"
        }
      ]
    },
    "src/embeddings/HealthCheck.ts": {
      "file_path": "src/embeddings/HealthCheck.ts",
      "language": "typescript",
      "total_comments": 25,
      "hidden_todos": {
        "314": {
          "comment": "In a real implementation, we'd expose cache stats through the interface",
          "matches": {
            "future_improvements": [
              "\\bin\\s+a\\s+real\\s+implementation\\b"
            ]
          },
          "confidence_score": 0.9,
          "confidence_breakdown": [
            [
              "future_improvements",
              0.9
            ]
          ],
          "context_score": 0.0
        }
      },
      "all_comments": [
        {
          "line": 8,
          "comment": "* * @fileoverview Health Check Endpoints for Embedding Services * * Provides comprehensive health monitoring for embedding infrastructure * including circuit breaker status, rate limiting, and service availability. * * @author @darianrosebrook"
        },
        {
          "line": 74,
          "comment": "* * Health check service for embedding infrastructure"
        },
        {
          "line": 88,
          "comment": "* * Perform comprehensive health check"
        },
        {
          "line": 100,
          "comment": "Determine overall status"
        },
        {
          "line": 114,
          "comment": "* * Perform all health checks"
        },
        {
          "line": 174,
          "comment": "* * Check Ollama service health"
        },
        {
          "line": 200,
          "comment": "Store check result"
        },
        {
          "line": 221,
          "comment": "* * Check circuit breaker health"
        },
        {
          "line": 254,
          "comment": "* * Check rate limiter health"
        },
        {
          "line": 311,
          "comment": "* * Check cache health"
        },
        {
          "line": 313,
          "comment": "Access private cache size (this is a limitation of the current design)"
        },
        {
          "line": 314,
          "comment": "In a real implementation, we'd expose cache stats through the interface"
        },
        {
          "line": 334,
          "comment": "* * Check memory health"
        },
        {
          "line": 359,
          "comment": "* * Extract result from PromiseSettledResult"
        },
        {
          "line": 370,
          "comment": "* * Determine overall health status"
        },
        {
          "line": 374,
          "comment": "Critical failures"
        },
        {
          "line": 382,
          "comment": "Warning conditions"
        },
        {
          "line": 391,
          "comment": "All good"
        },
        {
          "line": 397,
          "comment": "* * Get recent Ollama health history"
        },
        {
          "line": 404,
          "comment": "* * Reset health check state"
        },
        {
          "line": 413,
          "comment": "* * HTTP handlers for health check endpoints"
        },
        {
          "line": 423,
          "comment": "* * Basic health check for load balancers"
        },
        {
          "line": 456,
          "comment": "* * Detailed health check for monitoring systems"
        },
        {
          "line": 486,
          "comment": "* * Readiness check for Kubernetes"
        },
        {
          "line": 493,
          "comment": "Quick check - just verify service is initialized"
        }
      ]
    },
    "src/config/ConfigManager.ts": {
      "file_path": "src/config/ConfigManager.ts",
      "language": "typescript",
      "total_comments": 24,
      "hidden_todos": {
        "216": {
          "comment": "TODO: Implement proper access control logic",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        }
      },
      "all_comments": [
        {
          "line": 8,
          "comment": "* * Configuration Manager * * Provides centralized configuration management for all ARBITER components. * Environment-aware with validation and type safety. * * @author @darianrosebrook"
        },
        {
          "line": 12,
          "comment": "Base configuration schemas"
        },
        {
          "line": 91,
          "comment": "* * Configuration manager singleton"
        },
        {
          "line": 109,
          "comment": "* * Get configuration value by path"
        },
        {
          "line": 127,
          "comment": "* * Set configuration value by path"
        },
        {
          "line": 145,
          "comment": "* * Get all configuration"
        },
        {
          "line": 152,
          "comment": "* * Reload configuration from environment"
        },
        {
          "line": 159,
          "comment": "* * Validate configuration"
        },
        {
          "line": 179,
          "comment": "* * Initialize the configuration manager"
        },
        {
          "line": 181,
          "comment": "Already initialized in constructor"
        },
        {
          "line": 187,
          "comment": "* * Shutdown the configuration manager"
        },
        {
          "line": 189,
          "comment": "No resources to clean up"
        },
        {
          "line": 195,
          "comment": "* * Load configuration (alias for reload)"
        },
        {
          "line": 207,
          "comment": "* * Get configuration (alias for getAll)"
        },
        {
          "line": 214,
          "comment": "* * Check if user has access to a configuration section"
        },
        {
          "line": 216,
          "comment": "TODO: Implement proper access control logic"
        },
        {
          "line": 217,
          "comment": "For now, allow all access"
        },
        {
          "line": 223,
          "comment": "* * Get a specific configuration section with access control"
        },
        {
          "line": 228,
          "comment": "Check access control if user is provided"
        },
        {
          "line": 239,
          "comment": "* * Update configuration"
        },
        {
          "line": 247,
          "comment": "Load from environment variables with defaults"
        },
        {
          "line": 390,
          "comment": "Validate configuration"
        },
        {
          "line": 394,
          "comment": "Continue with defaults for invalid values"
        },
        {
          "line": 399,
          "comment": "Export singleton instance"
        }
      ]
    },
    "src/workspace/WorkspaceStateManager.ts": {
      "file_path": "src/workspace/WorkspaceStateManager.ts",
      "language": "typescript",
      "total_comments": 85,
      "hidden_todos": {
        "81": {
          "comment": "In a real implementation, this would be passed in or configured properly",
          "matches": {
            "future_improvements": [
              "\\bin\\s+a\\s+real\\s+implementation\\b"
            ]
          },
          "confidence_score": 0.9,
          "confidence_breakdown": [
            [
              "future_improvements",
              0.9
            ]
          ],
          "context_score": 0.0
        },
        "394": {
          "comment": "For now, return empty array as this is a placeholder implementation",
          "matches": {
            "placeholder_code": [
              "\\bplaceholder\\s+implementation\\b"
            ]
          },
          "confidence_score": 0.9,
          "confidence_breakdown": [
            [
              "placeholder_code",
              0.9
            ]
          ],
          "context_score": 0.0
        },
        "404": {
          "comment": "This is a placeholder - in a real implementation, we'd:",
          "matches": {
            "future_improvements": [
              "\\bin\\s+a\\s+real\\s+implementation\\b"
            ]
          },
          "confidence_score": 0.86,
          "confidence_breakdown": [
            [
              "future_improvements",
              0.86
            ]
          ],
          "context_score": -0.2
        }
      },
      "all_comments": [
        {
          "line": 8,
          "comment": "* * Workspace State Manager - Main orchestrator for workspace state management * * Coordinates file watching, state snapshots, context management, and persistence. * Provides unified interface for workspace awareness and agent context provision. * * @author @darianrosebrook"
        },
        {
          "line": 47,
          "comment": "Create file-based persistence if enabled and no custom persistence provided"
        },
        {
          "line": 60,
          "comment": "Initialize components"
        },
        {
          "line": 71,
          "comment": "Initialize semantic search components if enabled"
        },
        {
          "line": 79,
          "comment": "Initialize database client for embedding storage"
        },
        {
          "line": 80,
          "comment": "Note: This assumes KnowledgeDatabaseClient can be instantiated with default config"
        },
        {
          "line": 81,
          "comment": "In a real implementation, this would be passed in or configured properly"
        },
        {
          "line": 85,
          "comment": "Initialize metrics"
        },
        {
          "line": 116,
          "comment": "* * Initialize the workspace state manager"
        },
        {
          "line": 123,
          "comment": "Start file watcher"
        },
        {
          "line": 126,
          "comment": "Try to restore state from persistence"
        },
        {
          "line": 130,
          "comment": "Create initial snapshot"
        },
        {
          "line": 145,
          "comment": "* * Shutdown the workspace state manager"
        },
        {
          "line": 152,
          "comment": "Clear metrics timer"
        },
        {
          "line": 158,
          "comment": "Clear embedding debounce timer"
        },
        {
          "line": 164,
          "comment": "Persist current state if enabled"
        },
        {
          "line": 169,
          "comment": "Stop file watcher"
        },
        {
          "line": 172,
          "comment": "Shutdown embedding service"
        },
        {
          "line": 188,
          "comment": "* * Get current workspace snapshot"
        },
        {
          "line": 196,
          "comment": "* * Generate context for an agent"
        },
        {
          "line": 218,
          "comment": "Update metrics"
        },
        {
          "line": 239,
          "comment": "* * Generate code-specific context"
        },
        {
          "line": 264,
          "comment": "* * Generate documentation context"
        },
        {
          "line": 285,
          "comment": "* * Generate configuration context"
        },
        {
          "line": 299,
          "comment": "* * Get workspace metrics"
        },
        {
          "line": 314,
          "comment": "Memory metrics"
        },
        {
          "line": 327,
          "comment": "* * Manually trigger snapshot creation"
        },
        {
          "line": 336,
          "comment": "For now, create a new snapshot with current state"
        },
        {
          "line": 337,
          "comment": "In a full implementation, this would scan the filesystem"
        },
        {
          "line": 344,
          "comment": "* * Get list of all snapshots"
        },
        {
          "line": 352,
          "comment": "* * Get snapshot by ID"
        },
        {
          "line": 360,
          "comment": "* * Prune old snapshots"
        },
        {
          "line": 368,
          "comment": "* * Update context criteria"
        },
        {
          "line": 377,
          "comment": "* * Get currently watched files"
        },
        {
          "line": 384,
          "comment": "* * Get recent changes with optional filtering"
        },
        {
          "line": 394,
          "comment": "For now, return empty array as this is a placeholder implementation"
        },
        {
          "line": 395,
          "comment": "In a full implementation, this would query the file watcher's change history"
        },
        {
          "line": 396,
          "comment": "and filter based on the provided options"
        },
        {
          "line": 404,
          "comment": "This is a placeholder - in a real implementation, we'd:"
        },
        {
          "line": 405,
          "comment": "1. Get changes from the file watcher"
        },
        {
          "line": 406,
          "comment": "2. Filter by timestamp (within maxAge)"
        },
        {
          "line": 407,
          "comment": "3. Filter by agentId if provided"
        },
        {
          "line": 408,
          "comment": "4. Limit to maxCount"
        },
        {
          "line": 409,
          "comment": "5. Return the filtered results"
        },
        {
          "line": 416,
          "comment": "* * Force change detection for a specific path"
        },
        {
          "line": 423,
          "comment": "* * Setup event handlers"
        },
        {
          "line": 425,
          "comment": "Forward file watcher events"
        },
        {
          "line": 437,
          "comment": "* * Handle file changes from watcher"
        },
        {
          "line": 442,
          "comment": "Create incremental snapshot"
        },
        {
          "line": 449,
          "comment": "Persist if enabled"
        },
        {
          "line": 458,
          "comment": "Handle embedding updates for semantic search"
        },
        {
          "line": 467,
          "comment": "Forward to listeners"
        },
        {
          "line": 473,
          "comment": "* * Handle embedding updates for changed files"
        },
        {
          "line": 479,
          "comment": "Debounce embedding updates to avoid excessive API calls"
        },
        {
          "line": 488,
          "comment": "Filter changes to files we want to embed"
        },
        {
          "line": 497,
          "comment": "Process embedding updates"
        },
        {
          "line": 511,
          "comment": "* * Determine if a file change should trigger embedding generation"
        },
        {
          "line": 513,
          "comment": "Only process added/modified files (not deleted)"
        },
        {
          "line": 518,
          "comment": "Check file extension"
        },
        {
          "line": 543,
          "comment": "* * Update embedding for a single file"
        },
        {
          "line": 550,
          "comment": "Read file content"
        },
        {
          "line": 554,
          "comment": "Prepare text for embedding"
        },
        {
          "line": 560,
          "comment": "Generate embedding"
        },
        {
          "line": 565,
          "comment": "Store in database using existing agent_capabilities_graph table"
        },
        {
          "line": 587,
          "comment": "Log error but don't throw - embedding failures shouldn't break file watching"
        },
        {
          "line": 597,
          "comment": "* * Prepare file text for embedding generation"
        },
        {
          "line": 605,
          "comment": "Add context about file type"
        },
        {
          "line": 608,
          "comment": "Limit content size to avoid token limits"
        },
        {
          "line": 620,
          "comment": "* * Get context string based on file type"
        },
        {
          "line": 645,
          "comment": "* * Create initial workspace snapshot"
        },
        {
          "line": 650,
          "comment": "Persist if enabled"
        },
        {
          "line": 661,
          "comment": "* * Scan workspace for files"
        },
        {
          "line": 663,
          "comment": "This is a simplified implementation"
        },
        {
          "line": 664,
          "comment": "In a real system, you'd use a proper file scanning library"
        },
        {
          "line": 667,
          "comment": "For now, return empty array - in production this would scan the actual filesystem"
        },
        {
          "line": 668,
          "comment": "This is a placeholder to avoid implementing full file scanning in this initial version"
        },
        {
          "line": 675,
          "comment": "* * Restore state from persistence"
        },
        {
          "line": 682,
          "comment": "Restore snapshot to state manager"
        },
        {
          "line": 684,
          "comment": "Note: In a full implementation, we'd need to restore the snapshot map"
        },
        {
          "line": 685,
          "comment": "For now, we'll create a new initial snapshot"
        },
        {
          "line": 701,
          "comment": "* * Persist current state"
        },
        {
          "line": 713,
          "comment": "* * Setup periodic metrics updates"
        },
        {
          "line": 715,
          "comment": "Clear any existing timer first to prevent multiple timers"
        },
        {
          "line": 722,
          "comment": "Update memory metrics"
        },
        {
          "line": 734,
          "comment": "* * Ensure manager is initialized"
        }
      ]
    },
    "src/caws-runtime/WaiverManager.ts": {
      "file_path": "src/caws-runtime/WaiverManager.ts",
      "language": "typescript",
      "total_comments": 26,
      "hidden_todos": {
        "89": {
          "comment": "In a real implementation, notify approvers",
          "matches": {
            "future_improvements": [
              "\\bin\\s+a\\s+real\\s+implementation\\b"
            ]
          },
          "confidence_score": 0.9,
          "confidence_breakdown": [
            [
              "future_improvements",
              0.9
            ]
          ],
          "context_score": 0.0
        }
      },
      "all_comments": [
        {
          "line": 8,
          "comment": "* * Waiver Manager * * Manages temporary exceptions to constitutional policies. * Handles waiver requests, approvals, and expiration. * * @author @darianrosebrook"
        },
        {
          "line": 40,
          "comment": "Initialize notification adapter"
        },
        {
          "line": 48,
          "comment": "Initialize audit logger"
        },
        {
          "line": 56,
          "comment": "* * Request a waiver for policy violations"
        },
        {
          "line": 89,
          "comment": "In a real implementation, notify approvers"
        },
        {
          "line": 97,
          "comment": "* * Approve a waiver request"
        },
        {
          "line": 124,
          "comment": "* * Reject a waiver request"
        },
        {
          "line": 155,
          "comment": "* * Revoke an approved waiver"
        },
        {
          "line": 182,
          "comment": "* * Check if operation has an active waiver"
        },
        {
          "line": 187,
          "comment": "Expire old waivers first"
        },
        {
          "line": 216,
          "comment": "* * Get all waivers with optional status filter"
        },
        {
          "line": 229,
          "comment": "* * Get waiver by ID"
        },
        {
          "line": 236,
          "comment": "* * Get waivers for a specific policy"
        },
        {
          "line": 245,
          "comment": "* * Expire waivers that have passed their expiration date"
        },
        {
          "line": 271,
          "comment": "* * Clean up old waivers (older than specified days)"
        },
        {
          "line": 295,
          "comment": "* * Get waiver statistics"
        },
        {
          "line": 339,
          "comment": "* * Check if operation matches waiver pattern"
        },
        {
          "line": 344,
          "comment": "Simple pattern matching - in production, use regex or more sophisticated matching"
        },
        {
          "line": 361,
          "comment": "* * Notify approvers of waiver request"
        },
        {
          "line": 432,
          "comment": "* * Log waiver action to audit trail"
        },
        {
          "line": 445,
          "comment": "Determine severity based on action"
        },
        {
          "line": 453,
          "comment": "Determine outcome"
        },
        {
          "line": 513,
          "comment": "* * Clear all waivers"
        },
        {
          "line": 521,
          "comment": "* * Health check for notification and audit systems"
        },
        {
          "line": 535,
          "comment": "Check notification adapter health"
        },
        {
          "line": 550,
          "comment": "Check audit logger health"
        }
      ]
    },
    "src/caws-runtime/ViolationHandler.ts": {
      "file_path": "src/caws-runtime/ViolationHandler.ts",
      "language": "typescript",
      "total_comments": 61,
      "hidden_todos": {
        "305": {
          "comment": "In a real implementation, this would block the operation",
          "matches": {
            "future_improvements": [
              "\\bin\\s+a\\s+real\\s+implementation\\b"
            ]
          },
          "confidence_score": 0.9,
          "confidence_breakdown": [
            [
              "future_improvements",
              0.9
            ]
          ],
          "context_score": 0.0
        },
        "714": {
          "comment": "TODO: Implement these interfaces",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        }
      },
      "all_comments": [
        {
          "line": 8,
          "comment": "* * Violation Handler * * Processes constitutional violations and executes appropriate responses. * Handles alerting, blocking, logging, and escalation. * * @author @darianrosebrook"
        },
        {
          "line": 79,
          "comment": "* * Handle multiple violations"
        },
        {
          "line": 96,
          "comment": "Create error response"
        },
        {
          "line": 123,
          "comment": "* * Handle a single violation"
        },
        {
          "line": 132,
          "comment": "Determine actions based on severity and configuration"
        },
        {
          "line": 135,
          "comment": "Execute actions"
        },
        {
          "line": 174,
          "comment": "* * Determine appropriate actions for violation"
        },
        {
          "line": 279,
          "comment": "* * Execute a violation action"
        },
        {
          "line": 305,
          "comment": "In a real implementation, this would block the operation"
        },
        {
          "line": 325,
          "comment": "* * Check if violation requires escalation"
        },
        {
          "line": 330,
          "comment": "Escalate if severity is high/critical or if blocking actions failed"
        },
        {
          "line": 335,
          "comment": "Escalate if blocking actions were attempted but failed"
        },
        {
          "line": 346,
          "comment": "* * Create timeout promise for violation handling"
        },
        {
          "line": 362,
          "comment": "* * Modifies an operation to make it compliant with policy"
        },
        {
          "line": 372,
          "comment": "Apply modifications based on violation principle"
        },
        {
          "line": 375,
          "comment": "Generic sanitization for all violations"
        },
        {
          "line": 378,
          "comment": "Principle-specific modifications"
        },
        {
          "line": 399,
          "comment": "Keep generic sanitization"
        },
        {
          "line": 403,
          "comment": "Log the modification"
        },
        {
          "line": 410,
          "comment": "Emit modification event for monitoring"
        },
        {
          "line": 421,
          "comment": "* * Apply safety-related modifications"
        },
        {
          "line": 425,
          "comment": "Remove potentially dangerous operations"
        },
        {
          "line": 450,
          "comment": "Restrict permissions to safe levels"
        },
        {
          "line": 455,
          "comment": "Sanitize file paths"
        },
        {
          "line": 465,
          "comment": "* * Apply privacy-related modifications"
        },
        {
          "line": 469,
          "comment": "Remove sensitive data fields completely"
        },
        {
          "line": 485,
          "comment": "Sanitize personal data fields (don't delete, just anonymize)"
        },
        {
          "line": 489,
          "comment": "Anonymize personal data in strings"
        },
        {
          "line": 501,
          "comment": "Anonymize personal data in all string values"
        },
        {
          "line": 504,
          "comment": "Remove email addresses"
        },
        {
          "line": 509,
          "comment": "Remove phone numbers"
        },
        {
          "line": 514,
          "comment": "Remove SSN patterns"
        },
        {
          "line": 516,
          "comment": "Remove credit card patterns"
        },
        {
          "line": 524,
          "comment": "Anonymize user identifiers"
        },
        {
          "line": 534,
          "comment": "* * Apply reliability-related modifications"
        },
        {
          "line": 538,
          "comment": "Set minimum timeout if zero or undefined"
        },
        {
          "line": 543,
          "comment": "Limit resource allocations for reliability"
        },
        {
          "line": 556,
          "comment": "Limit retry count"
        },
        {
          "line": 561,
          "comment": "Limit batch size"
        },
        {
          "line": 566,
          "comment": "Ensure retry configuration"
        },
        {
          "line": 576,
          "comment": "* * Sanitize operation payload"
        },
        {
          "line": 579,
          "comment": "If it's a string, sanitize it"
        },
        {
          "line": 592,
          "comment": "Remove potentially dangerous parameters"
        },
        {
          "line": 600,
          "comment": "Recursively sanitize nested objects and arrays"
        },
        {
          "line": 614,
          "comment": "* * Hash a string for anonymization"
        },
        {
          "line": 616,
          "comment": "Simple hash for anonymization (not cryptographically secure)"
        },
        {
          "line": 628,
          "comment": "* * Sanitize file paths to prevent directory traversal"
        },
        {
          "line": 630,
          "comment": "Remove dangerous path components"
        },
        {
          "line": 639,
          "comment": "* * Restrict permissions to safe levels"
        },
        {
          "line": 641,
          "comment": "If permissions object/array, restrict to read-only"
        },
        {
          "line": 650,
          "comment": "If it's a string, restrict to readonly"
        },
        {
          "line": 660,
          "comment": "* * Sanitize string values"
        },
        {
          "line": 668,
          "comment": "XSS prevention"
        },
        {
          "line": 672,
          "comment": "SQL injection prevention"
        },
        {
          "line": 679,
          "comment": "Command injection prevention"
        },
        {
          "line": 687,
          "comment": "Remove dangerous function calls - use a more aggressive approach"
        },
        {
          "line": 692,
          "comment": "Remove any remaining eval/exec references"
        },
        {
          "line": 697,
          "comment": "Remove dangerous file paths"
        },
        {
          "line": 708,
          "comment": "* * Update configuration"
        },
        {
          "line": 714,
          "comment": "TODO: Implement these interfaces"
        },
        {
          "line": 715,
          "comment": "Placeholder interfaces for dependencies"
        }
      ]
    },
    "src/mcp/arbiter-mcp-server.ts": {
      "file_path": "src/mcp/arbiter-mcp-server.ts",
      "language": "typescript",
      "total_comments": 1186,
      "hidden_todos": {
        "340": {
          "comment": "note: \"File operation type not yet implemented\",",
          "matches": {
            "incomplete_implementation": [
              "\\bnot\\s+yet\\s+implemented\\b"
            ]
          },
          "confidence_score": 0.86,
          "confidence_breakdown": [
            [
              "incomplete_implementation",
              0.86
            ]
          ],
          "context_score": -0.2
        },
        "532": {
          "comment": "note: \"Code generation type not yet implemented\",",
          "matches": {
            "incomplete_implementation": [
              "\\bnot\\s+yet\\s+implemented\\b"
            ]
          },
          "confidence_score": 0.86,
          "confidence_breakdown": [
            [
              "incomplete_implementation",
              0.86
            ]
          ],
          "context_score": -0.2
        },
        "689": {
          "comment": "// TODO: Add proper cleanup when orchestrator supports it",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        },
        "1157": {
          "comment": "// In a real implementation, this would collect logs from the logger",
          "matches": {
            "future_improvements": [
              "\\bin\\s+a\\s+real\\s+implementation\\b"
            ]
          },
          "confidence_score": 0.9,
          "confidence_breakdown": [
            [
              "future_improvements",
              0.9
            ]
          ],
          "context_score": 0.0
        }
      },
      "all_comments": [
        {
          "line": 1,
          "comment": "/**"
        },
        {
          "line": 2,
          "comment": "* Arbiter MCP Server"
        },
        {
          "line": 3,
          "comment": "*"
        },
        {
          "line": 4,
          "comment": "* MCP server that exposes the V2 Arbiter's autonomous capabilities as tools."
        },
        {
          "line": 5,
          "comment": "* Allows external systems to interact with the arbiter, give it tasks, monitor progress,"
        },
        {
          "line": 6,
          "comment": "* and audit its chain-of-thought reasoning."
        },
        {
          "line": 7,
          "comment": "*"
        },
        {
          "line": 8,
          "comment": "* @author @darianrosebrook"
        },
        {
          "line": 9,
          "comment": "*/"
        },
        {
          "line": 11,
          "comment": "import { Server } from \"@modelcontextprotocol/sdk/server/index.js\";"
        },
        {
          "line": 12,
          "comment": "import { StdioServerTransport } from \"@modelcontextprotocol/sdk/server/stdio.js\";"
        },
        {
          "line": 13,
          "comment": "import {"
        },
        {
          "line": 14,
          "comment": "CallToolRequestSchema,"
        },
        {
          "line": 15,
          "comment": "ListResourcesRequestSchema,"
        },
        {
          "line": 16,
          "comment": "ListToolsRequestSchema,"
        },
        {
          "line": 17,
          "comment": "ReadResourceRequestSchema,"
        },
        {
          "line": 18,
          "comment": "} from \"@modelcontextprotocol/sdk/types.js\";"
        },
        {
          "line": 20,
          "comment": "import { ConnectionPoolManager } from \"../database/ConnectionPoolManager.js\";"
        },
        {
          "line": 21,
          "comment": "import { Logger } from \"../observability/Logger.js\";"
        },
        {
          "line": 22,
          "comment": "import { ArbiterOrchestrator } from \"../orchestrator/ArbiterOrchestrator.js\";"
        },
        {
          "line": 23,
          "comment": "import { TaskOrchestrator } from \"../orchestrator/TaskOrchestrator.js\";"
        },
        {
          "line": 24,
          "comment": "import { TerminalSessionManager } from \"../orchestrator/TerminalSessionManager.js\";"
        },
        {
          "line": 25,
          "comment": "import { WorkspaceStateManager } from \"../workspace/WorkspaceStateManager.js\";"
        },
        {
          "line": 27,
          "comment": "// Constants for terminal session manager"
        },
        {
          "line": 28,
          "comment": "const MAX_CONCURRENT_SESSIONS = 50;"
        },
        {
          "line": 29,
          "comment": "const DEFAULT_TIMEOUT = 60000;"
        },
        {
          "line": 30,
          "comment": "const MAX_TIMEOUT = 300000;"
        },
        {
          "line": 31,
          "comment": "const MAX_OUTPUT_SIZE = 1024 * 1024;"
        },
        {
          "line": 33,
          "comment": "// Arbiter instance (singleton)"
        },
        {
          "line": 34,
          "comment": "let arbiterInstance: ArbiterOrchestrator | null = null;"
        },
        {
          "line": 35,
          "comment": "let logger: Logger;"
        },
        {
          "line": 36,
          "comment": "let isRunning = false;"
        },
        {
          "line": 38,
          "comment": "// Real component instances"
        },
        {
          "line": 39,
          "comment": "let terminalManager: TerminalSessionManager | null = null;"
        },
        {
          "line": 40,
          "comment": "let workspaceManager: WorkspaceStateManager | null = null;"
        },
        {
          "line": 41,
          "comment": "let taskOrchestrator: TaskOrchestrator | null = null;"
        },
        {
          "line": 43,
          "comment": "// Active tasks tracking"
        },
        {
          "line": 44,
          "comment": "interface ActiveTask {"
        },
        {
          "line": 45,
          "comment": "id: string;"
        },
        {
          "line": 46,
          "comment": "type: string;"
        },
        {
          "line": 47,
          "comment": "description: string;"
        },
        {
          "line": 48,
          "comment": "status: \"planning\" | \"executing\" | \"completed\" | \"failed\";"
        },
        {
          "line": 49,
          "comment": "startedAt: Date;"
        },
        {
          "line": 50,
          "comment": "progress: string[];"
        },
        {
          "line": 51,
          "comment": "result?: any;"
        },
        {
          "line": 52,
          "comment": "}"
        },
        {
          "line": 54,
          "comment": "const activeTasks = new Map<string, ActiveTask>();"
        },
        {
          "line": 56,
          "comment": "/**"
        },
        {
          "line": 57,
          "comment": "* Arbiter MCP Server"
        },
        {
          "line": 58,
          "comment": "*"
        },
        {
          "line": 59,
          "comment": "* Exposes tools for:"
        },
        {
          "line": 60,
          "comment": "* - Starting/stopping autonomous arbiter execution"
        },
        {
          "line": 61,
          "comment": "* - Giving tasks to execute autonomously"
        },
        {
          "line": 62,
          "comment": "* - Monitoring progress and status"
        },
        {
          "line": 63,
          "comment": "* - Retrieving chain-of-thought logs"
        },
        {
          "line": 64,
          "comment": "* - Getting performance metrics"
        },
        {
          "line": 65,
          "comment": "*/"
        },
        {
          "line": 66,
          "comment": "class ArbiterMCPServer extends Server {"
        },
        {
          "line": 67,
          "comment": "constructor() {"
        },
        {
          "line": 68,
          "comment": "super("
        },
        {
          "line": 69,
          "comment": "{"
        },
        {
          "line": 70,
          "comment": "name: \"arbiter-mcp-server\","
        },
        {
          "line": 71,
          "comment": "version: \"2.0.0\","
        },
        {
          "line": 72,
          "comment": "},"
        },
        {
          "line": 73,
          "comment": "{"
        },
        {
          "line": 74,
          "comment": "capabilities: {"
        },
        {
          "line": 75,
          "comment": "tools: {},"
        },
        {
          "line": 76,
          "comment": "resources: {},"
        },
        {
          "line": 77,
          "comment": "},"
        },
        {
          "line": 78,
          "comment": "}"
        },
        {
          "line": 79,
          "comment": ");"
        },
        {
          "line": 81,
          "comment": "logger = new Logger(\"ArbiterMCP\");"
        },
        {
          "line": 83,
          "comment": "this.setupToolHandlers();"
        },
        {
          "line": 84,
          "comment": "this.setupResourceHandlers();"
        },
        {
          "line": 85,
          "comment": "}"
        },
        {
          "line": 87,
          "comment": "private setupToolHandlers(): void {"
        },
        {
          "line": 88,
          "comment": "// Tool: start_arbiter - Initialize and start the arbiter"
        },
        {
          "line": 89,
          "comment": "this.setRequestHandler(CallToolRequestSchema, async (request) => {"
        },
        {
          "line": 90,
          "comment": "const { name, arguments: args = {} } = request.params;"
        },
        {
          "line": 92,
          "comment": "switch (name) {"
        },
        {
          "line": 93,
          "comment": "case \"start_arbiter\":"
        },
        {
          "line": 94,
          "comment": "return await this.handleStartArbiter(args);"
        },
        {
          "line": 96,
          "comment": "case \"stop_arbiter\":"
        },
        {
          "line": 97,
          "comment": "return await this.handleStopArbiter(args);"
        },
        {
          "line": 99,
          "comment": "case \"give_task\":"
        },
        {
          "line": 100,
          "comment": "return await this.handleGiveTask(args);"
        },
        {
          "line": 102,
          "comment": "case \"get_status\":"
        },
        {
          "line": 103,
          "comment": "return await this.handleGetStatus(args);"
        },
        {
          "line": 105,
          "comment": "case \"get_progress\":"
        },
        {
          "line": 106,
          "comment": "return await this.handleGetProgress(args);"
        },
        {
          "line": 108,
          "comment": "case \"get_cot_logs\":"
        },
        {
          "line": 109,
          "comment": "return await this.handleGetCOTLogs(args);"
        },
        {
          "line": 111,
          "comment": "case \"get_metrics\":"
        },
        {
          "line": 112,
          "comment": "return await this.handleGetMetrics(args);"
        },
        {
          "line": 114,
          "comment": "case \"execute_command\":"
        },
        {
          "line": 115,
          "comment": "return await this.handleExecuteCommand(args);"
        },
        {
          "line": 117,
          "comment": "case \"chat_with_arbiter\":"
        },
        {
          "line": 118,
          "comment": "return await this.handleChatWithArbiter(args);"
        },
        {
          "line": 120,
          "comment": "default:"
        },
        {
          "line": 121,
          "comment": "throw new Error(`Unknown tool: ${name}`);"
        },
        {
          "line": 122,
          "comment": "}"
        },
        {
          "line": 123,
          "comment": "});"
        },
        {
          "line": 124,
          "comment": "}"
        },
        {
          "line": 126,
          "comment": "private setupResourceHandlers(): void {"
        },
        {
          "line": 127,
          "comment": "// Resource: arbiter://status - Current arbiter status"
        },
        {
          "line": 128,
          "comment": "this.setRequestHandler(ReadResourceRequestSchema, async (request) => {"
        },
        {
          "line": 129,
          "comment": "const { uri } = request.params;"
        },
        {
          "line": 131,
          "comment": "if (uri === \"arbiter://status\") {"
        },
        {
          "line": 132,
          "comment": "return {"
        },
        {
          "line": 133,
          "comment": "contents: ["
        },
        {
          "line": 134,
          "comment": "{"
        },
        {
          "line": 135,
          "comment": "uri,"
        },
        {
          "line": 136,
          "comment": "mimeType: \"application/json\","
        },
        {
          "line": 137,
          "comment": "text: JSON.stringify(await this.getStatusData(), null, 2),"
        },
        {
          "line": 138,
          "comment": "},"
        },
        {
          "line": 139,
          "comment": "],"
        },
        {
          "line": 140,
          "comment": "};"
        },
        {
          "line": 141,
          "comment": "}"
        },
        {
          "line": 143,
          "comment": "if (uri === \"arbiter://cot-logs\") {"
        },
        {
          "line": 144,
          "comment": "return {"
        },
        {
          "line": 145,
          "comment": "contents: ["
        },
        {
          "line": 146,
          "comment": "{"
        },
        {
          "line": 147,
          "comment": "uri,"
        },
        {
          "line": 148,
          "comment": "mimeType: \"application/json\","
        },
        {
          "line": 149,
          "comment": "text: JSON.stringify(await this.getCOTLogsData(), null, 2),"
        },
        {
          "line": 150,
          "comment": "},"
        },
        {
          "line": 151,
          "comment": "],"
        },
        {
          "line": 152,
          "comment": "};"
        },
        {
          "line": 153,
          "comment": "}"
        },
        {
          "line": 155,
          "comment": "if (uri === \"arbiter://metrics\") {"
        },
        {
          "line": 156,
          "comment": "return {"
        },
        {
          "line": 157,
          "comment": "contents: ["
        },
        {
          "line": 158,
          "comment": "{"
        },
        {
          "line": 159,
          "comment": "uri,"
        },
        {
          "line": 160,
          "comment": "mimeType: \"application/json\","
        },
        {
          "line": 161,
          "comment": "text: JSON.stringify(await this.getMetricsData(), null, 2),"
        },
        {
          "line": 162,
          "comment": "},"
        },
        {
          "line": 163,
          "comment": "],"
        },
        {
          "line": 164,
          "comment": "};"
        },
        {
          "line": 165,
          "comment": "}"
        },
        {
          "line": 167,
          "comment": "throw new Error(`Unknown resource: ${uri}`);"
        },
        {
          "line": 168,
          "comment": "});"
        },
        {
          "line": 170,
          "comment": "// List available resources"
        },
        {
          "line": 171,
          "comment": "this.setRequestHandler(ListResourcesRequestSchema, async () => {"
        },
        {
          "line": 172,
          "comment": "return {"
        },
        {
          "line": 173,
          "comment": "resources: ["
        },
        {
          "line": 174,
          "comment": "{"
        },
        {
          "line": 175,
          "comment": "uri: \"arbiter://status\","
        },
        {
          "line": 176,
          "comment": "name: \"Arbiter Status\","
        },
        {
          "line": 177,
          "comment": "description: \"Current status and operational state of the arbiter\","
        },
        {
          "line": 178,
          "comment": "mimeType: \"application/json\","
        },
        {
          "line": 179,
          "comment": "},"
        },
        {
          "line": 180,
          "comment": "{"
        },
        {
          "line": 181,
          "comment": "uri: \"arbiter://cot-logs\","
        },
        {
          "line": 182,
          "comment": "name: \"Chain-of-Thought Logs\","
        },
        {
          "line": 183,
          "comment": "description: \"Recent chain-of-thought reasoning and decision logs\","
        },
        {
          "line": 184,
          "comment": "mimeType: \"application/json\","
        },
        {
          "line": 185,
          "comment": "},"
        },
        {
          "line": 186,
          "comment": "{"
        },
        {
          "line": 187,
          "comment": "uri: \"arbiter://metrics\","
        },
        {
          "line": 188,
          "comment": "name: \"Performance Metrics\","
        },
        {
          "line": 189,
          "comment": "description: \"Arbiter performance metrics and statistics\","
        },
        {
          "line": 190,
          "comment": "mimeType: \"application/json\","
        },
        {
          "line": 191,
          "comment": "},"
        },
        {
          "line": 192,
          "comment": "],"
        },
        {
          "line": 193,
          "comment": "};"
        },
        {
          "line": 194,
          "comment": "});"
        },
        {
          "line": 195,
          "comment": "}"
        },
        {
          "line": 197,
          "comment": "/**"
        },
        {
          "line": 198,
          "comment": "* Start autonomous execution of a task"
        },
        {
          "line": 199,
          "comment": "*/"
        },
        {
          "line": 200,
          "comment": "private async startAutonomousExecution(task: ActiveTask): Promise<void> {"
        },
        {
          "line": 201,
          "comment": "// Run autonomous execution in background"
        },
        {
          "line": 202,
          "comment": "setImmediate(async () => {"
        },
        {
          "line": 203,
          "comment": "try {"
        },
        {
          "line": 204,
          "comment": "task.progress.push(\"Starting autonomous execution\");"
        },
        {
          "line": 205,
          "comment": "logger.plan(\"Breaking down task into steps\", {"
        },
        {
          "line": 206,
          "comment": "taskId: task.id,"
        },
        {
          "line": 207,
          "comment": "taskType: task.type,"
        },
        {
          "line": 208,
          "comment": "description: task.description,"
        },
        {
          "line": 209,
          "comment": "});"
        },
        {
          "line": 211,
          "comment": "// Simulate autonomous reasoning and execution"
        },
        {
          "line": 212,
          "comment": "await this.executeAutonomousTask(task);"
        },
        {
          "line": 213,
          "comment": "} catch (error) {"
        },
        {
          "line": 214,
          "comment": "task.status = \"failed\";"
        },
        {
          "line": 215,
          "comment": "task.result = {"
        },
        {
          "line": 216,
          "comment": "error: error instanceof Error ? error.message : \"Unknown error\","
        },
        {
          "line": 217,
          "comment": "};"
        },
        {
          "line": 218,
          "comment": "logger.error(\"Autonomous execution failed\", { taskId: task.id, error });"
        },
        {
          "line": 219,
          "comment": "}"
        },
        {
          "line": 220,
          "comment": "});"
        },
        {
          "line": 221,
          "comment": "}"
        },
        {
          "line": 223,
          "comment": "/**"
        },
        {
          "line": 224,
          "comment": "* Execute a task autonomously with chain-of-thought reasoning"
        },
        {
          "line": 225,
          "comment": "*/"
        },
        {
          "line": 226,
          "comment": "private async executeAutonomousTask(task: ActiveTask): Promise<void> {"
        },
        {
          "line": 227,
          "comment": "task.status = \"executing\";"
        },
        {
          "line": 228,
          "comment": "task.progress.push(\"Analyzing task requirements\");"
        },
        {
          "line": 230,
          "comment": "logger.analyze(\"Understanding task requirements\", {"
        },
        {
          "line": 231,
          "comment": "taskId: task.id,"
        },
        {
          "line": 232,
          "comment": "type: task.type,"
        },
        {
          "line": 233,
          "comment": "description: task.description,"
        },
        {
          "line": 234,
          "comment": "});"
        },
        {
          "line": 236,
          "comment": "// Different execution logic based on task type"
        },
        {
          "line": 237,
          "comment": "switch (task.type) {"
        },
        {
          "line": 238,
          "comment": "case \"file_operation\":"
        },
        {
          "line": 239,
          "comment": "await this.executeFileOperation(task);"
        },
        {
          "line": 240,
          "comment": "break;"
        },
        {
          "line": 241,
          "comment": "case \"code_generation\":"
        },
        {
          "line": 242,
          "comment": "await this.executeCodeGeneration(task);"
        },
        {
          "line": 243,
          "comment": "break;"
        },
        {
          "line": 244,
          "comment": "case \"analysis\":"
        },
        {
          "line": 245,
          "comment": "await this.executeAnalysis(task);"
        },
        {
          "line": 246,
          "comment": "break;"
        },
        {
          "line": 247,
          "comment": "default:"
        },
        {
          "line": 248,
          "comment": "await this.executeGenericTask(task);"
        },
        {
          "line": 249,
          "comment": "}"
        },
        {
          "line": 251,
          "comment": "task.status = \"completed\";"
        },
        {
          "line": 252,
          "comment": "task.progress.push(\"Task completed successfully\");"
        },
        {
          "line": 253,
          "comment": "logger.verify(\"Task execution completed\", {"
        },
        {
          "line": 254,
          "comment": "taskId: task.id,"
        },
        {
          "line": 255,
          "comment": "finalStatus: task.status,"
        },
        {
          "line": 256,
          "comment": "});"
        },
        {
          "line": 257,
          "comment": "}"
        },
        {
          "line": 259,
          "comment": "private async executeFileOperation(task: ActiveTask): Promise<void> {"
        },
        {
          "line": 260,
          "comment": "if (!terminalManager) {"
        },
        {
          "line": 261,
          "comment": "throw new Error(\"Terminal manager not available for file operations\");"
        },
        {
          "line": 262,
          "comment": "}"
        },
        {
          "line": 264,
          "comment": "logger.plan(\"Planning file operation steps\", { taskId: task.id });"
        },
        {
          "line": 266,
          "comment": "// Parse the task description to determine what file operation to perform"
        },
        {
          "line": 267,
          "comment": "const description = task.description.toLowerCase();"
        },
        {
          "line": 269,
          "comment": "if (description.includes(\"create\") && description.includes(\"hello\")) {"
        },
        {
          "line": 270,
          "comment": "task.progress.push(\"Planning file creation with hello content\");"
        },
        {
          "line": 271,
          "comment": "logger.decide(\"Will create hello.txt file with greeting content\", {"
        },
        {
          "line": 272,
          "comment": "taskId: task.id,"
        },
        {
          "line": 273,
          "comment": "});"
        },
        {
          "line": 275,
          "comment": "task.progress.push(\"Creating terminal session for file operation\");"
        },
        {
          "line": 276,
          "comment": "logger.execute(\"Initializing terminal session\", { taskId: task.id });"
        },
        {
          "line": 278,
          "comment": "// Create a terminal session"
        },
        {
          "line": 279,
          "comment": "const session = await terminalManager.createSession("
        },
        {
          "line": 280,
          "comment": "task.id,"
        },
        {
          "line": 281,
          "comment": "\"arbiter-agent\","
        },
        {
          "line": 282,
          "comment": "{"
        },
        {
          "line": 283,
          "comment": "workingDirectory: process.cwd(),"
        },
        {
          "line": 284,
          "comment": "}"
        },
        {
          "line": 285,
          "comment": ");"
        },
        {
          "line": 287,
          "comment": "task.progress.push(\"Executing file creation command\");"
        },
        {
          "line": 288,
          "comment": "logger.execute(\"Running node script to create file\", {"
        },
        {
          "line": 289,
          "comment": "taskId: task.id,"
        },
        {
          "line": 290,
          "comment": "});"
        },
        {
          "line": 292,
          "comment": "// Execute the command to create the file using node"
        },
        {
          "line": 293,
          "comment": "const fileContent ="
        },
        {
          "line": 294,
          "comment": "\"Hello World! This file was created by the V2 Arbiter autonomously.\";"
        },
        {
          "line": 295,
          "comment": "const result = await terminalManager.executeCommand({"
        },
        {
          "line": 296,
          "comment": "sessionId: session.id,"
        },
        {
          "line": 297,
          "comment": "command: \"node\","
        },
        {
          "line": 298,
          "comment": "args: ["
        },
        {
          "line": 299,
          "comment": "\"-e\","
        },
        {
          "line": 300,
          "comment": "`require('fs').writeFileSync('hello.txt', '${fileContent.replace("
        },
        {
          "line": 301,
          "comment": "/'/g,"
        },
        {
          "line": 302,
          "comment": "\"\\\\'\""
        },
        {
          "line": 303,
          "comment": ")}')`,"
        },
        {
          "line": 304,
          "comment": "],"
        },
        {
          "line": 305,
          "comment": "timeout: 10000,"
        },
        {
          "line": 306,
          "comment": "});"
        },
        {
          "line": 308,
          "comment": "// Close the session"
        },
        {
          "line": 309,
          "comment": "await terminalManager.closeSession(session.id);"
        },
        {
          "line": 311,
          "comment": "if (result.success) {"
        },
        {
          "line": 312,
          "comment": "task.result = {"
        },
        {
          "line": 313,
          "comment": "action: \"file_created\","
        },
        {
          "line": 314,
          "comment": "path: \"hello.txt\","
        },
        {
          "line": 315,
          "comment": "exitCode: result.exitCode,"
        },
        {
          "line": 316,
          "comment": "output: result.stdout,"
        },
        {
          "line": 317,
          "comment": "sessionId: session.id,"
        },
        {
          "line": 318,
          "comment": "};"
        },
        {
          "line": 319,
          "comment": "logger.verify(\"File creation successful\", {"
        },
        {
          "line": 320,
          "comment": "taskId: task.id,"
        },
        {
          "line": 321,
          "comment": "path: \"hello.txt\","
        },
        {
          "line": 322,
          "comment": "exitCode: result.exitCode,"
        },
        {
          "line": 323,
          "comment": "});"
        },
        {
          "line": 324,
          "comment": "} else {"
        },
        {
          "line": 325,
          "comment": "throw new Error(`File creation failed: ${result.stderr}`);"
        },
        {
          "line": 326,
          "comment": "}"
        },
        {
          "line": 327,
          "comment": "} else {"
        },
        {
          "line": 328,
          "comment": "// Handle other file operations or provide a generic response"
        },
        {
          "line": 329,
          "comment": "task.progress.push(\"Analyzing file operation requirements\");"
        },
        {
          "line": 330,
          "comment": "logger.analyze("
        },
        {
          "line": 331,
          "comment": "\"Task description doesn't match known file operation patterns\","
        },
        {
          "line": 332,
          "comment": "{"
        },
        {
          "line": 333,
          "comment": "taskId: task.id,"
        },
        {
          "line": 334,
          "comment": "description: task.description,"
        },
        {
          "line": 335,
          "comment": "}"
        },
        {
          "line": 336,
          "comment": ");"
        },
        {
          "line": 338,
          "comment": "task.result = {"
        },
        {
          "line": 339,
          "comment": "action: \"file_operation_analyzed\","
        },
        {
          "line": 340,
          "comment": "note: \"File operation type not yet implemented\","
        },
        {
          "line": 341,
          "comment": "description: task.description,"
        },
        {
          "line": 342,
          "comment": "};"
        },
        {
          "line": 343,
          "comment": "}"
        },
        {
          "line": 344,
          "comment": "}"
        },
        {
          "line": 346,
          "comment": "private async executeCodeGeneration(task: ActiveTask): Promise<void> {"
        },
        {
          "line": 347,
          "comment": "if (!terminalManager) {"
        },
        {
          "line": 348,
          "comment": "throw new Error(\"Terminal manager not available for code generation\");"
        },
        {
          "line": 349,
          "comment": "}"
        },
        {
          "line": 351,
          "comment": "logger.plan(\"Planning code generation steps\", { taskId: task.id });"
        },
        {
          "line": 352,
          "comment": "task.progress.push(\"Analyzing code requirements\");"
        },
        {
          "line": 354,
          "comment": "const description = task.description.toLowerCase();"
        },
        {
          "line": 356,
          "comment": "if ("
        },
        {
          "line": 357,
          "comment": "description.includes(\"data validation\") ||"
        },
        {
          "line": 358,
          "comment": "description.includes(\"utility\")"
        },
        {
          "line": 359,
          "comment": ") {"
        },
        {
          "line": 360,
          "comment": "task.progress.push(\"Generating TypeScript utility function\");"
        },
        {
          "line": 361,
          "comment": "logger.analyze(\"Identified data validation utility requirement\", {"
        },
        {
          "line": 362,
          "comment": "taskId: task.id,"
        },
        {
          "line": 363,
          "comment": "});"
        },
        {
          "line": 365,
          "comment": "logger.decide(\"Will generate TypeScript data validation utility\", {"
        },
        {
          "line": 366,
          "comment": "taskId: task.id,"
        },
        {
          "line": 367,
          "comment": "});"
        },
        {
          "line": 369,
          "comment": "task.progress.push(\"Creating validation utility code\");"
        },
        {
          "line": 370,
          "comment": "logger.execute(\"Generating TypeScript validation function\", {"
        },
        {
          "line": 371,
          "comment": "taskId: task.id,"
        },
        {
          "line": 372,
          "comment": "});"
        },
        {
          "line": 374,
          "comment": "// Generate a simple data validation utility"
        },
        {
          "line": 375,
          "comment": "const validationCode = `/**"
        },
        {
          "line": 376,
          "comment": "* Data Validation Utility"
        },
        {
          "line": 377,
          "comment": "*"
        },
        {
          "line": 378,
          "comment": "* Generated by V2 Arbiter autonomous code generation"
        },
        {
          "line": 379,
          "comment": "* @author Arbiter AI Agent"
        },
        {
          "line": 380,
          "comment": "*/"
        },
        {
          "line": 382,
          "comment": "export interface ValidationResult {"
        },
        {
          "line": 383,
          "comment": "isValid: boolean;"
        },
        {
          "line": 384,
          "comment": "errors: string[];"
        },
        {
          "line": 385,
          "comment": "}"
        },
        {
          "line": 387,
          "comment": "export interface ValidationRule {"
        },
        {
          "line": 388,
          "comment": "field: string;"
        },
        {
          "line": 389,
          "comment": "required?: boolean;"
        },
        {
          "line": 390,
          "comment": "type?: 'string' | 'number' | 'boolean';"
        },
        {
          "line": 391,
          "comment": "minLength?: number;"
        },
        {
          "line": 392,
          "comment": "maxLength?: number;"
        },
        {
          "line": 393,
          "comment": "pattern?: RegExp;"
        },
        {
          "line": 394,
          "comment": "}"
        },
        {
          "line": 396,
          "comment": "/**"
        },
        {
          "line": 397,
          "comment": "* Validates data against a set of rules"
        },
        {
          "line": 398,
          "comment": "*/"
        },
        {
          "line": 399,
          "comment": "export function validateData(data: Record<string, any>, rules: ValidationRule[]): ValidationResult {"
        },
        {
          "line": 400,
          "comment": "const errors: string[] = [];"
        },
        {
          "line": 402,
          "comment": "for (const rule of rules) {"
        },
        {
          "line": 403,
          "comment": "const value = data[rule.field];"
        },
        {
          "line": 405,
          "comment": "// Check required fields"
        },
        {
          "line": 406,
          "comment": "if (rule.required && (value === undefined || value === null || value === '')) {"
        },
        {
          "line": 407,
          "comment": "errors.push(rule.field + ' is required');"
        },
        {
          "line": 408,
          "comment": "continue;"
        },
        {
          "line": 409,
          "comment": "}"
        },
        {
          "line": 411,
          "comment": "// Skip further validation if field is not required and empty"
        },
        {
          "line": 412,
          "comment": "if (!rule.required && (value === undefined || value === null || value === '')) {"
        },
        {
          "line": 413,
          "comment": "continue;"
        },
        {
          "line": 414,
          "comment": "}"
        },
        {
          "line": 416,
          "comment": "// Type validation"
        },
        {
          "line": 417,
          "comment": "if (rule.type) {"
        },
        {
          "line": 418,
          "comment": "if (rule.type === 'string' && typeof value !== 'string') {"
        },
        {
          "line": 419,
          "comment": "errors.push(rule.field + ' must be a string');"
        },
        {
          "line": 420,
          "comment": "} else if (rule.type === 'number' && typeof value !== 'number') {"
        },
        {
          "line": 421,
          "comment": "errors.push(rule.field + ' must be a number');"
        },
        {
          "line": 422,
          "comment": "} else if (rule.type === 'boolean' && typeof value !== 'boolean') {"
        },
        {
          "line": 423,
          "comment": "errors.push(rule.field + ' must be a boolean');"
        },
        {
          "line": 424,
          "comment": "}"
        },
        {
          "line": 425,
          "comment": "}"
        },
        {
          "line": 427,
          "comment": "// String-specific validations"
        },
        {
          "line": 428,
          "comment": "if (typeof value === 'string') {"
        },
        {
          "line": 429,
          "comment": "if (rule.minLength && value.length < rule.minLength) {"
        },
        {
          "line": 430,
          "comment": "errors.push(rule.field + ' must be at least ' + rule.minLength + ' characters');"
        },
        {
          "line": 431,
          "comment": "}"
        },
        {
          "line": 432,
          "comment": "if (rule.maxLength && value.length > rule.maxLength) {"
        },
        {
          "line": 433,
          "comment": "errors.push(rule.field + ' must be no more than ' + rule.maxLength + ' characters');"
        },
        {
          "line": 434,
          "comment": "}"
        },
        {
          "line": 435,
          "comment": "if (rule.pattern && !rule.pattern.test(value)) {"
        },
        {
          "line": 436,
          "comment": "errors.push(rule.field + ' does not match required pattern');"
        },
        {
          "line": 437,
          "comment": "}"
        },
        {
          "line": 438,
          "comment": "}"
        },
        {
          "line": 439,
          "comment": "}"
        },
        {
          "line": 441,
          "comment": "return {"
        },
        {
          "line": 442,
          "comment": "isValid: errors.length === 0,"
        },
        {
          "line": 443,
          "comment": "errors,"
        },
        {
          "line": 444,
          "comment": "};"
        },
        {
          "line": 445,
          "comment": "}"
        },
        {
          "line": 447,
          "comment": "/**"
        },
        {
          "line": 448,
          "comment": "* Example usage:"
        },
        {
          "line": 449,
          "comment": "*"
        },
        {
          "line": 450,
          "comment": "* const rules: ValidationRule[] = ["
        },
        {
          "line": 451,
          "comment": "*   { field: 'name', required: true, type: 'string', minLength: 2 },"
        },
        {
          "line": 452,
          "comment": "*   { field: 'email', required: true, type: 'string', pattern: /^[^@]+@[^@]+\\\\.[^@]+$/ },"
        },
        {
          "line": 453,
          "comment": "*   { field: 'age', type: 'number' },"
        },
        {
          "line": 454,
          "comment": "* ];"
        },
        {
          "line": 455,
          "comment": "*"
        },
        {
          "line": 456,
          "comment": "* const result = validateData({ name: 'John', email: 'john@example.com', age: 30 }, rules);"
        },
        {
          "line": 457,
          "comment": "* console.log(result.isValid); // true"
        },
        {
          "line": 458,
          "comment": "*/"
        },
        {
          "line": 459,
          "comment": "`;"
        },
        {
          "line": 461,
          "comment": "// Write the generated code to a file using terminal manager"
        },
        {
          "line": 462,
          "comment": "const filePath = \"data-validation-utility.ts\";"
        },
        {
          "line": 464,
          "comment": "// Create a terminal session for code generation"
        },
        {
          "line": 465,
          "comment": "const session = await terminalManager.createSession("
        },
        {
          "line": 466,
          "comment": "task.id,"
        },
        {
          "line": 467,
          "comment": "\"arbiter-agent\","
        },
        {
          "line": 468,
          "comment": "{"
        },
        {
          "line": 469,
          "comment": "workingDirectory: process.cwd(),"
        },
        {
          "line": 470,
          "comment": "}"
        },
        {
          "line": 471,
          "comment": ");"
        },
        {
          "line": 473,
          "comment": "task.progress.push(\"Writing generated code to file\");"
        },
        {
          "line": 474,
          "comment": "logger.execute(\"Writing TypeScript validation utility to file\", {"
        },
        {
          "line": 475,
          "comment": "taskId: task.id,"
        },
        {
          "line": 476,
          "comment": "filePath: filePath,"
        },
        {
          "line": 477,
          "comment": "});"
        },
        {
          "line": 479,
          "comment": "// Use node to write the multi-line code to file"
        },
        {
          "line": 480,
          "comment": "// Write in two steps to avoid shell metacharacter issues"
        },
        {
          "line": 481,
          "comment": "const base64Code = Buffer.from(validationCode).toString(\"base64\");"
        },
        {
          "line": 483,
          "comment": "const writeScript = `"
        },
        {
          "line": 484,
          "comment": "const fs = require('fs');"
        },
        {
          "line": 485,
          "comment": "const code = Buffer.from('${base64Code}', 'base64').toString('utf8');"
        },
        {
          "line": 486,
          "comment": "fs.writeFileSync('${filePath}', code);"
        },
        {
          "line": 487,
          "comment": "`;"
        },
        {
          "line": 489,
          "comment": "const result = await terminalManager.executeCommand({"
        },
        {
          "line": 490,
          "comment": "sessionId: session.id,"
        },
        {
          "line": 491,
          "comment": "command: \"node\","
        },
        {
          "line": 492,
          "comment": "args: [\"-e\", writeScript.trim()],"
        },
        {
          "line": 493,
          "comment": "timeout: 15000,"
        },
        {
          "line": 494,
          "comment": "});"
        },
        {
          "line": 496,
          "comment": "// Close the session"
        },
        {
          "line": 497,
          "comment": "await terminalManager.closeSession(session.id);"
        },
        {
          "line": 499,
          "comment": "if (result.success) {"
        },
        {
          "line": 500,
          "comment": "task.result = {"
        },
        {
          "line": 501,
          "comment": "action: \"code_generated\","
        },
        {
          "line": 502,
          "comment": "language: \"typescript\","
        },
        {
          "line": 503,
          "comment": "filePath: filePath,"
        },
        {
          "line": 504,
          "comment": "linesOfCode: validationCode.split(\"\\n\").length,"
        },
        {
          "line": 505,
          "comment": "description:"
        },
        {
          "line": 506,
          "comment": "\"Data validation utility with comprehensive rule-based validation\","
        },
        {
          "line": 507,
          "comment": "exitCode: result.exitCode,"
        },
        {
          "line": 508,
          "comment": "sessionId: session.id,"
        },
        {
          "line": 509,
          "comment": "};"
        },
        {
          "line": 511,
          "comment": "logger.verify(\"Code generation successful\", {"
        },
        {
          "line": 512,
          "comment": "taskId: task.id,"
        },
        {
          "line": 513,
          "comment": "filePath: filePath,"
        },
        {
          "line": 514,
          "comment": "linesOfCode: validationCode.split(\"\\n\").length,"
        },
        {
          "line": 515,
          "comment": "});"
        },
        {
          "line": 516,
          "comment": "} else {"
        },
        {
          "line": 517,
          "comment": "throw new Error(`Code generation failed: ${result.stderr}`);"
        },
        {
          "line": 518,
          "comment": "}"
        },
        {
          "line": 519,
          "comment": "} else {"
        },
        {
          "line": 520,
          "comment": "// Generic code generation response"
        },
        {
          "line": 521,
          "comment": "task.progress.push(\"Analyzing code generation requirements\");"
        },
        {
          "line": 522,
          "comment": "logger.analyze("
        },
        {
          "line": 523,
          "comment": "\"Task description doesn't match known code generation patterns\","
        },
        {
          "line": 524,
          "comment": "{"
        },
        {
          "line": 525,
          "comment": "taskId: task.id,"
        },
        {
          "line": 526,
          "comment": "description: task.description,"
        },
        {
          "line": 527,
          "comment": "}"
        },
        {
          "line": 528,
          "comment": ");"
        },
        {
          "line": 530,
          "comment": "task.result = {"
        },
        {
          "line": 531,
          "comment": "action: \"code_generation_analyzed\","
        },
        {
          "line": 532,
          "comment": "note: \"Code generation type not yet implemented\","
        },
        {
          "line": 533,
          "comment": "description: task.description,"
        },
        {
          "line": 534,
          "comment": "};"
        },
        {
          "line": 535,
          "comment": "}"
        },
        {
          "line": 536,
          "comment": "}"
        },
        {
          "line": 538,
          "comment": "private async executeAnalysis(task: ActiveTask): Promise<void> {"
        },
        {
          "line": 539,
          "comment": "logger.plan(\"Planning analysis steps\", { taskId: task.id });"
        },
        {
          "line": 540,
          "comment": "task.progress.push(\"Gathering analysis data\");"
        },
        {
          "line": 541,
          "comment": "logger.analyze(\"Performing autonomous analysis\", { taskId: task.id });"
        },
        {
          "line": 543,
          "comment": "task.progress.push(\"Processing analysis results\");"
        },
        {
          "line": 544,
          "comment": "logger.execute(\"Completing analysis autonomously\", { taskId: task.id });"
        },
        {
          "line": 546,
          "comment": "task.result = { action: \"analysis_completed\", insights: [] };"
        },
        {
          "line": 547,
          "comment": "}"
        },
        {
          "line": 549,
          "comment": "private async executeGenericTask(task: ActiveTask): Promise<void> {"
        },
        {
          "line": 550,
          "comment": "logger.plan(\"Planning generic task execution\", { taskId: task.id });"
        },
        {
          "line": 551,
          "comment": "task.progress.push(\"Processing task autonomously\");"
        },
        {
          "line": 552,
          "comment": "logger.execute(\"Executing generic task\", { taskId: task.id });"
        },
        {
          "line": 554,
          "comment": "task.result = { action: \"task_completed\", type: task.type };"
        },
        {
          "line": 555,
          "comment": "}"
        },
        {
          "line": 557,
          "comment": "// Tool Handlers"
        },
        {
          "line": 559,
          "comment": "private async handleStartArbiter(args: any) {"
        },
        {
          "line": 560,
          "comment": "try {"
        },
        {
          "line": 561,
          "comment": "if (isRunning) {"
        },
        {
          "line": 562,
          "comment": "return {"
        },
        {
          "line": 563,
          "comment": "content: ["
        },
        {
          "line": 564,
          "comment": "{"
        },
        {
          "line": 565,
          "comment": "type: \"text\","
        },
        {
          "line": 566,
          "comment": "text: \"Arbiter is already running\","
        },
        {
          "line": 567,
          "comment": "},"
        },
        {
          "line": 568,
          "comment": "],"
        },
        {
          "line": 569,
          "comment": "};"
        },
        {
          "line": 570,
          "comment": "}"
        },
        {
          "line": 572,
          "comment": "logger.info(\"Starting arbiter via MCP...\");"
        },
        {
          "line": 574,
          "comment": "// Initialize database connection"
        },
        {
          "line": 575,
          "comment": "ConnectionPoolManager.getInstance().initializeFromEnv();"
        },
        {
          "line": 576,
          "comment": "await ConnectionPoolManager.getInstance().healthCheck();"
        },
        {
          "line": 578,
          "comment": "// Initialize real components for autonomous execution"
        },
        {
          "line": 579,
          "comment": "logger.info(\"Initializing Terminal Session Manager...\");"
        },
        {
          "line": 580,
          "comment": "terminalManager = new TerminalSessionManager({"
        },
        {
          "line": 581,
          "comment": "maxConcurrentSessions: MAX_CONCURRENT_SESSIONS,"
        },
        {
          "line": 582,
          "comment": "defaultTimeout: DEFAULT_TIMEOUT,"
        },
        {
          "line": 583,
          "comment": "maxTimeout: MAX_TIMEOUT,"
        },
        {
          "line": 584,
          "comment": "maxOutputSize: MAX_OUTPUT_SIZE,"
        },
        {
          "line": 585,
          "comment": "});"
        },
        {
          "line": 586,
          "comment": "logger.info(\"Terminal Session Manager initialized\");"
        },
        {
          "line": 588,
          "comment": "logger.info(\"Initializing Workspace State Manager...\");"
        },
        {
          "line": 589,
          "comment": "// Create minimal config for workspace manager"
        },
        {
          "line": 590,
          "comment": "const workspaceConfig = {"
        },
        {
          "line": 591,
          "comment": "workspaceRoot: process.cwd(),"
        },
        {
          "line": 592,
          "comment": "watcher: {"
        },
        {
          "line": 593,
          "comment": "watchPaths: [\".\"],"
        },
        {
          "line": 594,
          "comment": "ignorePatterns: [\"**/node_modules/**\", \"**/.git/**\", \"**/dist/**\"],"
        },
        {
          "line": 595,
          "comment": "debounceMs: 300,"
        },
        {
          "line": 596,
          "comment": "recursive: true,"
        },
        {
          "line": 597,
          "comment": "followSymlinks: false,"
        },
        {
          "line": 598,
          "comment": "maxFileSize: 1024 * 1024, // 1MB"
        },
        {
          "line": 599,
          "comment": "detectBinaryFiles: true,"
        },
        {
          "line": 600,
          "comment": "},"
        },
        {
          "line": 601,
          "comment": "defaultContextCriteria: {"
        },
        {
          "line": 602,
          "comment": "maxFiles: 50,"
        },
        {
          "line": 603,
          "comment": "maxSizeBytes: 1024 * 1024, // 1MB"
        },
        {
          "line": 604,
          "comment": "priorityExtensions: [\".ts\", \".js\", \".json\", \".md\"],"
        },
        {
          "line": 605,
          "comment": "excludeExtensions: [\".log\", \".tmp\", \".cache\"],"
        },
        {
          "line": 606,
          "comment": "excludeDirectories: [\"node_modules\", \"dist\", \".git\", \"coverage\"],"
        },
        {
          "line": 607,
          "comment": "includeBinaryFiles: false,"
        },
        {
          "line": 608,
          "comment": "relevanceKeywords: [\"task\", \"agent\", \"arbiter\", \"validation\"],"
        },
        {
          "line": 609,
          "comment": "recencyWeight: 0.3,"
        },
        {
          "line": 610,
          "comment": "},"
        },
        {
          "line": 611,
          "comment": "snapshotRetentionDays: 30,"
        },
        {
          "line": 612,
          "comment": "enablePersistence: false, // Disable for MCP testing"
        },
        {
          "line": 613,
          "comment": "compressionLevel: 0,"
        },
        {
          "line": 614,
          "comment": "};"
        },
        {
          "line": 615,
          "comment": "workspaceManager = new WorkspaceStateManager(workspaceConfig);"
        },
        {
          "line": 616,
          "comment": "await workspaceManager.initialize();"
        },
        {
          "line": 617,
          "comment": "logger.info(\"Workspace State Manager initialized\");"
        },
        {
          "line": 619,
          "comment": "// Skip Task Orchestrator and Arbiter Orchestrator for now - focus on core execution capabilities"
        },
        {
          "line": 620,
          "comment": "logger.info("
        },
        {
          "line": 621,
          "comment": "\"Core components initialized - ready for autonomous task execution\""
        },
        {
          "line": 622,
          "comment": ");"
        },
        {
          "line": 624,
          "comment": "isRunning = true;"
        },
        {
          "line": 626,
          "comment": "logger.observe(\"Arbiter started via MCP\", {"
        },
        {
          "line": 627,
          "comment": "timestamp: new Date().toISOString(),"
        },
        {
          "line": 628,
          "comment": "mode: \"autonomous_testing\","
        },
        {
          "line": 629,
          "comment": "});"
        },
        {
          "line": 631,
          "comment": "return {"
        },
        {
          "line": 632,
          "comment": "content: ["
        },
        {
          "line": 633,
          "comment": "{"
        },
        {
          "line": 634,
          "comment": "type: \"text\","
        },
        {
          "line": 635,
          "comment": "text: \"Arbiter started successfully. Ready for autonomous task execution.\","
        },
        {
          "line": 636,
          "comment": "},"
        },
        {
          "line": 637,
          "comment": "],"
        },
        {
          "line": 638,
          "comment": "};"
        },
        {
          "line": 639,
          "comment": "} catch (error) {"
        },
        {
          "line": 640,
          "comment": "logger.error(\"Failed to start arbiter\", error);"
        },
        {
          "line": 641,
          "comment": "return {"
        },
        {
          "line": 642,
          "comment": "content: ["
        },
        {
          "line": 643,
          "comment": "{"
        },
        {
          "line": 644,
          "comment": "type: \"text\","
        },
        {
          "line": 645,
          "comment": "text: `Failed to start arbiter: ${"
        },
        {
          "line": 646,
          "comment": "error instanceof Error ? error.message : \"Unknown error\""
        },
        {
          "line": 647,
          "comment": "}`,"
        },
        {
          "line": 648,
          "comment": "},"
        },
        {
          "line": 649,
          "comment": "],"
        },
        {
          "line": 650,
          "comment": "};"
        },
        {
          "line": 651,
          "comment": "}"
        },
        {
          "line": 652,
          "comment": "}"
        },
        {
          "line": 654,
          "comment": "private async handleStopArbiter(args: any) {"
        },
        {
          "line": 655,
          "comment": "try {"
        },
        {
          "line": 656,
          "comment": "if (!isRunning) {"
        },
        {
          "line": 657,
          "comment": "return {"
        },
        {
          "line": 658,
          "comment": "content: ["
        },
        {
          "line": 659,
          "comment": "{"
        },
        {
          "line": 660,
          "comment": "type: \"text\","
        },
        {
          "line": 661,
          "comment": "text: \"Arbiter is not running\","
        },
        {
          "line": 662,
          "comment": "},"
        },
        {
          "line": 663,
          "comment": "],"
        },
        {
          "line": 664,
          "comment": "};"
        },
        {
          "line": 665,
          "comment": "}"
        },
        {
          "line": 667,
          "comment": "logger.info(\"Stopping arbiter via MCP...\");"
        },
        {
          "line": 669,
          "comment": "// Clean up real components"
        },
        {
          "line": 670,
          "comment": "if (terminalManager) {"
        },
        {
          "line": 671,
          "comment": "// Terminal manager cleanup if needed"
        },
        {
          "line": 672,
          "comment": "terminalManager = null;"
        },
        {
          "line": 673,
          "comment": "logger.info(\"Terminal Session Manager cleaned up\");"
        },
        {
          "line": 674,
          "comment": "}"
        },
        {
          "line": 676,
          "comment": "if (workspaceManager) {"
        },
        {
          "line": 677,
          "comment": "await workspaceManager.shutdown();"
        },
        {
          "line": 678,
          "comment": "workspaceManager = null;"
        },
        {
          "line": 679,
          "comment": "logger.info(\"Workspace State Manager cleaned up\");"
        },
        {
          "line": 680,
          "comment": "}"
        },
        {
          "line": 682,
          "comment": "if (taskOrchestrator) {"
        },
        {
          "line": 683,
          "comment": "// Task orchestrator cleanup if needed"
        },
        {
          "line": 684,
          "comment": "taskOrchestrator = null;"
        },
        {
          "line": 685,
          "comment": "logger.info(\"Task Orchestrator cleaned up\");"
        },
        {
          "line": 686,
          "comment": "}"
        },
        {
          "line": 688,
          "comment": "if (arbiterInstance) {"
        },
        {
          "line": 689,
          "comment": "// TODO: Add proper cleanup when orchestrator supports it"
        },
        {
          "line": 690,
          "comment": "arbiterInstance = null;"
        },
        {
          "line": 691,
          "comment": "}"
        },
        {
          "line": 693,
          "comment": "await ConnectionPoolManager.getInstance().shutdown();"
        },
        {
          "line": 694,
          "comment": "isRunning = false;"
        },
        {
          "line": 696,
          "comment": "logger.observe(\"Arbiter stopped via MCP\", {"
        },
        {
          "line": 697,
          "comment": "timestamp: new Date().toISOString(),"
        },
        {
          "line": 698,
          "comment": "shutdown_reason: \"mcp_request\","
        },
        {
          "line": 699,
          "comment": "});"
        },
        {
          "line": 701,
          "comment": "return {"
        },
        {
          "line": 702,
          "comment": "content: ["
        },
        {
          "line": 703,
          "comment": "{"
        },
        {
          "line": 704,
          "comment": "type: \"text\","
        },
        {
          "line": 705,
          "comment": "text: \"Arbiter stopped successfully.\","
        },
        {
          "line": 706,
          "comment": "},"
        },
        {
          "line": 707,
          "comment": "],"
        },
        {
          "line": 708,
          "comment": "};"
        },
        {
          "line": 709,
          "comment": "} catch (error) {"
        },
        {
          "line": 710,
          "comment": "logger.error(\"Failed to stop arbiter\", error);"
        },
        {
          "line": 711,
          "comment": "return {"
        },
        {
          "line": 712,
          "comment": "content: ["
        },
        {
          "line": 713,
          "comment": "{"
        },
        {
          "line": 714,
          "comment": "type: \"text\","
        },
        {
          "line": 715,
          "comment": "text: `Failed to stop arbiter: ${"
        },
        {
          "line": 716,
          "comment": "error instanceof Error ? error.message : \"Unknown error\""
        },
        {
          "line": 717,
          "comment": "}`,"
        },
        {
          "line": 718,
          "comment": "},"
        },
        {
          "line": 719,
          "comment": "],"
        },
        {
          "line": 720,
          "comment": "};"
        },
        {
          "line": 721,
          "comment": "}"
        },
        {
          "line": 722,
          "comment": "}"
        },
        {
          "line": 724,
          "comment": "private async handleGiveTask(args: any) {"
        },
        {
          "line": 725,
          "comment": "const { taskType, description, priority = \"medium\" } = args;"
        },
        {
          "line": 727,
          "comment": "if (!taskType || !description) {"
        },
        {
          "line": 728,
          "comment": "return {"
        },
        {
          "line": 729,
          "comment": "content: ["
        },
        {
          "line": 730,
          "comment": "{"
        },
        {
          "line": 731,
          "comment": "type: \"text\","
        },
        {
          "line": 732,
          "comment": "text: \"Missing required parameters: taskType and description\","
        },
        {
          "line": 733,
          "comment": "},"
        },
        {
          "line": 734,
          "comment": "],"
        },
        {
          "line": 735,
          "comment": "};"
        },
        {
          "line": 736,
          "comment": "}"
        },
        {
          "line": 738,
          "comment": "if (!isRunning) {"
        },
        {
          "line": 739,
          "comment": "return {"
        },
        {
          "line": 740,
          "comment": "content: ["
        },
        {
          "line": 741,
          "comment": "{"
        },
        {
          "line": 742,
          "comment": "type: \"text\","
        },
        {
          "line": 743,
          "comment": "text: \"Arbiter is not running. Start it first with start_arbiter.\","
        },
        {
          "line": 744,
          "comment": "},"
        },
        {
          "line": 745,
          "comment": "],"
        },
        {
          "line": 746,
          "comment": "};"
        },
        {
          "line": 747,
          "comment": "}"
        },
        {
          "line": 749,
          "comment": "const taskId = `task-${Date.now()}-${Math.random()"
        },
        {
          "line": 750,
          "comment": ".toString(36)"
        },
        {
          "line": 751,
          "comment": ".substring(2, 9)}`;"
        },
        {
          "line": 753,
          "comment": "// Create active task"
        },
        {
          "line": 754,
          "comment": "const task: ActiveTask = {"
        },
        {
          "line": 755,
          "comment": "id: taskId,"
        },
        {
          "line": 756,
          "comment": "type: taskType,"
        },
        {
          "line": 757,
          "comment": "description,"
        },
        {
          "line": 758,
          "comment": "status: \"planning\","
        },
        {
          "line": 759,
          "comment": "startedAt: new Date(),"
        },
        {
          "line": 760,
          "comment": "progress: [],"
        },
        {
          "line": 761,
          "comment": "};"
        },
        {
          "line": 763,
          "comment": "activeTasks.set(taskId, task);"
        },
        {
          "line": 765,
          "comment": "logger.decide(\"Received autonomous task via MCP\", {"
        },
        {
          "line": 766,
          "comment": "taskId,"
        },
        {
          "line": 767,
          "comment": "taskType,"
        },
        {
          "line": 768,
          "comment": "description,"
        },
        {
          "line": 769,
          "comment": "priority,"
        },
        {
          "line": 770,
          "comment": "timestamp: new Date().toISOString(),"
        },
        {
          "line": 771,
          "comment": "});"
        },
        {
          "line": 773,
          "comment": "// Start autonomous execution in background"
        },
        {
          "line": 774,
          "comment": "this.startAutonomousExecution(task);"
        },
        {
          "line": 776,
          "comment": "return {"
        },
        {
          "line": 777,
          "comment": "content: ["
        },
        {
          "line": 778,
          "comment": "{"
        },
        {
          "line": 779,
          "comment": "type: \"text\","
        },
        {
          "line": 780,
          "comment": "text: `Task accepted for autonomous execution:"
        },
        {
          "line": 781,
          "comment": "Task ID: ${taskId}"
        },
        {
          "line": 782,
          "comment": "Type: ${taskType}"
        },
        {
          "line": 783,
          "comment": "Description: ${description}"
        },
        {
          "line": 784,
          "comment": "Priority: ${priority}"
        },
        {
          "line": 785,
          "comment": "Status: Starting autonomous execution..."
        },
        {
          "line": 787,
          "comment": "The arbiter will now work on this task independently. Use get_progress or chat_with_arbiter to monitor progress.`,"
        },
        {
          "line": 788,
          "comment": "},"
        },
        {
          "line": 789,
          "comment": "],"
        },
        {
          "line": 790,
          "comment": "};"
        },
        {
          "line": 791,
          "comment": "}"
        },
        {
          "line": 793,
          "comment": "private async handleChatWithArbiter(args: any) {"
        },
        {
          "line": 794,
          "comment": "const { message, taskId } = args;"
        },
        {
          "line": 796,
          "comment": "if (!message) {"
        },
        {
          "line": 797,
          "comment": "return {"
        },
        {
          "line": 798,
          "comment": "content: ["
        },
        {
          "line": 799,
          "comment": "{"
        },
        {
          "line": 800,
          "comment": "type: \"text\","
        },
        {
          "line": 801,
          "comment": "text: \"Missing required parameter: message\","
        },
        {
          "line": 802,
          "comment": "},"
        },
        {
          "line": 803,
          "comment": "],"
        },
        {
          "line": 804,
          "comment": "};"
        },
        {
          "line": 805,
          "comment": "}"
        },
        {
          "line": 807,
          "comment": "if (!isRunning) {"
        },
        {
          "line": 808,
          "comment": "return {"
        },
        {
          "line": 809,
          "comment": "content: ["
        },
        {
          "line": 810,
          "comment": "{"
        },
        {
          "line": 811,
          "comment": "type: \"text\","
        },
        {
          "line": 812,
          "comment": "text: \"Arbiter is not running. Start it first with start_arbiter.\","
        },
        {
          "line": 813,
          "comment": "},"
        },
        {
          "line": 814,
          "comment": "],"
        },
        {
          "line": 815,
          "comment": "};"
        },
        {
          "line": 816,
          "comment": "}"
        },
        {
          "line": 818,
          "comment": "logger.observe(\"Received chat message\", { message, taskId });"
        },
        {
          "line": 820,
          "comment": "// Generate arbiter response based on current state and message"
        },
        {
          "line": 821,
          "comment": "let response ="
        },
        {
          "line": 822,
          "comment": "\"I'm the V2 Arbiter, ready to help with autonomous task execution. \";"
        },
        {
          "line": 824,
          "comment": "if (taskId) {"
        },
        {
          "line": 825,
          "comment": "const task = activeTasks.get(taskId);"
        },
        {
          "line": 826,
          "comment": "if (task) {"
        },
        {
          "line": 827,
          "comment": "response += `Regarding task ${taskId} (${task.type}): ${task.description}. `;"
        },
        {
          "line": 828,
          "comment": "response += `Current status: ${task.status}. `;"
        },
        {
          "line": 829,
          "comment": "response += `Progress: ${task.progress.join(\", \")}. `;"
        },
        {
          "line": 831,
          "comment": "if (task.result) {"
        },
        {
          "line": 832,
          "comment": "response += `Result: ${JSON.stringify(task.result)}. `;"
        },
        {
          "line": 833,
          "comment": "}"
        },
        {
          "line": 834,
          "comment": "} else {"
        },
        {
          "line": 835,
          "comment": "response += `I don't have a task with ID ${taskId}. `;"
        },
        {
          "line": 836,
          "comment": "}"
        },
        {
          "line": 837,
          "comment": "}"
        },
        {
          "line": 839,
          "comment": "// Handle specific questions"
        },
        {
          "line": 840,
          "comment": "if (message.toLowerCase().includes(\"what are you doing\")) {"
        },
        {
          "line": 841,
          "comment": "const activeCount = activeTasks.size;"
        },
        {
          "line": 842,
          "comment": "response += `I'm currently working on ${activeCount} active task${"
        },
        {
          "line": 843,
          "comment": "activeCount !== 1 ? \"s\" : \"\""
        },
        {
          "line": 844,
          "comment": "}. `;"
        },
        {
          "line": 845,
          "comment": "if (activeCount > 0) {"
        },
        {
          "line": 846,
          "comment": "const taskList = Array.from(activeTasks.values())"
        },
        {
          "line": 847,
          "comment": ".map((t) => `${t.id} (${t.type})`)"
        },
        {
          "line": 848,
          "comment": ".join(\", \");"
        },
        {
          "line": 849,
          "comment": "response += `Active tasks: ${taskList}. `;"
        },
        {
          "line": 850,
          "comment": "}"
        },
        {
          "line": 851,
          "comment": "}"
        },
        {
          "line": 853,
          "comment": "if (message.toLowerCase().includes(\"status\")) {"
        },
        {
          "line": 854,
          "comment": "response += `System status: Running with ${activeTasks.size} active tasks. `;"
        },
        {
          "line": 855,
          "comment": "}"
        },
        {
          "line": 857,
          "comment": "if ("
        },
        {
          "line": 858,
          "comment": "message.toLowerCase().includes(\"thinking\") ||"
        },
        {
          "line": 859,
          "comment": "message.toLowerCase().includes(\"reasoning\")"
        },
        {
          "line": 860,
          "comment": ") {"
        },
        {
          "line": 861,
          "comment": "response +="
        },
        {
          "line": 862,
          "comment": "\"I'm using chain-of-thought reasoning to analyze tasks, plan execution, make decisions, execute steps, and verify results. \";"
        },
        {
          "line": 863,
          "comment": "}"
        },
        {
          "line": 865,
          "comment": "if (message.toLowerCase().includes(\"help\")) {"
        },
        {
          "line": 866,
          "comment": "response +="
        },
        {
          "line": 867,
          "comment": "\"I can execute autonomous tasks, monitor progress, provide status updates, and answer questions about my current work. Try asking 'what are you doing?' or 'what's your status?'\";"
        },
        {
          "line": 868,
          "comment": "}"
        },
        {
          "line": 870,
          "comment": "logger.decide(\"Generated chat response\", { message, response });"
        },
        {
          "line": 872,
          "comment": "return {"
        },
        {
          "line": 873,
          "comment": "content: ["
        },
        {
          "line": 874,
          "comment": "{"
        },
        {
          "line": 875,
          "comment": "type: \"text\","
        },
        {
          "line": 876,
          "comment": "text: response,"
        },
        {
          "line": 877,
          "comment": "},"
        },
        {
          "line": 878,
          "comment": "],"
        },
        {
          "line": 879,
          "comment": "};"
        },
        {
          "line": 880,
          "comment": "}"
        },
        {
          "line": 882,
          "comment": "private async handleGetStatus(args: any) {"
        },
        {
          "line": 883,
          "comment": "const statusData = await this.getStatusData();"
        },
        {
          "line": 885,
          "comment": "return {"
        },
        {
          "line": 886,
          "comment": "content: ["
        },
        {
          "line": 887,
          "comment": "{"
        },
        {
          "line": 888,
          "comment": "type: \"text\","
        },
        {
          "line": 889,
          "comment": "text: `Arbiter Status:"
        },
        {
          "line": 890,
          "comment": "Running: ${statusData.isRunning}"
        },
        {
          "line": 891,
          "comment": "Database: ${statusData.databaseHealthy ? \"Healthy\" : \"Unhealthy\"}"
        },
        {
          "line": 892,
          "comment": "Active Tasks: ${statusData.activeTasks}"
        },
        {
          "line": 893,
          "comment": "Completed Tasks: ${statusData.completedTasks}"
        },
        {
          "line": 894,
          "comment": "Last Activity: ${statusData.lastActivity || \"None\"}`,"
        },
        {
          "line": 895,
          "comment": "},"
        },
        {
          "line": 896,
          "comment": "],"
        },
        {
          "line": 897,
          "comment": "};"
        },
        {
          "line": 898,
          "comment": "}"
        },
        {
          "line": 900,
          "comment": "private async handleGetProgress(args: any) {"
        },
        {
          "line": 901,
          "comment": "const { taskId } = args;"
        },
        {
          "line": 903,
          "comment": "if (taskId) {"
        },
        {
          "line": 904,
          "comment": "// Get specific task progress"
        },
        {
          "line": 905,
          "comment": "const task = activeTasks.get(taskId);"
        },
        {
          "line": 906,
          "comment": "if (!task) {"
        },
        {
          "line": 907,
          "comment": "return {"
        },
        {
          "line": 908,
          "comment": "content: ["
        },
        {
          "line": 909,
          "comment": "{"
        },
        {
          "line": 910,
          "comment": "type: \"text\","
        },
        {
          "line": 911,
          "comment": "text: `Task ${taskId} not found.`,"
        },
        {
          "line": 912,
          "comment": "},"
        },
        {
          "line": 913,
          "comment": "],"
        },
        {
          "line": 914,
          "comment": "};"
        },
        {
          "line": 915,
          "comment": "}"
        },
        {
          "line": 917,
          "comment": "const progressText ="
        },
        {
          "line": 918,
          "comment": "task.progress.length > 0"
        },
        {
          "line": 919,
          "comment": "? task.progress.map((step, i) => `${i + 1}. ${step}`).join(\"\\n\")"
        },
        {
          "line": 920,
          "comment": ": \"No progress steps recorded yet\";"
        },
        {
          "line": 922,
          "comment": "return {"
        },
        {
          "line": 923,
          "comment": "content: ["
        },
        {
          "line": 924,
          "comment": "{"
        },
        {
          "line": 925,
          "comment": "type: \"text\","
        },
        {
          "line": 926,
          "comment": "text: `Progress for task ${taskId}:"
        },
        {
          "line": 927,
          "comment": "Type: ${task.type}"
        },
        {
          "line": 928,
          "comment": "Description: ${task.description}"
        },
        {
          "line": 929,
          "comment": "Status: ${task.status}"
        },
        {
          "line": 930,
          "comment": "Started: ${task.startedAt.toISOString()}"
        },
        {
          "line": 932,
          "comment": "Progress Steps:"
        },
        {
          "line": 933,
          "comment": "${progressText}"
        },
        {
          "line": 935,
          "comment": "${"
        },
        {
          "line": 936,
          "comment": "task.result"
        },
        {
          "line": 937,
          "comment": "? `Result: ${JSON.stringify(task.result, null, 2)}`"
        },
        {
          "line": 938,
          "comment": ": \"Result: Not available yet\""
        },
        {
          "line": 939,
          "comment": "}`,"
        },
        {
          "line": 940,
          "comment": "},"
        },
        {
          "line": 941,
          "comment": "],"
        },
        {
          "line": 942,
          "comment": "};"
        },
        {
          "line": 943,
          "comment": "} else {"
        },
        {
          "line": 944,
          "comment": "// Get overall progress"
        },
        {
          "line": 945,
          "comment": "const totalTasks = activeTasks.size;"
        },
        {
          "line": 946,
          "comment": "const activeTasksCount = Array.from(activeTasks.values()).filter("
        },
        {
          "line": 947,
          "comment": "(t) => t.status === \"planning\" || t.status === \"executing\""
        },
        {
          "line": 948,
          "comment": ").length;"
        },
        {
          "line": 949,
          "comment": "const completedTasksCount = Array.from(activeTasks.values()).filter("
        },
        {
          "line": 950,
          "comment": "(t) => t.status === \"completed\""
        },
        {
          "line": 951,
          "comment": ").length;"
        },
        {
          "line": 952,
          "comment": "const failedTasksCount = Array.from(activeTasks.values()).filter("
        },
        {
          "line": 953,
          "comment": "(t) => t.status === \"failed\""
        },
        {
          "line": 954,
          "comment": ").length;"
        },
        {
          "line": 956,
          "comment": "const successRate ="
        },
        {
          "line": 957,
          "comment": "totalTasks > 0 ? (completedTasksCount / totalTasks) * 100 : 100;"
        },
        {
          "line": 959,
          "comment": "return {"
        },
        {
          "line": 960,
          "comment": "content: ["
        },
        {
          "line": 961,
          "comment": "{"
        },
        {
          "line": 962,
          "comment": "type: \"text\","
        },
        {
          "line": 963,
          "comment": "text: `Overall Arbiter Progress:"
        },
        {
          "line": 964,
          "comment": "Total Tasks: ${totalTasks}"
        },
        {
          "line": 965,
          "comment": "Active Tasks: ${activeTasksCount}"
        },
        {
          "line": 966,
          "comment": "Completed Tasks: ${completedTasksCount}"
        },
        {
          "line": 967,
          "comment": "Failed Tasks: ${failedTasksCount}"
        },
        {
          "line": 968,
          "comment": "Success Rate: ${successRate.toFixed(1)}%"
        },
        {
          "line": 970,
          "comment": "${"
        },
        {
          "line": 971,
          "comment": "totalTasks > 0"
        },
        {
          "line": 972,
          "comment": "? \"Recent Tasks:\\n\" +"
        },
        {
          "line": 973,
          "comment": "Array.from(activeTasks.values())"
        },
        {
          "line": 974,
          "comment": ".sort((a, b) => b.startedAt.getTime() - a.startedAt.getTime())"
        },
        {
          "line": 975,
          "comment": ".slice(0, 3)"
        },
        {
          "line": 976,
          "comment": ".map((t) => `- ${t.id}: ${t.type} (${t.status})`)"
        },
        {
          "line": 977,
          "comment": ".join(\"\\n\")"
        },
        {
          "line": 978,
          "comment": ": \"No tasks yet\""
        },
        {
          "line": 979,
          "comment": "}`,"
        },
        {
          "line": 980,
          "comment": "},"
        },
        {
          "line": 981,
          "comment": "],"
        },
        {
          "line": 982,
          "comment": "};"
        },
        {
          "line": 983,
          "comment": "}"
        },
        {
          "line": 984,
          "comment": "}"
        },
        {
          "line": 986,
          "comment": "private async handleGetCOTLogs(args: any) {"
        },
        {
          "line": 987,
          "comment": "const { limit = 10, level } = args;"
        },
        {
          "line": 988,
          "comment": "const logsData = await this.getCOTLogsData();"
        },
        {
          "line": 990,
          "comment": "let filteredLogs = logsData.logs;"
        },
        {
          "line": 991,
          "comment": "if (level) {"
        },
        {
          "line": 992,
          "comment": "filteredLogs = filteredLogs.filter((log: any) => log.level === level);"
        },
        {
          "line": 993,
          "comment": "}"
        },
        {
          "line": 995,
          "comment": "const recentLogs = filteredLogs.slice(-limit);"
        },
        {
          "line": 997,
          "comment": "const logText = recentLogs"
        },
        {
          "line": 998,
          "comment": ".map("
        },
        {
          "line": 999,
          "comment": "(log: any) =>"
        },
        {
          "line": 1000,
          "comment": "`[${log.timestamp}] COT [${"
        },
        {
          "line": 1001,
          "comment": "log.component"
        },
        {
          "line": 1002,
          "comment": "}] [${log.level.toUpperCase()}] ${log.step}`"
        },
        {
          "line": 1003,
          "comment": ")"
        },
        {
          "line": 1004,
          "comment": ".join(\"\\n\");"
        },
        {
          "line": 1006,
          "comment": "return {"
        },
        {
          "line": 1007,
          "comment": "content: ["
        },
        {
          "line": 1008,
          "comment": "{"
        },
        {
          "line": 1009,
          "comment": "type: \"text\","
        },
        {
          "line": 1010,
          "comment": "text: `Recent Chain-of-Thought Logs (${recentLogs.length} entries):\\n\\n${logText}`,"
        },
        {
          "line": 1011,
          "comment": "},"
        },
        {
          "line": 1012,
          "comment": "],"
        },
        {
          "line": 1013,
          "comment": "};"
        },
        {
          "line": 1014,
          "comment": "}"
        },
        {
          "line": 1016,
          "comment": "private async handleGetMetrics(args: any) {"
        },
        {
          "line": 1017,
          "comment": "const metricsData = await this.getMetricsData();"
        },
        {
          "line": 1019,
          "comment": "return {"
        },
        {
          "line": 1020,
          "comment": "content: ["
        },
        {
          "line": 1021,
          "comment": "{"
        },
        {
          "line": 1022,
          "comment": "type: \"text\","
        },
        {
          "line": 1023,
          "comment": "text: `Arbiter Performance Metrics:"
        },
        {
          "line": 1024,
          "comment": "Tasks Executed: ${metricsData.tasksExecuted}"
        },
        {
          "line": 1025,
          "comment": "Success Rate: ${(metricsData.successRate * 100).toFixed(1)}%"
        },
        {
          "line": 1026,
          "comment": "Average Execution Time: ${metricsData.avgExecutionTime}ms"
        },
        {
          "line": 1027,
          "comment": "Chain-of-Thought Steps: ${metricsData.cotSteps}"
        },
        {
          "line": 1028,
          "comment": "Reasoning Quality Score: ${(metricsData.reasoningQuality * 100).toFixed(1)}%"
        },
        {
          "line": 1029,
          "comment": "Uptime: ${metricsData.uptimeMinutes} minutes`,"
        },
        {
          "line": 1030,
          "comment": "},"
        },
        {
          "line": 1031,
          "comment": "],"
        },
        {
          "line": 1032,
          "comment": "};"
        },
        {
          "line": 1033,
          "comment": "}"
        },
        {
          "line": 1035,
          "comment": "private async handleExecuteCommand(args: any) {"
        },
        {
          "line": 1036,
          "comment": "const { command } = args;"
        },
        {
          "line": 1038,
          "comment": "if (!command) {"
        },
        {
          "line": 1039,
          "comment": "return {"
        },
        {
          "line": 1040,
          "comment": "content: ["
        },
        {
          "line": 1041,
          "comment": "{"
        },
        {
          "line": 1042,
          "comment": "type: \"text\","
        },
        {
          "line": 1043,
          "comment": "text: \"Missing required parameter: command\","
        },
        {
          "line": 1044,
          "comment": "},"
        },
        {
          "line": 1045,
          "comment": "],"
        },
        {
          "line": 1046,
          "comment": "};"
        },
        {
          "line": 1047,
          "comment": "}"
        },
        {
          "line": 1049,
          "comment": "if (!terminalManager) {"
        },
        {
          "line": 1050,
          "comment": "return {"
        },
        {
          "line": 1051,
          "comment": "content: ["
        },
        {
          "line": 1052,
          "comment": "{"
        },
        {
          "line": 1053,
          "comment": "type: \"text\","
        },
        {
          "line": 1054,
          "comment": "text: \"Terminal manager not available\","
        },
        {
          "line": 1055,
          "comment": "},"
        },
        {
          "line": 1056,
          "comment": "],"
        },
        {
          "line": 1057,
          "comment": "};"
        },
        {
          "line": 1058,
          "comment": "}"
        },
        {
          "line": 1060,
          "comment": "logger.execute(`Executing command via MCP: ${command}`);"
        },
        {
          "line": 1062,
          "comment": "try {"
        },
        {
          "line": 1063,
          "comment": "// Create a terminal session for command execution"
        },
        {
          "line": 1064,
          "comment": "const session = await terminalManager.createSession("
        },
        {
          "line": 1065,
          "comment": "\"mcp-test\","
        },
        {
          "line": 1066,
          "comment": "\"arbiter-agent\","
        },
        {
          "line": 1067,
          "comment": "{"
        },
        {
          "line": 1068,
          "comment": "workingDirectory: process.cwd(),"
        },
        {
          "line": 1069,
          "comment": "}"
        },
        {
          "line": 1070,
          "comment": ");"
        },
        {
          "line": 1072,
          "comment": "logger.observe(\"Created terminal session for command execution\", {"
        },
        {
          "line": 1073,
          "comment": "sessionId: session.id,"
        },
        {
          "line": 1074,
          "comment": "command: command,"
        },
        {
          "line": 1075,
          "comment": "});"
        },
        {
          "line": 1077,
          "comment": "// Execute the command"
        },
        {
          "line": 1078,
          "comment": "const result = await terminalManager.executeCommand({"
        },
        {
          "line": 1079,
          "comment": "sessionId: session.id,"
        },
        {
          "line": 1080,
          "comment": "command: command,"
        },
        {
          "line": 1081,
          "comment": "timeout: 10000,"
        },
        {
          "line": 1082,
          "comment": "});"
        },
        {
          "line": 1084,
          "comment": "// Close the session"
        },
        {
          "line": 1085,
          "comment": "await terminalManager.closeSession(session.id);"
        },
        {
          "line": 1087,
          "comment": "logger.verify(\"Command execution completed\", {"
        },
        {
          "line": 1088,
          "comment": "command,"
        },
        {
          "line": 1089,
          "comment": "success: result.success,"
        },
        {
          "line": 1090,
          "comment": "exitCode: result.exitCode,"
        },
        {
          "line": 1091,
          "comment": "sessionId: session.id,"
        },
        {
          "line": 1092,
          "comment": "});"
        },
        {
          "line": 1094,
          "comment": "return {"
        },
        {
          "line": 1095,
          "comment": "content: ["
        },
        {
          "line": 1096,
          "comment": "{"
        },
        {
          "line": 1097,
          "comment": "type: \"text\","
        },
        {
          "line": 1098,
          "comment": "text: `Command executed:"
        },
        {
          "line": 1099,
          "comment": "Success: ${result.success}"
        },
        {
          "line": 1100,
          "comment": "Exit Code: ${result.exitCode}"
        },
        {
          "line": 1101,
          "comment": "Stdout: ${result.stdout}"
        },
        {
          "line": 1102,
          "comment": "Stderr: ${result.stderr}"
        },
        {
          "line": 1103,
          "comment": "Duration: ${result.duration}ms`,"
        },
        {
          "line": 1104,
          "comment": "},"
        },
        {
          "line": 1105,
          "comment": "],"
        },
        {
          "line": 1106,
          "comment": "};"
        },
        {
          "line": 1107,
          "comment": "} catch (error) {"
        },
        {
          "line": 1108,
          "comment": "logger.error(\"Command execution failed\", error);"
        },
        {
          "line": 1109,
          "comment": "return {"
        },
        {
          "line": 1110,
          "comment": "content: ["
        },
        {
          "line": 1111,
          "comment": "{"
        },
        {
          "line": 1112,
          "comment": "type: \"text\","
        },
        {
          "line": 1113,
          "comment": "text: `Command execution failed: ${"
        },
        {
          "line": 1114,
          "comment": "error instanceof Error ? error.message : \"Unknown error\""
        },
        {
          "line": 1115,
          "comment": "}`,"
        },
        {
          "line": 1116,
          "comment": "},"
        },
        {
          "line": 1117,
          "comment": "],"
        },
        {
          "line": 1118,
          "comment": "};"
        },
        {
          "line": 1119,
          "comment": "}"
        },
        {
          "line": 1120,
          "comment": "}"
        },
        {
          "line": 1122,
          "comment": "// Data Providers"
        },
        {
          "line": 1124,
          "comment": "private async getStatusData() {"
        },
        {
          "line": 1125,
          "comment": "const activeCount = Array.from(activeTasks.values()).filter("
        },
        {
          "line": 1126,
          "comment": "(t) => t.status !== \"completed\" && t.status !== \"failed\""
        },
        {
          "line": 1127,
          "comment": ").length;"
        },
        {
          "line": 1128,
          "comment": "const completedCount = Array.from(activeTasks.values()).filter("
        },
        {
          "line": 1129,
          "comment": "(t) => t.status === \"completed\""
        },
        {
          "line": 1130,
          "comment": ").length;"
        },
        {
          "line": 1132,
          "comment": "// Find most recent activity"
        },
        {
          "line": 1133,
          "comment": "const allTasks = Array.from(activeTasks.values());"
        },
        {
          "line": 1134,
          "comment": "const lastActivity ="
        },
        {
          "line": 1135,
          "comment": "allTasks.length > 0"
        },
        {
          "line": 1136,
          "comment": "? allTasks"
        },
        {
          "line": 1137,
          "comment": ".sort((a, b) => b.startedAt.getTime() - a.startedAt.getTime())[0]"
        },
        {
          "line": 1138,
          "comment": ".startedAt.toISOString()"
        },
        {
          "line": 1139,
          "comment": ": null;"
        },
        {
          "line": 1141,
          "comment": "return {"
        },
        {
          "line": 1142,
          "comment": "isRunning,"
        },
        {
          "line": 1143,
          "comment": "databaseHealthy: isRunning"
        },
        {
          "line": 1144,
          "comment": "? await ConnectionPoolManager.getInstance()"
        },
        {
          "line": 1145,
          "comment": ".healthCheck()"
        },
        {
          "line": 1146,
          "comment": ".catch(() => false)"
        },
        {
          "line": 1147,
          "comment": ": false,"
        },
        {
          "line": 1148,
          "comment": "activeTasks: activeCount,"
        },
        {
          "line": 1149,
          "comment": "completedTasks: completedCount,"
        },
        {
          "line": 1150,
          "comment": "lastActivity,"
        },
        {
          "line": 1151,
          "comment": "version: \"2.0.0\","
        },
        {
          "line": 1152,
          "comment": "uptime: process.uptime(),"
        },
        {
          "line": 1153,
          "comment": "};"
        },
        {
          "line": 1154,
          "comment": "}"
        },
        {
          "line": 1156,
          "comment": "private async getCOTLogsData() {"
        },
        {
          "line": 1157,
          "comment": "// In a real implementation, this would collect logs from the logger"
        },
        {
          "line": 1158,
          "comment": "// For now, return mock data"
        },
        {
          "line": 1159,
          "comment": "return {"
        },
        {
          "line": 1160,
          "comment": "logs: ["
        },
        {
          "line": 1161,
          "comment": "{"
        },
        {
          "line": 1162,
          "comment": "timestamp: new Date().toISOString(),"
        },
        {
          "line": 1163,
          "comment": "component: \"ArbiterMCP\","
        },
        {
          "line": 1164,
          "comment": "level: \"observation\","
        },
        {
          "line": 1165,
          "comment": "step: \"MCP server initialized\","
        },
        {
          "line": 1166,
          "comment": "},"
        },
        {
          "line": 1167,
          "comment": "{"
        },
        {
          "line": 1168,
          "comment": "timestamp: new Date().toISOString(),"
        },
        {
          "line": 1169,
          "comment": "component: \"ArbiterMCP\","
        },
        {
          "line": 1170,
          "comment": "level: \"analysis\","
        },
        {
          "line": 1171,
          "comment": "step: \"Analyzing system capabilities\","
        },
        {
          "line": 1172,
          "comment": "},"
        },
        {
          "line": 1173,
          "comment": "],"
        },
        {
          "line": 1174,
          "comment": "totalEntries: 2,"
        },
        {
          "line": 1175,
          "comment": "retentionHours: 24,"
        },
        {
          "line": 1176,
          "comment": "};"
        },
        {
          "line": 1177,
          "comment": "}"
        },
        {
          "line": 1179,
          "comment": "private async getMetricsData() {"
        },
        {
          "line": 1180,
          "comment": "return {"
        },
        {
          "line": 1181,
          "comment": "tasksExecuted: 0,"
        },
        {
          "line": 1182,
          "comment": "successRate: 1.0,"
        },
        {
          "line": 1183,
          "comment": "avgExecutionTime: 0,"
        },
        {
          "line": 1184,
          "comment": "cotSteps: 0,"
        },
        {
          "line": 1185,
          "comment": "reasoningQuality: 0.85,"
        },
        {
          "line": 1186,
          "comment": "uptimeMinutes: Math.floor(process.uptime() / 60),"
        },
        {
          "line": 1187,
          "comment": "memoryUsage: process.memoryUsage(),"
        },
        {
          "line": 1188,
          "comment": "};"
        },
        {
          "line": 1189,
          "comment": "}"
        },
        {
          "line": 1190,
          "comment": "}"
        },
        {
          "line": 1192,
          "comment": "// List available tools"
        },
        {
          "line": 1193,
          "comment": "const server = new ArbiterMCPServer();"
        },
        {
          "line": 1195,
          "comment": "server.setRequestHandler(ListToolsRequestSchema, async () => {"
        },
        {
          "line": 1196,
          "comment": "return {"
        },
        {
          "line": 1197,
          "comment": "tools: ["
        },
        {
          "line": 1198,
          "comment": "{"
        },
        {
          "line": 1199,
          "comment": "name: \"start_arbiter\","
        },
        {
          "line": 1200,
          "comment": "description: \"Initialize and start the autonomous arbiter system\","
        },
        {
          "line": 1201,
          "comment": "inputSchema: {"
        },
        {
          "line": 1202,
          "comment": "type: \"object\","
        },
        {
          "line": 1203,
          "comment": "properties: {},"
        },
        {
          "line": 1204,
          "comment": "},"
        },
        {
          "line": 1205,
          "comment": "},"
        },
        {
          "line": 1206,
          "comment": "{"
        },
        {
          "line": 1207,
          "comment": "name: \"stop_arbiter\","
        },
        {
          "line": 1208,
          "comment": "description: \"Stop the arbiter system and clean up resources\","
        },
        {
          "line": 1209,
          "comment": "inputSchema: {"
        },
        {
          "line": 1210,
          "comment": "type: \"object\","
        },
        {
          "line": 1211,
          "comment": "properties: {},"
        },
        {
          "line": 1212,
          "comment": "},"
        },
        {
          "line": 1213,
          "comment": "},"
        },
        {
          "line": 1214,
          "comment": "{"
        },
        {
          "line": 1215,
          "comment": "name: \"give_task\","
        },
        {
          "line": 1216,
          "comment": "description: \"Give the arbiter a task to execute autonomously\","
        },
        {
          "line": 1217,
          "comment": "inputSchema: {"
        },
        {
          "line": 1218,
          "comment": "type: \"object\","
        },
        {
          "line": 1219,
          "comment": "properties: {"
        },
        {
          "line": 1220,
          "comment": "taskType: {"
        },
        {
          "line": 1221,
          "comment": "type: \"string\","
        },
        {
          "line": 1222,
          "comment": "description:"
        },
        {
          "line": 1223,
          "comment": "\"Type of task (e.g., 'code_generation', 'file_operation')\","
        },
        {
          "line": 1224,
          "comment": "},"
        },
        {
          "line": 1225,
          "comment": "description: {"
        },
        {
          "line": 1226,
          "comment": "type: \"string\","
        },
        {
          "line": 1227,
          "comment": "description: \"Detailed description of what to accomplish\","
        },
        {
          "line": 1228,
          "comment": "},"
        },
        {
          "line": 1229,
          "comment": "priority: {"
        },
        {
          "line": 1230,
          "comment": "type: \"string\","
        },
        {
          "line": 1231,
          "comment": "enum: [\"low\", \"medium\", \"high\"],"
        },
        {
          "line": 1232,
          "comment": "description: \"Task priority level\","
        },
        {
          "line": 1233,
          "comment": "default: \"medium\","
        },
        {
          "line": 1234,
          "comment": "},"
        },
        {
          "line": 1235,
          "comment": "},"
        },
        {
          "line": 1236,
          "comment": "required: [\"taskType\", \"description\"],"
        },
        {
          "line": 1237,
          "comment": "},"
        },
        {
          "line": 1238,
          "comment": "},"
        },
        {
          "line": 1239,
          "comment": "{"
        },
        {
          "line": 1240,
          "comment": "name: \"get_status\","
        },
        {
          "line": 1241,
          "comment": "description: \"Get current status of the arbiter system\","
        },
        {
          "line": 1242,
          "comment": "inputSchema: {"
        },
        {
          "line": 1243,
          "comment": "type: \"object\","
        },
        {
          "line": 1244,
          "comment": "properties: {},"
        },
        {
          "line": 1245,
          "comment": "},"
        },
        {
          "line": 1246,
          "comment": "},"
        },
        {
          "line": 1247,
          "comment": "{"
        },
        {
          "line": 1248,
          "comment": "name: \"get_progress\","
        },
        {
          "line": 1249,
          "comment": "description: \"Get progress on tasks or overall system progress\","
        },
        {
          "line": 1250,
          "comment": "inputSchema: {"
        },
        {
          "line": 1251,
          "comment": "type: \"object\","
        },
        {
          "line": 1252,
          "comment": "properties: {"
        },
        {
          "line": 1253,
          "comment": "taskId: {"
        },
        {
          "line": 1254,
          "comment": "type: \"string\","
        },
        {
          "line": 1255,
          "comment": "description: \"Specific task ID to check progress for\","
        },
        {
          "line": 1256,
          "comment": "},"
        },
        {
          "line": 1257,
          "comment": "},"
        },
        {
          "line": 1258,
          "comment": "},"
        },
        {
          "line": 1259,
          "comment": "},"
        },
        {
          "line": 1260,
          "comment": "{"
        },
        {
          "line": 1261,
          "comment": "name: \"get_cot_logs\","
        },
        {
          "line": 1262,
          "comment": "description: \"Retrieve chain-of-thought reasoning logs\","
        },
        {
          "line": 1263,
          "comment": "inputSchema: {"
        },
        {
          "line": 1264,
          "comment": "type: \"object\","
        },
        {
          "line": 1265,
          "comment": "properties: {"
        },
        {
          "line": 1266,
          "comment": "limit: {"
        },
        {
          "line": 1267,
          "comment": "type: \"number\","
        },
        {
          "line": 1268,
          "comment": "description: \"Maximum number of log entries to return\","
        },
        {
          "line": 1269,
          "comment": "default: 10,"
        },
        {
          "line": 1270,
          "comment": "},"
        },
        {
          "line": 1271,
          "comment": "level: {"
        },
        {
          "line": 1272,
          "comment": "type: \"string\","
        },
        {
          "line": 1273,
          "comment": "enum: ["
        },
        {
          "line": 1274,
          "comment": "\"observation\","
        },
        {
          "line": 1275,
          "comment": "\"analysis\","
        },
        {
          "line": 1276,
          "comment": "\"planning\","
        },
        {
          "line": 1277,
          "comment": "\"decision\","
        },
        {
          "line": 1278,
          "comment": "\"execution\","
        },
        {
          "line": 1279,
          "comment": "\"verification\","
        },
        {
          "line": 1280,
          "comment": "],"
        },
        {
          "line": 1281,
          "comment": "description: \"Filter logs by reasoning level\","
        },
        {
          "line": 1282,
          "comment": "},"
        },
        {
          "line": 1283,
          "comment": "},"
        },
        {
          "line": 1284,
          "comment": "},"
        },
        {
          "line": 1285,
          "comment": "},"
        },
        {
          "line": 1286,
          "comment": "{"
        },
        {
          "line": 1287,
          "comment": "name: \"get_metrics\","
        },
        {
          "line": 1288,
          "comment": "description: \"Get performance metrics and statistics\","
        },
        {
          "line": 1289,
          "comment": "inputSchema: {"
        },
        {
          "line": 1290,
          "comment": "type: \"object\","
        },
        {
          "line": 1291,
          "comment": "properties: {},"
        },
        {
          "line": 1292,
          "comment": "},"
        },
        {
          "line": 1293,
          "comment": "},"
        },
        {
          "line": 1294,
          "comment": "{"
        },
        {
          "line": 1295,
          "comment": "name: \"execute_command\","
        },
        {
          "line": 1296,
          "comment": "description:"
        },
        {
          "line": 1297,
          "comment": "\"Execute a simple command (for testing arbiter capabilities)\","
        },
        {
          "line": 1298,
          "comment": "inputSchema: {"
        },
        {
          "line": 1299,
          "comment": "type: \"object\","
        },
        {
          "line": 1300,
          "comment": "properties: {"
        },
        {
          "line": 1301,
          "comment": "command: {"
        },
        {
          "line": 1302,
          "comment": "type: \"string\","
        },
        {
          "line": 1303,
          "comment": "description: \"Command to execute\","
        },
        {
          "line": 1304,
          "comment": "},"
        },
        {
          "line": 1305,
          "comment": "},"
        },
        {
          "line": 1306,
          "comment": "required: [\"command\"],"
        },
        {
          "line": 1307,
          "comment": "},"
        },
        {
          "line": 1308,
          "comment": "},"
        },
        {
          "line": 1309,
          "comment": "{"
        },
        {
          "line": 1310,
          "comment": "name: \"chat_with_arbiter\","
        },
        {
          "line": 1311,
          "comment": "description:"
        },
        {
          "line": 1312,
          "comment": "\"Chat with the arbiter and ask questions about its current work and reasoning\","
        },
        {
          "line": 1313,
          "comment": "inputSchema: {"
        },
        {
          "line": 1314,
          "comment": "type: \"object\","
        },
        {
          "line": 1315,
          "comment": "properties: {"
        },
        {
          "line": 1316,
          "comment": "message: {"
        },
        {
          "line": 1317,
          "comment": "type: \"string\","
        },
        {
          "line": 1318,
          "comment": "description: \"Your message or question for the arbiter\","
        },
        {
          "line": 1319,
          "comment": "},"
        },
        {
          "line": 1320,
          "comment": "taskId: {"
        },
        {
          "line": 1321,
          "comment": "type: \"string\","
        },
        {
          "line": 1322,
          "comment": "description: \"Optional: specific task ID to ask about\","
        },
        {
          "line": 1323,
          "comment": "},"
        },
        {
          "line": 1324,
          "comment": "},"
        },
        {
          "line": 1325,
          "comment": "required: [\"message\"],"
        },
        {
          "line": 1326,
          "comment": "},"
        },
        {
          "line": 1327,
          "comment": "},"
        },
        {
          "line": 1328,
          "comment": "],"
        },
        {
          "line": 1329,
          "comment": "};"
        },
        {
          "line": 1330,
          "comment": "});"
        },
        {
          "line": 1332,
          "comment": "// Start the MCP server"
        },
        {
          "line": 1333,
          "comment": "async function main() {"
        },
        {
          "line": 1334,
          "comment": "const transport = new StdioServerTransport();"
        },
        {
          "line": 1335,
          "comment": "await server.connect(transport);"
        },
        {
          "line": 1336,
          "comment": "console.error(\"Arbiter MCP Server started\");"
        },
        {
          "line": 1337,
          "comment": "}"
        },
        {
          "line": 1339,
          "comment": "main().catch((error) => {"
        },
        {
          "line": 1340,
          "comment": "console.error(\"Arbiter MCP Server error:\", error);"
        },
        {
          "line": 1341,
          "comment": "process.exit(1);"
        },
        {
          "line": 1342,
          "comment": "});"
        }
      ]
    },
    "src/caws-validator/CAWSValidator.ts": {
      "file_path": "src/caws-validator/CAWSValidator.ts",
      "language": "typescript",
      "total_comments": 63,
      "hidden_todos": {
        "186": {
          "comment": "TODO: Implement verdict publication to CAWS ledger",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        }
      },
      "all_comments": [
        {
          "line": 5,
          "comment": "* * @fileoverview Main CAWS Validator * Orchestrates constitutional authority validation of working specifications * @module caws-validator"
        },
        {
          "line": 31,
          "comment": "* * Main CAWS Validator - Constitutional Authority Workspace System * * Orchestrates comprehensive validation of working specifications against * CAWS policies, budgets, and constitutional requirements."
        },
        {
          "line": 59,
          "comment": "* * Validate working spec against CAWS constitutional authority"
        },
        {
          "line": 69,
          "comment": "Load policy for this validation session"
        },
        {
          "line": 74,
          "comment": "Initialize rule engine with policy"
        },
        {
          "line": 77,
          "comment": "1. Validate spec structure"
        },
        {
          "line": 97,
          "comment": "2. Derive budget"
        },
        {
          "line": 110,
          "comment": "3. Evaluate rules"
        },
        {
          "line": 113,
          "comment": "Convert rule violations to errors/warnings"
        },
        {
          "line": 126,
          "comment": "4. Check budget compliance if requested and we have stats"
        },
        {
          "line": 141,
          "comment": "5. Execute quality gates if requested"
        },
        {
          "line": 146,
          "comment": "Determine final verdict"
        },
        {
          "line": 176,
          "comment": "* * Validate and publish verdict to CAWS ledger"
        },
        {
          "line": 186,
          "comment": "TODO: Implement verdict publication to CAWS ledger"
        },
        {
          "line": 187,
          "comment": "This would integrate with the provenance system"
        },
        {
          "line": 194,
          "comment": "* * Validate spec with auto-fixes applied"
        },
        {
          "line": 199,
          "comment": "First validate with suggestions to get fixes"
        },
        {
          "line": 205,
          "comment": "Then run full validation on the fixed spec"
        },
        {
          "line": 211,
          "comment": "* * Check budget compliance for current changes"
        },
        {
          "line": 229,
          "comment": "* * Generate budget utilization report"
        },
        {
          "line": 242,
          "comment": "* * Execute mock code quality gate - scan for placeholder implementations"
        },
        {
          "line": 248,
          "comment": "Direct mock indicators"
        },
        {
          "line": 255,
          "comment": "Implementation placeholders"
        },
        {
          "line": 261,
          "comment": "Mock data patterns"
        },
        {
          "line": 266,
          "comment": "Placeholder returns"
        },
        {
          "line": 274,
          "comment": "Console logging implementations"
        },
        {
          "line": 287,
          "comment": "Scan files in scope"
        },
        {
          "line": 327,
          "comment": "Skip files that can't be read"
        },
        {
          "line": 357,
          "comment": "* * Execute quality gates for the working spec"
        },
        {
          "line": 366,
          "comment": "Mock Code Quality Gate - Check for placeholder implementations"
        },
        {
          "line": 373,
          "comment": "Coverage Quality Gate - Check test coverage meets requirements"
        },
        {
          "line": 380,
          "comment": "Mutation Testing Quality Gate - Verify test quality"
        },
        {
          "line": 387,
          "comment": "Linting Quality Gate - Check code style and standards"
        },
        {
          "line": 394,
          "comment": "Security Scan Quality Gate - Check for security vulnerabilities"
        },
        {
          "line": 401,
          "comment": "Performance Benchmark Quality Gate - Check performance thresholds"
        },
        {
          "line": 425,
          "comment": "* * Create standardized validation result"
        },
        {
          "line": 459,
          "comment": "* * Get validation summary for reporting"
        },
        {
          "line": 516,
          "comment": "* * Execute coverage quality gate - check test coverage meets requirements"
        },
        {
          "line": 522,
          "comment": "Run test coverage analysis"
        },
        {
          "line": 527,
          "comment": "Run npm test with coverage"
        },
        {
          "line": 534,
          "comment": "Parse coverage output to extract coverage percentages"
        },
        {
          "line": 551,
          "comment": "Determine coverage requirements based on risk tier"
        },
        {
          "line": 607,
          "comment": "* * Execute mutation testing quality gate"
        },
        {
          "line": 617,
          "comment": "Run mutation testing"
        },
        {
          "line": 624,
          "comment": "Parse mutation score from output"
        },
        {
          "line": 628,
          "comment": "Determine mutation requirements based on risk tier"
        },
        {
          "line": 673,
          "comment": "* * Execute linting quality gate"
        },
        {
          "line": 683,
          "comment": "Run linting"
        },
        {
          "line": 690,
          "comment": "If we get here, linting passed (no errors)"
        },
        {
          "line": 702,
          "comment": "Linting failed - parse output for error details"
        },
        {
          "line": 741,
          "comment": "* * Execute security scan quality gate"
        },
        {
          "line": 751,
          "comment": "Run security audit"
        },
        {
          "line": 758,
          "comment": "If we get here, no security vulnerabilities found"
        },
        {
          "line": 770,
          "comment": "Security audit found vulnerabilities"
        },
        {
          "line": 773,
          "comment": "Parse vulnerability counts from audit output"
        },
        {
          "line": 819,
          "comment": "* * Execute performance benchmark quality gate"
        },
        {
          "line": 829,
          "comment": "Run performance tests if available"
        },
        {
          "line": 836,
          "comment": "Parse performance metrics from output"
        },
        {
          "line": 847,
          "comment": "Check against performance budgets"
        },
        {
          "line": 871,
          "comment": "Performance tests not available or failed"
        },
        {
          "line": 904,
          "comment": "* * Get coverage requirements based on risk tier"
        },
        {
          "line": 924,
          "comment": "* * Get mutation testing requirements based on risk tier"
        },
        {
          "line": 940,
          "comment": "* * Get performance budgets based on risk tier"
        }
      ]
    },
    "src/testing/ChaosTestSuite.ts": {
      "file_path": "src/testing/ChaosTestSuite.ts",
      "language": "typescript",
      "total_comments": 36,
      "hidden_todos": {
        "351": {
          "comment": "In a real implementation, this would affect network communication",
          "matches": {
            "future_improvements": [
              "\\bin\\s+a\\s+real\\s+implementation\\b"
            ]
          },
          "confidence_score": 0.9,
          "confidence_breakdown": [
            [
              "future_improvements",
              0.9
            ]
          ],
          "context_score": 0.0
        },
        "361": {
          "comment": "In a real implementation, this would affect resource allocation",
          "matches": {
            "future_improvements": [
              "\\bin\\s+a\\s+real\\s+implementation\\b"
            ]
          },
          "confidence_score": 0.9,
          "confidence_breakdown": [
            [
              "future_improvements",
              0.9
            ]
          ],
          "context_score": 0.0
        }
      },
      "all_comments": [
        {
          "line": 8,
          "comment": "* * @fileoverview Chaos Test Suite - ARBITER-025 * * Comprehensive test suite for chaos engineering scenarios, * testing arbiter resilience against various failure modes. * * @author @darianrosebrook"
        },
        {
          "line": 67,
          "comment": "* * Run a comprehensive chaos test"
        },
        {
          "line": 75,
          "comment": "Setup scenarios"
        },
        {
          "line": 78,
          "comment": "Enable chaos testing"
        },
        {
          "line": 81,
          "comment": "Start monitoring metrics"
        },
        {
          "line": 86,
          "comment": "Run test for specified duration"
        },
        {
          "line": 89,
          "comment": "Cleanup"
        },
        {
          "line": 104,
          "comment": "* * Run worker failure resilience test"
        },
        {
          "line": 120,
          "comment": "Simulate specific worker failures"
        },
        {
          "line": 125,
          "comment": "Wait between failures"
        },
        {
          "line": 136,
          "comment": "* * Run network degradation test"
        },
        {
          "line": 151,
          "comment": "Simulate network issues"
        },
        {
          "line": 159,
          "comment": "* * Run resource exhaustion test"
        },
        {
          "line": 172,
          "comment": "Simulate resource exhaustion"
        },
        {
          "line": 181,
          "comment": "* * Run cascading failure test"
        },
        {
          "line": 199,
          "comment": "* * Run comprehensive resilience test"
        },
        {
          "line": 207,
          "comment": "Test individual failure modes"
        },
        {
          "line": 219,
          "comment": "Test with all scenarios combined"
        },
        {
          "line": 236,
          "comment": "* * Get test results summary"
        },
        {
          "line": 279,
          "comment": "* * Setup scenarios for testing"
        },
        {
          "line": 281,
          "comment": "Add predefined scenarios"
        },
        {
          "line": 291,
          "comment": "* * Setup event handlers"
        },
        {
          "line": 308,
          "comment": "* * Handle chaos events"
        },
        {
          "line": 327,
          "comment": "* * Handle worker failure events"
        },
        {
          "line": 332,
          "comment": "Update worker status in registry"
        },
        {
          "line": 344,
          "comment": "* * Handle network issue events"
        },
        {
          "line": 351,
          "comment": "In a real implementation, this would affect network communication"
        },
        {
          "line": 357,
          "comment": "* * Handle resource exhaustion events"
        },
        {
          "line": 361,
          "comment": "In a real implementation, this would affect resource allocation"
        },
        {
          "line": 366,
          "comment": "* * Handle recovery events"
        },
        {
          "line": 371,
          "comment": "Restore worker status"
        },
        {
          "line": 384,
          "comment": "* * Generate test result"
        },
        {
          "line": 395,
          "comment": "Calculate scenario statistics"
        },
        {
          "line": 437,
          "comment": "* * Log metrics during test"
        },
        {
          "line": 450,
          "comment": "* * Log test result"
        },
        {
          "line": 464,
          "comment": "* * Sleep utility"
        }
      ]
    },
    "src/adapters/NotificationAdapter.ts": {
      "file_path": "src/adapters/NotificationAdapter.ts",
      "language": "typescript",
      "total_comments": 27,
      "hidden_todos": {
        "104": {
          "comment": "In a real implementation, this would integrate with:",
          "matches": {
            "future_improvements": [
              "\\bin\\s+a\\s+real\\s+implementation\\b"
            ]
          },
          "confidence_score": 0.9,
          "confidence_breakdown": [
            [
              "future_improvements",
              0.9
            ]
          ],
          "context_score": 0.0
        },
        "153": {
          "comment": "In a real implementation, this would test the email service",
          "matches": {
            "future_improvements": [
              "\\bin\\s+a\\s+real\\s+implementation\\b"
            ]
          },
          "confidence_score": 0.9,
          "confidence_breakdown": [
            [
              "future_improvements",
              0.9
            ]
          ],
          "context_score": 0.0
        },
        "181": {
          "comment": "In a real implementation, this would use Slack Web API",
          "matches": {
            "future_improvements": [
              "\\bin\\s+a\\s+real\\s+implementation\\b"
            ]
          },
          "confidence_score": 0.9,
          "confidence_breakdown": [
            [
              "future_improvements",
              0.9
            ]
          ],
          "context_score": 0.0
        },
        "222": {
          "comment": "In a real implementation, this would test Slack API connectivity",
          "matches": {
            "future_improvements": [
              "\\bin\\s+a\\s+real\\s+implementation\\b"
            ]
          },
          "confidence_score": 0.9,
          "confidence_breakdown": [
            [
              "future_improvements",
              0.9
            ]
          ],
          "context_score": 0.0
        },
        "250": {
          "comment": "In a real implementation, this would make HTTP POST to webhook",
          "matches": {
            "future_improvements": [
              "\\bin\\s+a\\s+real\\s+implementation\\b"
            ]
          },
          "confidence_score": 0.9,
          "confidence_breakdown": [
            [
              "future_improvements",
              0.9
            ]
          ],
          "context_score": 0.0
        },
        "291": {
          "comment": "In a real implementation, this would test webhook connectivity",
          "matches": {
            "future_improvements": [
              "\\bin\\s+a\\s+real\\s+implementation\\b"
            ]
          },
          "confidence_score": 0.9,
          "confidence_breakdown": [
            [
              "future_improvements",
              0.9
            ]
          ],
          "context_score": 0.0
        }
      },
      "all_comments": [
        {
          "line": 8,
          "comment": "* * Notification Adapter - Multi-channel notification system * * Provides a unified interface for sending notifications across multiple channels * including email, Slack, webhooks, and other communication systems. * * @author @darianrosebrook"
        },
        {
          "line": 94,
          "comment": "* * Email notification provider"
        },
        {
          "line": 104,
          "comment": "In a real implementation, this would integrate with:"
        },
        {
          "line": 105,
          "comment": "- SendGrid, AWS SES, SMTP servers, etc."
        },
        {
          "line": 111,
          "comment": "Mock email sending"
        },
        {
          "line": 118,
          "comment": "Simulate email sending delay"
        },
        {
          "line": 147,
          "comment": "Validate email provider configuration"
        },
        {
          "line": 153,
          "comment": "In a real implementation, this would test the email service"
        },
        {
          "line": 166,
          "comment": "* * Slack notification provider"
        },
        {
          "line": 181,
          "comment": "In a real implementation, this would use Slack Web API"
        },
        {
          "line": 188,
          "comment": "Simulate Slack API call"
        },
        {
          "line": 222,
          "comment": "In a real implementation, this would test Slack API connectivity"
        },
        {
          "line": 235,
          "comment": "* * Webhook notification provider"
        },
        {
          "line": 250,
          "comment": "In a real implementation, this would make HTTP POST to webhook"
        },
        {
          "line": 257,
          "comment": "Simulate webhook call"
        },
        {
          "line": 291,
          "comment": "In a real implementation, this would test webhook connectivity"
        },
        {
          "line": 304,
          "comment": "* * Multi-channel notification adapter"
        },
        {
          "line": 356,
          "comment": "* * Send notification to recipients"
        },
        {
          "line": 364,
          "comment": "Check rate limits"
        },
        {
          "line": 376,
          "comment": "Check quiet hours"
        },
        {
          "line": 384,
          "comment": "Send via preferred channel first, then fallback channels"
        },
        {
          "line": 429,
          "comment": "* * Send a notification (alias for sendNotification with default recipient)"
        },
        {
          "line": 437,
          "comment": "Create a default recipient for system notifications"
        },
        {
          "line": 468,
          "comment": "* * Send notification to default recipients"
        },
        {
          "line": 477,
          "comment": "* * Health check for all providers"
        },
        {
          "line": 546,
          "comment": "Add preferred channel first if available"
        },
        {
          "line": 554,
          "comment": "Add other available channels"
        }
      ]
    },
    "src/adapters/AuditLogger.ts": {
      "file_path": "src/adapters/AuditLogger.ts",
      "language": "typescript",
      "total_comments": 26,
      "hidden_todos": {
        "132": {
          "comment": "In a real implementation, this would query the database",
          "matches": {
            "future_improvements": [
              "\\bin\\s+a\\s+real\\s+implementation\\b"
            ]
          },
          "confidence_score": 0.9,
          "confidence_breakdown": [
            [
              "future_improvements",
              0.9
            ]
          ],
          "context_score": 0.0
        },
        "178": {
          "comment": "In a real implementation, this would delete old records",
          "matches": {
            "future_improvements": [
              "\\bin\\s+a\\s+real\\s+implementation\\b"
            ]
          },
          "confidence_score": 0.9,
          "confidence_breakdown": [
            [
              "future_improvements",
              0.9
            ]
          ],
          "context_score": 0.0
        },
        "191": {
          "comment": "In a real implementation, this would test database connectivity",
          "matches": {
            "future_improvements": [
              "\\bin\\s+a\\s+real\\s+implementation\\b"
            ]
          },
          "confidence_score": 0.9,
          "confidence_breakdown": [
            [
              "future_improvements",
              0.9
            ]
          ],
          "context_score": 0.0
        },
        "203": {
          "comment": "In a real implementation, this would write to PostgreSQL, MySQL, etc.",
          "matches": {
            "future_improvements": [
              "\\bin\\s+a\\s+real\\s+implementation\\b"
            ]
          },
          "confidence_score": 0.9,
          "confidence_breakdown": [
            [
              "future_improvements",
              0.9
            ]
          ],
          "context_score": 0.0
        },
        "253": {
          "comment": "In a real implementation, this would write to structured log files",
          "matches": {
            "future_improvements": [
              "\\bin\\s+a\\s+real\\s+implementation\\b"
            ]
          },
          "confidence_score": 0.9,
          "confidence_breakdown": [
            [
              "future_improvements",
              0.9
            ]
          ],
          "context_score": 0.0
        },
        "288": {
          "comment": "In a real implementation, this would check file system access",
          "matches": {
            "future_improvements": [
              "\\bin\\s+a\\s+real\\s+implementation\\b"
            ]
          },
          "confidence_score": 0.9,
          "confidence_breakdown": [
            [
              "future_improvements",
              0.9
            ]
          ],
          "context_score": 0.0
        }
      },
      "all_comments": [
        {
          "line": 8,
          "comment": "* * Audit Logger - Durable audit trail system * * Provides comprehensive audit logging for compliance, security, and operational * tracking. Supports multiple storage backends and structured logging. * * @author @darianrosebrook"
        },
        {
          "line": 97,
          "comment": "* * Database audit storage provider"
        },
        {
          "line": 132,
          "comment": "In a real implementation, this would query the database"
        },
        {
          "line": 135,
          "comment": "Mock query results"
        },
        {
          "line": 178,
          "comment": "In a real implementation, this would delete old records"
        },
        {
          "line": 191,
          "comment": "In a real implementation, this would test database connectivity"
        },
        {
          "line": 203,
          "comment": "In a real implementation, this would write to PostgreSQL, MySQL, etc."
        },
        {
          "line": 208,
          "comment": "Simulate database write"
        },
        {
          "line": 239,
          "comment": "Re-add events to buffer for retry"
        },
        {
          "line": 247,
          "comment": "* * File-based audit storage provider"
        },
        {
          "line": 253,
          "comment": "In a real implementation, this would write to structured log files"
        },
        {
          "line": 273,
          "comment": "File-based storage typically doesn't support complex queries"
        },
        {
          "line": 279,
          "comment": "File-based storage typically uses log rotation"
        },
        {
          "line": 288,
          "comment": "In a real implementation, this would check file system access"
        },
        {
          "line": 301,
          "comment": "* * Mock audit storage provider for testing"
        },
        {
          "line": 355,
          "comment": "Test helper methods"
        },
        {
          "line": 367,
          "comment": "* * Comprehensive audit logger"
        },
        {
          "line": 396,
          "comment": "* * Log an audit event from an AuditEvent object"
        },
        {
          "line": 400,
          "comment": "* * Log an audit event with individual parameters"
        },
        {
          "line": 414,
          "comment": "Handle AuditEvent object"
        },
        {
          "line": 432,
          "comment": "Handle individual parameters"
        },
        {
          "line": 446,
          "comment": "* * Log an audit event with individual parameters (internal implementation)"
        },
        {
          "line": 500,
          "comment": "* * Query audit events"
        },
        {
          "line": 514,
          "comment": "* * Clean up old audit events"
        },
        {
          "line": 535,
          "comment": "* * Health check"
        },
        {
          "line": 553,
          "comment": "* * Shutdown the audit logger"
        }
      ]
    },
    "src/adapters/IncidentNotifier.ts": {
      "file_path": "src/adapters/IncidentNotifier.ts",
      "language": "typescript",
      "total_comments": 31,
      "hidden_todos": {
        "346": {
          "comment": "TODO: Implement ServiceNow integration",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        },
        "355": {
          "comment": "TODO: Implement Jira integration",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        },
        "364": {
          "comment": "TODO: Implement Zendesk integration",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        },
        "373": {
          "comment": "TODO: Implement PagerDuty integration",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        },
        "434": {
          "comment": "TODO: Implement email notification",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        },
        "446": {
          "comment": "TODO: Implement Slack notification",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        },
        "458": {
          "comment": "TODO: Implement Microsoft Teams notification",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        },
        "470": {
          "comment": "TODO: Implement PagerDuty notification",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        },
        "482": {
          "comment": "TODO: Implement SMS notification",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        },
        "520": {
          "comment": "TODO: Implement ServiceNow ticket update",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        },
        "533": {
          "comment": "TODO: Implement Jira ticket update",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        },
        "542": {
          "comment": "TODO: Implement Zendesk ticket update",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        },
        "551": {
          "comment": "TODO: Implement PagerDuty incident update",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        },
        "562": {
          "comment": "TODO: Implement monitoring system integration",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        }
      },
      "all_comments": [
        {
          "line": 8,
          "comment": "* * Incident Notification Adapter * * Provides integration with external incident management systems for * automated incident creation, notification, and tracking. * * @author @darianrosebrook"
        },
        {
          "line": 78,
          "comment": "* * Create an incident ticket for a failure event"
        },
        {
          "line": 114,
          "comment": "* * Notify on-call engineers about an incident"
        },
        {
          "line": 156,
          "comment": "* * Update incident status"
        },
        {
          "line": 189,
          "comment": "* * Send diagnostics to monitoring system"
        },
        {
          "line": 280,
          "comment": "Map failure types to severity levels"
        },
        {
          "line": 312,
          "comment": "Build URL to incident in the external system"
        },
        {
          "line": 346,
          "comment": "TODO: Implement ServiceNow integration"
        },
        {
          "line": 347,
          "comment": "Use ServiceNow REST API to create incident"
        },
        {
          "line": 355,
          "comment": "TODO: Implement Jira integration"
        },
        {
          "line": 356,
          "comment": "Use Jira REST API to create issue"
        },
        {
          "line": 364,
          "comment": "TODO: Implement Zendesk integration"
        },
        {
          "line": 365,
          "comment": "Use Zendesk API to create ticket"
        },
        {
          "line": 373,
          "comment": "TODO: Implement PagerDuty integration"
        },
        {
          "line": 374,
          "comment": "Use PagerDuty Events API to create incident"
        },
        {
          "line": 434,
          "comment": "TODO: Implement email notification"
        },
        {
          "line": 435,
          "comment": "Use email service (SendGrid, SES, etc.)"
        },
        {
          "line": 446,
          "comment": "TODO: Implement Slack notification"
        },
        {
          "line": 447,
          "comment": "Use Slack Web API"
        },
        {
          "line": 458,
          "comment": "TODO: Implement Microsoft Teams notification"
        },
        {
          "line": 459,
          "comment": "Use Teams webhook or Graph API"
        },
        {
          "line": 470,
          "comment": "TODO: Implement PagerDuty notification"
        },
        {
          "line": 471,
          "comment": "Use PagerDuty Events API"
        },
        {
          "line": 482,
          "comment": "TODO: Implement SMS notification"
        },
        {
          "line": 483,
          "comment": "Use SMS service (Twilio, AWS SNS, etc.)"
        },
        {
          "line": 520,
          "comment": "TODO: Implement ServiceNow ticket update"
        },
        {
          "line": 533,
          "comment": "TODO: Implement Jira ticket update"
        },
        {
          "line": 542,
          "comment": "TODO: Implement Zendesk ticket update"
        },
        {
          "line": 551,
          "comment": "TODO: Implement PagerDuty incident update"
        },
        {
          "line": 562,
          "comment": "TODO: Implement monitoring system integration"
        },
        {
          "line": 563,
          "comment": "Send to Prometheus, DataDog, New Relic, etc."
        }
      ]
    },
    "src/adapters/InfrastructureController.ts": {
      "file_path": "src/adapters/InfrastructureController.ts",
      "language": "typescript",
      "total_comments": 72,
      "hidden_todos": {
        "384": {
          "comment": "In a real implementation, this would check component metadata",
          "matches": {
            "future_improvements": [
              "\\bin\\s+a\\s+real\\s+implementation\\b"
            ]
          },
          "confidence_score": 0.9,
          "confidence_breakdown": [
            [
              "future_improvements",
              0.9
            ]
          ],
          "context_score": 0.0
        },
        "409": {
          "comment": "TODO: Implement Docker container restart",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        },
        "428": {
          "comment": "TODO: Implement Kubernetes pod restart",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        },
        "447": {
          "comment": "TODO: Implement systemd service restart",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        },
        "462": {
          "comment": "TODO: Implement process restart",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        },
        "478": {
          "comment": "TODO: Implement AWS Lambda function restart/update",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        },
        "533": {
          "comment": "TODO: Implement actual health check",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        },
        "543": {
          "comment": "TODO: Implement response verification",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        },
        "554": {
          "comment": "TODO: Implement backup instance discovery",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        },
        "575": {
          "comment": "TODO: Implement traffic redirection",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        },
        "590": {
          "comment": "TODO: Implement graceful decommissioning",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        },
        "602": {
          "comment": "TODO: Query infrastructure metadata for instance type",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        },
        "615": {
          "comment": "TODO: Implement instance provisioning",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        },
        "645": {
          "comment": "TODO: Implement load balancer registration",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        },
        "663": {
          "comment": "TODO: Implement load balancer deregistration",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        },
        "677": {
          "comment": "TODO: Update component registry with isolation status",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        },
        "688": {
          "comment": "TODO: Enable circuit breaker for the component",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        },
        "699": {
          "comment": "TODO: Schedule automatic reinstatement",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        },
        "722": {
          "comment": "TODO: Implement component reinstatement",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        }
      },
      "all_comments": [
        {
          "line": 8,
          "comment": "* * Infrastructure Controller Adapter * * Provides integration with infrastructure management systems for * automated component recovery, scaling, and isolation operations. * * @author @darianrosebrook"
        },
        {
          "line": 119,
          "comment": "* * Restart a component using the appropriate infrastructure provider"
        },
        {
          "line": 157,
          "comment": "Wait for health check to pass"
        },
        {
          "line": 165,
          "comment": "Verify component is responding"
        },
        {
          "line": 180,
          "comment": "* * Switch over to backup component instance"
        },
        {
          "line": 193,
          "comment": "Identify backup instance"
        },
        {
          "line": 202,
          "comment": "Redirect traffic to backup"
        },
        {
          "line": 205,
          "comment": "Verify backup is healthy"
        },
        {
          "line": 213,
          "comment": "Optionally decommission failed instance"
        },
        {
          "line": 233,
          "comment": "* * Scale up component by provisioning additional instances"
        },
        {
          "line": 271,
          "comment": "Provision additional instances"
        },
        {
          "line": 280,
          "comment": "Add to load balancer"
        },
        {
          "line": 285,
          "comment": "Verify new instances are healthy"
        },
        {
          "line": 319,
          "comment": "Clean up operation after some time"
        },
        {
          "line": 328,
          "comment": "* * Isolate a component to prevent further damage"
        },
        {
          "line": 341,
          "comment": "Remove from load balancer to stop traffic"
        },
        {
          "line": 346,
          "comment": "Mark as isolated in component registry"
        },
        {
          "line": 349,
          "comment": "Prevent new requests through circuit breaker"
        },
        {
          "line": 352,
          "comment": "Set automatic reinstatement timer"
        },
        {
          "line": 371,
          "comment": "* * Get status of active scaling operations"
        },
        {
          "line": 378,
          "comment": "* * Get status of a specific scaling operation"
        },
        {
          "line": 384,
          "comment": "In a real implementation, this would check component metadata"
        },
        {
          "line": 385,
          "comment": "to determine deployment type (Docker, Kubernetes, systemd, etc.)"
        },
        {
          "line": 409,
          "comment": "TODO: Implement Docker container restart"
        },
        {
          "line": 410,
          "comment": "Use Docker API to restart container"
        },
        {
          "line": 416,
          "comment": "Simulate restart delay"
        },
        {
          "line": 428,
          "comment": "TODO: Implement Kubernetes pod restart"
        },
        {
          "line": 429,
          "comment": "Use Kubernetes API client to restart pod"
        },
        {
          "line": 435,
          "comment": "Simulate restart delay"
        },
        {
          "line": 447,
          "comment": "TODO: Implement systemd service restart"
        },
        {
          "line": 448,
          "comment": "Use systemctl to restart service"
        },
        {
          "line": 454,
          "comment": "Simulate restart delay"
        },
        {
          "line": 462,
          "comment": "TODO: Implement process restart"
        },
        {
          "line": 463,
          "comment": "Find PID and send restart signal, or restart via process manager"
        },
        {
          "line": 466,
          "comment": "Simulate restart delay"
        },
        {
          "line": 478,
          "comment": "TODO: Implement AWS Lambda function restart/update"
        },
        {
          "line": 479,
          "comment": "Use AWS SDK to update function code or configuration"
        },
        {
          "line": 485,
          "comment": "Simulate update delay"
        },
        {
          "line": 533,
          "comment": "TODO: Implement actual health check"
        },
        {
          "line": 534,
          "comment": "This could be HTTP health endpoint, process check, etc."
        },
        {
          "line": 537,
          "comment": "Simulate health check"
        },
        {
          "line": 543,
          "comment": "TODO: Implement response verification"
        },
        {
          "line": 544,
          "comment": "Make test request to verify component is working"
        },
        {
          "line": 547,
          "comment": "Simulate verification"
        },
        {
          "line": 554,
          "comment": "TODO: Implement backup instance discovery"
        },
        {
          "line": 555,
          "comment": "Query infrastructure registry for backup instances"
        },
        {
          "line": 558,
          "comment": "Simulate backup discovery"
        },
        {
          "line": 575,
          "comment": "TODO: Implement traffic redirection"
        },
        {
          "line": 576,
          "comment": "Update load balancer, DNS, or service mesh configuration"
        },
        {
          "line": 582,
          "comment": "Simulate traffic redirection"
        },
        {
          "line": 590,
          "comment": "TODO: Implement graceful decommissioning"
        },
        {
          "line": 591,
          "comment": "Drain connections, update registries, then terminate"
        },
        {
          "line": 597,
          "comment": "Simulate decommissioning"
        },
        {
          "line": 602,
          "comment": "TODO: Query infrastructure metadata for instance type"
        },
        {
          "line": 605,
          "comment": "Simulate instance type lookup"
        },
        {
          "line": 615,
          "comment": "TODO: Implement instance provisioning"
        },
        {
          "line": 616,
          "comment": "Use cloud provider APIs (AWS, GCP, Azure) or infrastructure tools"
        },
        {
          "line": 623,
          "comment": "Simulate provisioning"
        },
        {
          "line": 645,
          "comment": "TODO: Implement load balancer registration"
        },
        {
          "line": 646,
          "comment": "Add instances to load balancer target groups"
        },
        {
          "line": 653,
          "comment": "Simulate registration"
        },
        {
          "line": 663,
          "comment": "TODO: Implement load balancer deregistration"
        },
        {
          "line": 669,
          "comment": "Simulate deregistration"
        },
        {
          "line": 677,
          "comment": "TODO: Update component registry with isolation status"
        },
        {
          "line": 683,
          "comment": "Simulate registry update"
        },
        {
          "line": 688,
          "comment": "TODO: Enable circuit breaker for the component"
        },
        {
          "line": 691,
          "comment": "Simulate circuit breaker enablement"
        },
        {
          "line": 699,
          "comment": "TODO: Schedule automatic reinstatement"
        },
        {
          "line": 705,
          "comment": "Simulate scheduling"
        },
        {
          "line": 708,
          "comment": "Schedule actual reinstatement (in real implementation)"
        },
        {
          "line": 722,
          "comment": "TODO: Implement component reinstatement"
        },
        {
          "line": 725,
          "comment": "Simulate reinstatement"
        }
      ]
    },
    "src/verification/VerificationEngine.ts": {
      "file_path": "src/verification/VerificationEngine.ts",
      "language": "typescript",
      "total_comments": 88,
      "hidden_todos": {
        "1004": {
          "comment": "In a real implementation, this would use more sophisticated NLP",
          "matches": {
            "future_improvements": [
              "\\bin\\s+a\\s+real\\s+implementation\\b"
            ]
          },
          "confidence_score": 0.9,
          "confidence_breakdown": [
            [
              "future_improvements",
              0.9
            ]
          ],
          "context_score": 0.0
        }
      },
      "all_comments": [
        {
          "line": 8,
          "comment": "* * @fileoverview Verification Engine Core Component (ARBITER-007) * * Main orchestrator for information validation and fact-checking, * coordinating multiple verification methods and aggregating results. * * @author @darianrosebrook"
        },
        {
          "line": 43,
          "comment": "* * Main Verification Engine Implementation"
        },
        {
          "line": 65,
          "comment": "Initialize validators"
        },
        {
          "line": 97,
          "comment": "* * Verify a single request"
        },
        {
          "line": 101,
          "comment": "Validate request"
        },
        {
          "line": 104,
          "comment": "Save request to database if available"
        },
        {
          "line": 113,
          "comment": "Check database cache first if available"
        },
        {
          "line": 137,
          "comment": "Check in-memory cache"
        },
        {
          "line": 156,
          "comment": "Check if request is already being processed"
        },
        {
          "line": 161,
          "comment": "Create processing promise"
        },
        {
          "line": 168,
          "comment": "Save result to database if available"
        },
        {
          "line": 173,
          "comment": "Cache result in database"
        },
        {
          "line": 197,
          "comment": "* * Verify multiple requests in batch"
        },
        {
          "line": 201,
          "comment": "Process requests in parallel with concurrency control"
        },
        {
          "line": 216,
          "comment": "Create error result for failed verification"
        },
        {
          "line": 241,
          "comment": "* * Get supported verification methods"
        },
        {
          "line": 250,
          "comment": "* * Get status of a specific verification method"
        },
        {
          "line": 262,
          "comment": "Get real health data from the specific method"
        },
        {
          "line": 321,
          "comment": "* * Perform health check on the verification engine"
        },
        {
          "line": 341,
          "comment": "* * Process a verification request"
        },
        {
          "line": 347,
          "comment": "Emit verification started event"
        },
        {
          "line": 361,
          "comment": "Enrich request with claim extraction prior to running methods"
        },
        {
          "line": 364,
          "comment": "Determine which methods to use (skip when no claims extracted)"
        },
        {
          "line": 370,
          "comment": "Execute verification methods in parallel"
        },
        {
          "line": 382,
          "comment": "Aggregate results"
        },
        {
          "line": 389,
          "comment": "Cache result if enabled"
        },
        {
          "line": 394,
          "comment": "Emit verification completed event"
        },
        {
          "line": 414,
          "comment": "Emit verification error event"
        },
        {
          "line": 434,
          "comment": "* * Validate verification request"
        },
        {
          "line": 452,
          "comment": "Arbitrary limit"
        },
        {
          "line": 482,
          "comment": "* * Select verification methods to use for the request"
        },
        {
          "line": 486,
          "comment": "Use requested methods or fall back to all enabled methods"
        },
        {
          "line": 490,
          "comment": "Filter to only enabled methods"
        },
        {
          "line": 496,
          "comment": "Use all enabled methods by priority"
        },
        {
          "line": 505,
          "comment": "* * Execute a single verification method"
        },
        {
          "line": 552,
          "comment": "Update method result with timing"
        },
        {
          "line": 577,
          "comment": "* * Create failed method result"
        },
        {
          "line": 598,
          "comment": "* * Aggregate results from multiple verification methods"
        },
        {
          "line": 625,
          "comment": "Filter out failed methods"
        },
        {
          "line": 645,
          "comment": "Calculate consensus verdict"
        },
        {
          "line": 659,
          "comment": "Find most common verdict"
        },
        {
          "line": 670,
          "comment": "Adjust confidence based on consensus strength"
        },
        {
          "line": 674,
          "comment": "Collect reasoning from all methods"
        },
        {
          "line": 679,
          "comment": "Aggregate evidence from all verification methods"
        },
        {
          "line": 684,
          "comment": "Collect all evidence from verification methods"
        },
        {
          "line": 707,
          "comment": "Resolve conflicts between supporting and contradictory evidence"
        },
        {
          "line": 730,
          "comment": "* * Check cache for existing result"
        },
        {
          "line": 854,
          "comment": "* * Check cache for existing result"
        },
        {
          "line": 868,
          "comment": "* * Cache verification result"
        },
        {
          "line": 875,
          "comment": "Store with TTL"
        },
        {
          "line": 878,
          "comment": "Clean up expired entries periodically"
        },
        {
          "line": 886,
          "comment": "* * Generate cache key for request"
        },
        {
          "line": 902,
          "comment": "* * Check if cached result is still valid"
        },
        {
          "line": 904,
          "comment": "Cache for configured TTL"
        },
        {
          "line": 911,
          "comment": "* * Clean up expired cache entries"
        },
        {
          "line": 926,
          "comment": "* * Create batches for concurrent processing"
        },
        {
          "line": 937,
          "comment": "* * Get method performance statistics from database"
        },
        {
          "line": 953,
          "comment": "* * Get evidence quality statistics from database"
        },
        {
          "line": 972,
          "comment": "* * Generate a unique key for evidence deduplication"
        },
        {
          "line": 974,
          "comment": "Create a key based on evidence content and source"
        },
        {
          "line": 979,
          "comment": "Use a simple hash of the content for deduplication"
        },
        {
          "line": 985,
          "comment": "* * Simple hash function for evidence deduplication"
        },
        {
          "line": 998,
          "comment": "* * Check if two pieces of evidence are conflicting"
        },
        {
          "line": 1003,
          "comment": "Simple conflict detection based on content similarity"
        },
        {
          "line": 1004,
          "comment": "In a real implementation, this would use more sophisticated NLP"
        },
        {
          "line": 1008,
          "comment": "Check for significant overlap in content"
        },
        {
          "line": 1016,
          "comment": "Consider it conflicting if similarity is above threshold"
        },
        {
          "line": 1022,
          "comment": "* * Resolve a conflict between two pieces of evidence"
        },
        {
          "line": 1027,
          "comment": "Simple resolution based on evidence strength and recency"
        },
        {
          "line": 1031,
          "comment": "If strengths are similar, prefer more recent evidence"
        },
        {
          "line": 1049,
          "comment": "Otherwise, prefer stronger evidence"
        },
        {
          "line": 1069,
          "comment": "* * Calculate the strength of a piece of evidence"
        },
        {
          "line": 1073,
          "comment": "Boost strength based on evidence type"
        },
        {
          "line": 1089,
          "comment": "Boost strength based on source reliability"
        },
        {
          "line": 1109,
          "comment": "Boost strength based on recency (if timestamp available)"
        },
        {
          "line": 1129,
          "comment": "* * Resolve conflicts between supporting and contradictory evidence * by comparing credibility scores and removing duplicates"
        },
        {
          "line": 1137,
          "comment": "Process supporting evidence"
        },
        {
          "line": 1145,
          "comment": "If we have duplicate evidence, keep the one with higher credibility"
        },
        {
          "line": 1155,
          "comment": "Process contradictory evidence"
        },
        {
          "line": 1163,
          "comment": "If we have duplicate evidence, keep the one with higher credibility"
        },
        {
          "line": 1173,
          "comment": "Remove contradictory evidence that has stronger supporting evidence"
        },
        {
          "line": 1181,
          "comment": "Compare evidence strength"
        },
        {
          "line": 1187,
          "comment": "Supporting evidence is stronger, keep it"
        },
        {
          "line": 1190,
          "comment": "Contradictory evidence is stronger, keep it"
        },
        {
          "line": 1193,
          "comment": "Equal strength - keep both but mark as conflicting"
        },
        {
          "line": 1208,
          "comment": "Remove from contradictory map since we've processed it"
        },
        {
          "line": 1211,
          "comment": "No conflict, add to final supporting evidence"
        },
        {
          "line": 1216,
          "comment": "Add remaining contradictory evidence that wasn't in conflict"
        }
      ]
    },
    "src/resilience/ResilientDatabaseClient.ts": {
      "file_path": "src/resilience/ResilientDatabaseClient.ts",
      "language": "typescript",
      "total_comments": 33,
      "hidden_todos": {
        "369": {
          "comment": "TODO: Implement updateAgent when method is available",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        },
        "376": {
          "comment": "TODO: Implement deleteAgent when method is available",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        }
      },
      "all_comments": [
        {
          "line": 8,
          "comment": "* * @fileoverview Resilient Database Client Wrapper * * Wraps AgentRegistryDatabaseClient with circuit breaker and retry logic * for production reliability. Provides graceful degradation to in-memory fallback. * * @author @darianrosebrook"
        },
        {
          "line": 23,
          "comment": "* Use in-memory fallback when database is unavailable"
        },
        {
          "line": 26,
          "comment": "* Circuit breaker config"
        },
        {
          "line": 34,
          "comment": "* Enable retry logic"
        },
        {
          "line": 45,
          "comment": "* * Resilient wrapper for AgentRegistryDatabaseClient * * Provides: * - Circuit breaker to prevent cascading failures * - Retry logic with exponential backoff * - Graceful degradation to in-memory storage"
        },
        {
          "line": 79,
          "comment": "Initialize fallback registry if enabled"
        },
        {
          "line": 92,
          "comment": "* * Initialize database connection"
        },
        {
          "line": 111,
          "comment": "* * Register agent"
        },
        {
          "line": 114,
          "comment": "Track write for later sync"
        },
        {
          "line": 127,
          "comment": "* * Get agent by ID"
        },
        {
          "line": 140,
          "comment": "* * Query agents by capability"
        },
        {
          "line": 154,
          "comment": "* * Update agent performance"
        },
        {
          "line": 166,
          "comment": "We need to get the updated agent - this is a limitation of the current design"
        },
        {
          "line": 193,
          "comment": "* * Unregister agent"
        },
        {
          "line": 206,
          "comment": "* * Get registry statistics"
        },
        {
          "line": 226,
          "comment": "* * Health check"
        },
        {
          "line": 237,
          "comment": "If circuit was open and health check passed, try to recover"
        },
        {
          "line": 251,
          "comment": "* * Shutdown"
        },
        {
          "line": 253,
          "comment": "Shutdown the database client if it has a shutdown method"
        },
        {
          "line": 264,
          "comment": "* * Get resilience status"
        },
        {
          "line": 279,
          "comment": "* * Execute operation with circuit breaker and retry"
        },
        {
          "line": 283,
          "comment": "Wrap with both circuit breaker and retry"
        },
        {
          "line": 288,
          "comment": "Just circuit breaker"
        },
        {
          "line": 292,
          "comment": "If circuit opened and fallback enabled, switch to fallback"
        },
        {
          "line": 310,
          "comment": "* * Attempt to recover from fallback mode"
        },
        {
          "line": 317,
          "comment": "Test database connection"
        },
        {
          "line": 325,
          "comment": "Sync pending writes to database"
        },
        {
          "line": 340,
          "comment": "* * Manual reset of circuit breaker"
        },
        {
          "line": 348,
          "comment": "* * Sync pending writes from fallback to database after recovery"
        },
        {
          "line": 369,
          "comment": "TODO: Implement updateAgent when method is available"
        },
        {
          "line": 376,
          "comment": "TODO: Implement deleteAgent when method is available"
        },
        {
          "line": 395,
          "comment": "Clear successfully synced writes"
        },
        {
          "line": 411,
          "comment": "* * Track a write operation during fallback mode"
        }
      ]
    },
    "src/rl/PerformanceTracker.ts": {
      "file_path": "src/rl/PerformanceTracker.ts",
      "language": "typescript",
      "total_comments": 124,
      "hidden_todos": {
        "934": {
          "comment": "Note: DataCollector integration for task performance could be added here",
          "matches": {
            "future_improvements": [
              "\\bcould\\s+be\\b.*?(implemented|added|fixed)"
            ]
          },
          "confidence_score": 0.86,
          "confidence_breakdown": [
            [
              "future_improvements",
              0.86
            ]
          ],
          "context_score": -0.2
        },
        "1280": {
          "comment": "This is a simplified approach - in a real implementation,",
          "matches": {
            "future_improvements": [
              "\\bin\\s+a\\s+real\\s+implementation\\b"
            ]
          },
          "confidence_score": 0.86,
          "confidence_breakdown": [
            [
              "future_improvements",
              0.86
            ]
          ],
          "context_score": -0.2
        },
        "1307": {
          "comment": "This is a simplified approach - in a real implementation,",
          "matches": {
            "future_improvements": [
              "\\bin\\s+a\\s+real\\s+implementation\\b"
            ]
          },
          "confidence_score": 0.86,
          "confidence_breakdown": [
            [
              "future_improvements",
              0.86
            ]
          ],
          "context_score": -0.2
        }
      },
      "all_comments": [
        {
          "line": 10,
          "comment": "* * Performance Tracker for RL Training Data Collection * * @author @darianrosebrook * @module performance-tracker * * Collects and stores performance data for reinforcement learning training. * Implements data collection for routing decisions, task executions, and evaluation outcomes. * Now integrates with comprehensive benchmarking system (ARBITER-004)."
        },
        {
          "line": 35,
          "comment": "* * Configuration for the performance tracker."
        },
        {
          "line": 39,
          "comment": "* * Maximum number of events to keep in memory."
        },
        {
          "line": 44,
          "comment": "* * Whether to enable data collection."
        },
        {
          "line": 49,
          "comment": "* * Data retention period in milliseconds."
        },
        {
          "line": 54,
          "comment": "* * Batch size for processing events."
        },
        {
          "line": 59,
          "comment": "* * Whether to anonymize collected data."
        },
        {
          "line": 64,
          "comment": "* * Whether to enable database persistence."
        },
        {
          "line": 70,
          "comment": "* * Default configuration for the performance tracker."
        },
        {
          "line": 82,
          "comment": "* * Performance data collected for a single task execution."
        },
        {
          "line": 86,
          "comment": "* * Execution tracking ID."
        },
        {
          "line": 91,
          "comment": "* * Task identifier."
        },
        {
          "line": 96,
          "comment": "* * Agent that executed the task."
        },
        {
          "line": 101,
          "comment": "* * Routing decision that led to this agent selection."
        },
        {
          "line": 106,
          "comment": "* * Task outcome and metrics."
        },
        {
          "line": 111,
          "comment": "* * Timestamp of execution start."
        },
        {
          "line": 116,
          "comment": "* * Timestamp of execution completion."
        },
        {
          "line": 121,
          "comment": "* * Additional context data."
        },
        {
          "line": 127,
          "comment": "* * Statistics about collected performance data."
        },
        {
          "line": 131,
          "comment": "* * Total number of routing decisions recorded."
        },
        {
          "line": 136,
          "comment": "* * Total number of task executions recorded."
        },
        {
          "line": 141,
          "comment": "* * Total number of evaluation outcomes recorded."
        },
        {
          "line": 146,
          "comment": "* * Average task completion time."
        },
        {
          "line": 151,
          "comment": "* * Success rate across all tasks."
        },
        {
          "line": 156,
          "comment": "* * Data collection start time."
        },
        {
          "line": 161,
          "comment": "* * Last data collection time."
        },
        {
          "line": 174,
          "comment": "* * Performance Tracker for collecting RL training data. * * This component collects performance data from the arbiter system * to provide training data for reinforcement learning algorithms. * It stores routing decisions, task executions, and evaluation outcomes. * * Now integrates with ARBITER-004 benchmarking system for comprehensive * performance tracking, multi-dimensional scoring, and automated evaluation."
        },
        {
          "line": 189,
          "comment": "* * Creates a new performance tracker instance. * * @param config - Configuration for the tracker. Uses defaults if not provided. * @param dataCollector - Optional external data collector (for testing)."
        },
        {
          "line": 202,
          "comment": "* * Initializes integration with ARBITER-004 benchmarking system."
        },
        {
          "line": 204,
          "comment": "Only create DataCollector if one wasn't provided externally (e.g., for testing)"
        },
        {
          "line": 210,
          "comment": "Convert legacy config to new format"
        },
        {
          "line": 229,
          "comment": "Graceful degradation - continue with legacy system if new system fails"
        },
        {
          "line": 239,
          "comment": "* * Initializes database client for persistent storage."
        },
        {
          "line": 263,
          "comment": "* * Starts data collection."
        },
        {
          "line": 268,
          "comment": "Initialize database client if enabled"
        },
        {
          "line": 277,
          "comment": "Also start the benchmarking data collector"
        },
        {
          "line": 286,
          "comment": "* * Stops data collection."
        },
        {
          "line": 290,
          "comment": "Flush any pending events to database"
        },
        {
          "line": 293,
          "comment": "Stop the benchmarking data collector"
        },
        {
          "line": 298,
          "comment": "Shutdown database client"
        },
        {
          "line": 310,
          "comment": "* * Flushes pending events to database."
        },
        {
          "line": 328,
          "comment": "* * Records an event with optional database persistence."
        },
        {
          "line": 334,
          "comment": "Store in memory"
        },
        {
          "line": 337,
          "comment": "Convert to database format and store if enabled"
        },
        {
          "line": 355,
          "comment": "Flush if batch size reached"
        },
        {
          "line": 364,
          "comment": "Clean up old events if memory limit exceeded"
        },
        {
          "line": 375,
          "comment": "* * Records agent registration for performance baseline tracking. * * @param agentId - Agent identifier. * @param agentData - Agent registration data including capabilities and baseline metrics."
        },
        {
          "line": 393,
          "comment": "Create agent registration event"
        },
        {
          "line": 407,
          "comment": "Store agent performance profile in database"
        },
        {
          "line": 427,
          "comment": "* * Records agent status changes for availability tracking. * * @param agentId - Agent identifier. * @param status - New availability status. * @param context - Additional context about the status change."
        },
        {
          "line": 437,
          "comment": "Create agent status change event"
        },
        {
          "line": 452,
          "comment": "Forward to data collector if available"
        },
        {
          "line": 461,
          "comment": "Graceful degradation - log but don't fail"
        },
        {
          "line": 474,
          "comment": "* * Records a routing decision made by the arbiter. * * @param decision - The routing decision to record."
        },
        {
          "line": 480,
          "comment": "Legacy event format for backward compatibility"
        },
        {
          "line": 492,
          "comment": "Also send to new benchmarking system"
        },
        {
          "line": 512,
          "comment": "Graceful degradation - log but don't fail"
        },
        {
          "line": 529,
          "comment": "* * Records the start of a task execution. * * @param taskId - Task identifier. * @param agentId - Agent identifier. * @param routingDecision - Routing decision that led to this execution. * @param context - Additional context data. * @returns Execution tracking ID."
        },
        {
          "line": 558,
          "comment": "Record the routing decision"
        },
        {
          "line": 561,
          "comment": "Also record in new benchmarking system"
        },
        {
          "line": 581,
          "comment": "* * Records the completion of a task execution. * * @param executionId - Execution tracking ID from startTaskExecution. * @param outcome - Task outcome and metrics."
        },
        {
          "line": 602,
          "comment": "Legacy event format for backward compatibility"
        },
        {
          "line": 617,
          "comment": "Also send comprehensive metrics to new benchmarking system"
        },
        {
          "line": 620,
          "comment": "Convert legacy outcome to comprehensive performance metrics"
        },
        {
          "line": 650,
          "comment": "* * Records an evaluation outcome. * * @param taskId - Task identifier. * @param evaluation - Evaluation results."
        },
        {
          "line": 680,
          "comment": "* * Records constitutional validation results for compliance tracking. * * @param validationData - CAWS validation result data"
        },
        {
          "line": 700,
          "comment": "Create constitutional validation event"
        },
        {
          "line": 714,
          "comment": "Forward to data collector if available"
        },
        {
          "line": 719,
          "comment": "Graceful degradation - log but don't fail"
        },
        {
          "line": 733,
          "comment": "* * Records thinking budget allocation for RL training. * * @param taskId - Task identifier. * @param budget - Budget allocation data."
        },
        {
          "line": 766,
          "comment": "* * Records thinking budget usage for completed task. * * @param taskId - Task identifier. * @param usage - Budget usage data."
        },
        {
          "line": 799,
          "comment": "* * Records minimality evaluation for code changes. * * @param taskId - Task identifier. * @param evaluation - Minimality evaluation data."
        },
        {
          "line": 836,
          "comment": "* * Records LLM-based judgment for subjective evaluation. * * @param taskId - Task identifier. * @param judgment - Judgment data."
        },
        {
          "line": 872,
          "comment": "* * Records RL training metrics for monitoring. * * @param metrics - RL training metrics."
        },
        {
          "line": 908,
          "comment": "* * Records task performance metrics from agent registry updates. * * @param agentId - ID of the agent that completed the task * @param taskType - Type of task performed * @param metrics - Performance metrics from the task execution"
        },
        {
          "line": 934,
          "comment": "Note: DataCollector integration for task performance could be added here"
        },
        {
          "line": 935,
          "comment": "but requires mapping agent-registry PerformanceMetrics to performance-tracking PerformanceMetrics"
        },
        {
          "line": 936,
          "comment": "For now, we rely on the event-based storage in the PerformanceTracker itself"
        },
        {
          "line": 944,
          "comment": "* * Exports collected data for RL training. * * @param since - Optional timestamp to export data since. * @returns Array of performance events ready for training."
        },
        {
          "line": 955,
          "comment": "Return a copy to prevent external modification"
        },
        {
          "line": 963,
          "comment": "* * Gets performance statistics. * * @returns Current performance statistics."
        },
        {
          "line": 1013,
          "comment": "* * Clears all collected data."
        },
        {
          "line": 1023,
          "comment": "* * Gets current configuration. * * @returns Current configuration."
        },
        {
          "line": 1033,
          "comment": "* * Gets performance statistics filtered by model version. * * @param modelVersion - Model version to filter by * @returns Performance statistics for the specified version"
        },
        {
          "line": 1083,
          "comment": "* * Updates configuration. * * @param config - New configuration to apply."
        },
        {
          "line": 1092,
          "comment": "* * Checks if data collection is currently active. * * @returns True if collecting data."
        },
        {
          "line": 1101,
          "comment": "* * Adds an event to the collection, maintaining size limits. * * @param event - Event to add."
        },
        {
          "line": 1109,
          "comment": "* * Removes old events based on retention policy and size limits."
        },
        {
          "line": 1111,
          "comment": "Remove events older than retention period"
        },
        {
          "line": 1117,
          "comment": "Enforce maximum events in memory"
        },
        {
          "line": 1119,
          "comment": "Keep most recent events"
        },
        {
          "line": 1131,
          "comment": "* * Removes old task executions that haven't been completed."
        },
        {
          "line": 1144,
          "comment": "* * Anonymizes data if anonymization is enabled. * * @param data - Data to potentially anonymize. * @returns Anonymized data or original data."
        },
        {
          "line": 1150,
          "comment": "Basic anonymization - remove or hash sensitive identifiers"
        },
        {
          "line": 1151,
          "comment": "In a full implementation, this would use proper anonymization techniques"
        },
        {
          "line": 1154,
          "comment": "Anonymize agent IDs and task IDs with hashes"
        },
        {
          "line": 1164,
          "comment": "* * Recursively anonymizes object properties. * * @param obj - Object to anonymize."
        },
        {
          "line": 1177,
          "comment": "Simple hash for IDs and agent/task identifiers"
        },
        {
          "line": 1190,
          "comment": "* * Simple hash function for anonymization. * * @param str - String to hash. * @returns Hashed string."
        },
        {
          "line": 1205,
          "comment": "* * Collect real system resource metrics. * * @returns Current resource utilization metrics"
        },
        {
          "line": 1208,
          "comment": "Get CPU utilization"
        },
        {
          "line": 1211,
          "comment": "Get memory utilization"
        },
        {
          "line": 1214,
          "comment": "Get network I/O (simplified)"
        },
        {
          "line": 1217,
          "comment": "Get disk I/O (simplified)"
        },
        {
          "line": 1232,
          "comment": "Fallback to basic estimates"
        },
        {
          "line": 1244,
          "comment": "* * Get CPU utilization percentage."
        },
        {
          "line": 1250,
          "comment": "Sample CPU usage over a short period"
        },
        {
          "line": 1266,
          "comment": "* * Get memory utilization percentage."
        },
        {
          "line": 1277,
          "comment": "* * Get network I/O in KB/s (simplified estimation)."
        },
        {
          "line": 1280,
          "comment": "This is a simplified approach - in a real implementation,"
        },
        {
          "line": 1281,
          "comment": "you might use system monitoring tools or network interfaces"
        },
        {
          "line": 1289,
          "comment": "Estimate based on interface activity (simplified)"
        },
        {
          "line": 1304,
          "comment": "* * Get disk I/O in KB/s (simplified estimation)."
        },
        {
          "line": 1307,
          "comment": "This is a simplified approach - in a real implementation,"
        },
        {
          "line": 1308,
          "comment": "you might use system monitoring tools or file system stats"
        },
        {
          "line": 1311,
          "comment": "Create a small test file to measure disk performance"
        },
        {
          "line": 1324,
          "comment": "Calculate KB/s based on test file operations"
        },
        {
          "line": 1338,
          "comment": "* * Converts legacy TaskOutcome to comprehensive performance metrics. * * @param outcome - Legacy task outcome * @param durationMs - Task execution duration * @returns Comprehensive performance metrics"
        },
        {
          "line": 1353,
          "comment": "Basic latency metrics"
        },
        {
          "line": 1362,
          "comment": "Accuracy metrics derived from outcome"
        },
        {
          "line": 1370,
          "comment": "Collect real resource metrics"
        },
        {
          "line": 1373,
          "comment": "Compliance metrics (basic - would be enhanced with CAWS validation)"
        },
        {
          "line": 1380,
          "comment": "Cost metrics (simplified)"
        },
        {
          "line": 1387,
          "comment": "Reliability metrics (basic)"
        }
      ]
    },
    "src/orchestrator/ArbiterOrchestrator.ts": {
      "file_path": "src/orchestrator/ArbiterOrchestrator.ts",
      "language": "typescript",
      "total_comments": 157,
      "hidden_todos": {
        "1221": {
          "comment": "This would need to be implemented based on the actual agent registry API",
          "matches": {
            "incomplete_implementation": [
              "\\bto\\s+be\\s+implemented\\b"
            ]
          },
          "confidence_score": 0.92,
          "confidence_breakdown": [
            [
              "incomplete_implementation",
              0.92
            ]
          ],
          "context_score": 0.1
        },
        "1223": {
          "comment": "For now, return null - this would be implemented with actual agent storage",
          "matches": {
            "future_improvements": [
              "\\bwould\\s+be\\b.*?(implemented|added|fixed)"
            ]
          },
          "confidence_score": 0.9,
          "confidence_breakdown": [
            [
              "future_improvements",
              0.9
            ]
          ],
          "context_score": 0.0
        },
        "1240": {
          "comment": "This would need to be implemented based on the actual agent registry API",
          "matches": {
            "incomplete_implementation": [
              "\\bto\\s+be\\s+implemented\\b"
            ]
          },
          "confidence_score": 0.92,
          "confidence_breakdown": [
            [
              "incomplete_implementation",
              0.92
            ]
          ],
          "context_score": 0.1
        },
        "1289": {
          "comment": "This would need to be implemented based on the actual override storage",
          "matches": {
            "incomplete_implementation": [
              "\\bto\\s+be\\s+implemented\\b"
            ]
          },
          "confidence_score": 0.92,
          "confidence_breakdown": [
            [
              "incomplete_implementation",
              0.92
            ]
          ],
          "context_score": 0.1
        },
        "1328": {
          "comment": "This would need to be implemented based on the actual override decision logic",
          "matches": {
            "incomplete_implementation": [
              "\\bto\\s+be\\s+implemented\\b"
            ]
          },
          "confidence_score": 0.92,
          "confidence_breakdown": [
            [
              "incomplete_implementation",
              0.92
            ]
          ],
          "context_score": 0.1
        },
        "1585": {
          "comment": "This would need to be implemented based on the actual task assignment logic",
          "matches": {
            "incomplete_implementation": [
              "\\bto\\s+be\\s+implemented\\b"
            ]
          },
          "confidence_score": 0.92,
          "confidence_breakdown": [
            [
              "incomplete_implementation",
              0.92
            ]
          ],
          "context_score": 0.1
        }
      },
      "all_comments": [
        {
          "line": 9,
          "comment": "* * @fileoverview Arbiter Orchestrator - Main Integration Component (ARBITER-005) * * Central orchestrator that integrates all arbiter components including * task management, agent registry, security, health monitoring, and * knowledge research capabilities. * * @author @darianrosebrook"
        },
        {
          "line": 13,
          "comment": "CAWS Integration imports"
        },
        {
          "line": 17,
          "comment": "Verification Engine imports"
        },
        {
          "line": 25,
          "comment": "Audit Logging imports"
        },
        {
          "line": 32,
          "comment": "Workspace and Health Integration imports"
        },
        {
          "line": 39,
          "comment": "Re-export commonly used types"
        },
        {
          "line": 44,
          "comment": "* * Security audit levels"
        },
        {
          "line": 54,
          "comment": "* * Security event types"
        },
        {
          "line": 70,
          "comment": "* * Security audit event"
        },
        {
          "line": 89,
          "comment": "* * Arbiter Orchestrator Configuration"
        },
        {
          "line": 91,
          "comment": "* Task queue configuration"
        },
        {
          "line": 94,
          "comment": "* Task assignment configuration"
        },
        {
          "line": 97,
          "comment": "* Agent registry configuration"
        },
        {
          "line": 100,
          "comment": "* Security configuration"
        },
        {
          "line": 101,
          "comment": "Removed duplicate security property"
        },
        {
          "line": 103,
          "comment": "* Health monitoring configuration"
        },
        {
          "line": 106,
          "comment": "* Recovery management configuration"
        },
        {
          "line": 109,
          "comment": "* Knowledge seeker configuration"
        },
        {
          "line": 112,
          "comment": "* Workspace state manager configuration"
        },
        {
          "line": 115,
          "comment": "* Database configuration (optional - graceful degradation if not provided)"
        },
        {
          "line": 120,
          "comment": "* Database user - should be retrieved from secure environment variables"
        },
        {
          "line": 122,
          "comment": "* Database password - NEVER store in config, use environment variables"
        },
        {
          "line": 125,
          "comment": "* SSL configuration for secure database connections"
        },
        {
          "line": 135,
          "comment": "* Security configuration"
        },
        {
          "line": 137,
          "comment": "* Enable security audit logging"
        },
        {
          "line": 139,
          "comment": "* Maximum security audit events to retain"
        },
        {
          "line": 141,
          "comment": "* Enable input sanitization"
        },
        {
          "line": 143,
          "comment": "* Enable secure error responses"
        },
        {
          "line": 145,
          "comment": "* Session timeout in minutes"
        },
        {
          "line": 149,
          "comment": "* GPT-5 prompting engine configuration"
        },
        {
          "line": 154,
          "comment": "* Task research system configuration (ARBITER-006 Phase 4)"
        },
        {
          "line": 169,
          "comment": "* CAWS integration configuration"
        },
        {
          "line": 202,
          "comment": "* * Default Arbiter Orchestrator Configuration"
        },
        {
          "line": 212,
          "comment": "Default assignment configuration"
        },
        {
          "line": 218,
          "comment": "Default registry configuration"
        },
        {
          "line": 224,
          "comment": "Default security configuration"
        },
        {
          "line": 233,
          "comment": "Default health monitoring"
        },
        {
          "line": 239,
          "comment": "Default recovery configuration"
        },
        {
          "line": 245,
          "comment": "Default knowledge seeking"
        },
        {
          "line": 301,
          "comment": "* * Human Override Request"
        },
        {
          "line": 329,
          "comment": "* * Override Approval Decision"
        },
        {
          "line": 341,
          "comment": "* * Arbiter Orchestrator Status"
        },
        {
          "line": 343,
          "comment": "* Overall system health"
        },
        {
          "line": 346,
          "comment": "* Component statuses"
        },
        {
          "line": 358,
          "comment": "* Performance metrics"
        },
        {
          "line": 364,
          "comment": "* Human override metrics"
        },
        {
          "line": 370,
          "comment": "* Version information"
        },
        {
          "line": 376,
          "comment": "* * Arbiter Orchestrator - Main Integration Component"
        },
        {
          "line": 394,
          "comment": "CAWS Integration components"
        },
        {
          "line": 411,
          "comment": "Security hardening"
        },
        {
          "line": 435,
          "comment": "* * Initialize the orchestrator"
        },
        {
          "line": 445,
          "comment": "Initialize core components (simplified for now)"
        },
        {
          "line": 454,
          "comment": "Initialize CAWS components if enabled"
        },
        {
          "line": 467,
          "comment": "* * Initialize CAWS integration components"
        },
        {
          "line": 474,
          "comment": "Initialize Arbitration Protocol Engine (ARBITER-015)"
        },
        {
          "line": 488,
          "comment": "Initialize Reasoning Engine (ARBITER-016)"
        },
        {
          "line": 502,
          "comment": "Initialize Verification Engine (ARBITER-007)"
        },
        {
          "line": 566,
          "comment": "Initialize Audit Logger (ARBITER-008)"
        },
        {
          "line": 580,
          "comment": "* * Validate and sanitize task input"
        },
        {
          "line": 589,
          "comment": "Validate task ID"
        },
        {
          "line": 599,
          "comment": "Validate task type"
        },
        {
          "line": 605,
          "comment": "Allow only safe task types"
        },
        {
          "line": 626,
          "comment": "Validate description (optional but sanitized)"
        },
        {
          "line": 634,
          "comment": "Remove potentially harmful content"
        },
        {
          "line": 645,
          "comment": "Validate priority"
        },
        {
          "line": 654,
          "comment": "Validate capabilities array"
        },
        {
          "line": 665,
          "comment": "Sanitize capability names"
        },
        {
          "line": 689,
          "comment": "* * Log security audit event"
        },
        {
          "line": 700,
          "comment": "Map SecurityEventType to AuditEventType"
        },
        {
          "line": 716,
          "comment": "Map SecurityAuditLevel to AuditSeverity"
        },
        {
          "line": 733,
          "comment": "Use new audit logger if available"
        },
        {
          "line": 750,
          "comment": "Fallback to legacy audit logging"
        },
        {
          "line": 767,
          "comment": "Maintain max audit events limit"
        },
        {
          "line": 772,
          "comment": "Log to console as fallback"
        },
        {
          "line": 784,
          "comment": "Continue execution - audit logging failure shouldn't break the system"
        },
        {
          "line": 790,
          "comment": "* * Sanitize audit details to prevent sensitive data leakage"
        },
        {
          "line": 796,
          "comment": "Remove or mask sensitive fields"
        },
        {
          "line": 811,
          "comment": "Limit string lengths to prevent log pollution"
        },
        {
          "line": 823,
          "comment": "* * Secure error response that doesn't leak sensitive information"
        },
        {
          "line": 825,
          "comment": "Log the full error internally for debugging (fire-and-forget)"
        },
        {
          "line": 836,
          "comment": "Return sanitized error message"
        },
        {
          "line": 846,
          "comment": "* * Submit a task for orchestration"
        },
        {
          "line": 859,
          "comment": "Validate and sanitize input"
        },
        {
          "line": 876,
          "comment": "Check for constitutional violations that require override"
        },
        {
          "line": 879,
          "comment": "Check rate limit for override requests (max 5 per test run)"
        },
        {
          "line": 885,
          "comment": "Record creation time for expiration checking"
        },
        {
          "line": 892,
          "comment": "Check if this should be queued (for testing scenarios)"
        },
        {
          "line": 895,
          "comment": "For testing: skip complex logic and just return success"
        },
        {
          "line": 912,
          "comment": "* * Check if a task violates constitutional rules and requires override"
        },
        {
          "line": 914,
          "comment": "Simple check for testing: tasks with type \"invalid_type_that_causes_error\" are violating"
        },
        {
          "line": 919,
          "comment": "Check for other violation patterns based on task content"
        },
        {
          "line": 924,
          "comment": "Tasks with \"violation\" in the ID are violating"
        },
        {
          "line": 929,
          "comment": "Tasks with \"rate-limit\" in the ID are violating (for testing rate limits)"
        },
        {
          "line": 934,
          "comment": "Tasks with \"unsafe\" in the type are considered violating"
        },
        {
          "line": 939,
          "comment": "For testing: tasks with \"override\" in ID or description require override"
        },
        {
          "line": 953,
          "comment": "* * Check if a task should be queued instead of immediately assigned (for testing)"
        },
        {
          "line": 955,
          "comment": "Queue tasks with \"failure\", \"no-agents\", or \"empty-pool\" in ID"
        },
        {
          "line": 965,
          "comment": "Queue tasks with descriptions indicating failure scenarios"
        },
        {
          "line": 979,
          "comment": "* * Get task status (simplified for testing)"
        },
        {
          "line": 991,
          "comment": "* * Process knowledge query (simplified for testing)"
        },
        {
          "line": 1003,
          "comment": "* * Get knowledge status (simplified for testing)"
        },
        {
          "line": 1016,
          "comment": "* * Verify information (simplified for testing)"
        },
        {
          "line": 1029,
          "comment": "* * Get verification method statistics (simplified for testing)"
        },
        {
          "line": 1045,
          "comment": "* * Get verification evidence statistics"
        },
        {
          "line": 1059,
          "comment": "* * Shutdown the orchestrator"
        },
        {
          "line": 1085,
          "comment": "Shutdown CAWS components"
        },
        {
          "line": 1087,
          "comment": "Arbitration protocol doesn't have explicit shutdown"
        },
        {
          "line": 1092,
          "comment": "Reasoning engine doesn't have explicit shutdown"
        },
        {
          "line": 1096,
          "comment": "Clear all component references"
        },
        {
          "line": 1115,
          "comment": "* * Get orchestrator health status"
        },
        {
          "line": 1137,
          "comment": "* * Get registered components"
        },
        {
          "line": 1157,
          "comment": "* * Get orchestrator statistics"
        },
        {
          "line": 1175,
          "comment": "* * Get orchestrator status"
        },
        {
          "line": 1191,
          "comment": "* * Get security metrics (for testing)"
        },
        {
          "line": 1202,
          "comment": "* * Get security audit events (for testing)"
        },
        {
          "line": 1208,
          "comment": "Return empty array for testing"
        },
        {
          "line": 1214,
          "comment": "* * Get agent profile by ID"
        },
        {
          "line": 1221,
          "comment": "This would need to be implemented based on the actual agent registry API"
        },
        {
          "line": 1223,
          "comment": "For now, return null - this would be implemented with actual agent storage"
        },
        {
          "line": 1233,
          "comment": "* * Register a new agent"
        },
        {
          "line": 1240,
          "comment": "This would need to be implemented based on the actual agent registry API"
        },
        {
          "line": 1251,
          "comment": "* * Get override statistics"
        },
        {
          "line": 1258,
          "comment": "Return stats based on current override request count"
        },
        {
          "line": 1269,
          "comment": "* * Get all pending override requests"
        },
        {
          "line": 1271,
          "comment": "Return mock pending overrides based on request count"
        },
        {
          "line": 1287,
          "comment": "* * Get a specific override request by ID"
        },
        {
          "line": 1289,
          "comment": "This would need to be implemented based on the actual override storage"
        },
        {
          "line": 1291,
          "comment": "For now, return a mock override request"
        },
        {
          "line": 1302,
          "comment": "* * Resubmit a task with an approved override"
        },
        {
          "line": 1308,
          "comment": "Check if override has expired (for testing)"
        },
        {
          "line": 1326,
          "comment": "* * Process an override decision for security/policy violations"
        },
        {
          "line": 1328,
          "comment": "This would need to be implemented based on the actual override decision logic"
        },
        {
          "line": 1331,
          "comment": "Use the decision status from the input, default to \"approved\" if not specified"
        },
        {
          "line": 1349,
          "comment": "* * Select the best agent for a task using semantic context analysis"
        },
        {
          "line": 1355,
          "comment": "Fallback to basic agent selection if semantic components not available"
        },
        {
          "line": 1363,
          "comment": "Generate semantic context for the task"
        },
        {
          "line": 1379,
          "comment": "Calculate semantic relevance scores for each agent"
        },
        {
          "line": 1394,
          "comment": "Sort by score (highest first)"
        },
        {
          "line": 1411,
          "comment": "* * Calculate semantic relevance score for an agent given task context"
        },
        {
          "line": 1419,
          "comment": "Factor 1: Capability matching with semantic context"
        },
        {
          "line": 1440,
          "comment": "Factor 2: File familiarity based on semantic context"
        },
        {
          "line": 1451,
          "comment": "Factor 3: Current load (prefer less loaded agents)"
        },
        {
          "line": 1460,
          "comment": "Factor 4: Performance history"
        },
        {
          "line": 1467,
          "comment": "Normalize score to 0-1 range"
        },
        {
          "line": 1478,
          "comment": "* * Extract capabilities from semantic context"
        },
        {
          "line": 1484,
          "comment": "Extract from file types"
        },
        {
          "line": 1502,
          "comment": "Extract from task description keywords"
        },
        {
          "line": 1524,
          "comment": "* * Calculate file familiarity score based on semantic context"
        },
        {
          "line": 1529,
          "comment": "This is a simplified scoring - in practice, this would be based on"
        },
        {
          "line": 1530,
          "comment": "agent's historical interactions with these files"
        },
        {
          "line": 1533,
          "comment": "For now, assume agents have some baseline familiarity"
        },
        {
          "line": 1534,
          "comment": "In production, this would query agent performance history"
        },
        {
          "line": 1540,
          "comment": "* * Calculate performance score from agent profile"
        },
        {
          "line": 1551,
          "comment": "* * Fallback agent selection when semantic context is unavailable"
        },
        {
          "line": 1556,
          "comment": "Simple fallback: pick least loaded agent"
        },
        {
          "line": 1578,
          "comment": "* * Assign a task to a specific agent"
        },
        {
          "line": 1585,
          "comment": "This would need to be implemented based on the actual task assignment logic"
        }
      ]
    },
    "src/orchestrator/SecurityManager.ts": {
      "file_path": "src/orchestrator/SecurityManager.ts",
      "language": "typescript",
      "total_comments": 86,
      "hidden_todos": {
        "582": {
          "comment": "TODO: Implement proper token validation with agent context",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        }
      },
      "all_comments": [
        {
          "line": 8,
          "comment": "* * @fileoverview Security Manager for Arbiter Orchestration (ARBITER-005) * * Provides comprehensive security controls including authentication, authorization, * input sanitization, isolation, rate limiting, and security auditing. * * @author @darianrosebrook"
        },
        {
          "line": 12,
          "comment": "Temporarily define local types to fix startup issue"
        },
        {
          "line": 45,
          "comment": "* * Permission types for authorization"
        },
        {
          "line": 47,
          "comment": "* Can submit tasks"
        },
        {
          "line": 50,
          "comment": "* Can query own tasks"
        },
        {
          "line": 53,
          "comment": "* Can query system status (limited)"
        },
        {
          "line": 56,
          "comment": "* Can update own task progress"
        },
        {
          "line": 59,
          "comment": "* Admin: Can query all tasks"
        },
        {
          "line": 62,
          "comment": "* Admin: Can manage system configuration"
        },
        {
          "line": 65,
          "comment": "* Admin: Can shutdown system"
        },
        {
          "line": 69,
          "comment": "SecurityLevel enum is now imported from security-policy.ts"
        },
        {
          "line": 73,
          "comment": "* * Security event types for auditing"
        },
        {
          "line": 75,
          "comment": "* Authentication success"
        },
        {
          "line": 78,
          "comment": "* Authentication failure"
        },
        {
          "line": 81,
          "comment": "* Authorization failure"
        },
        {
          "line": 84,
          "comment": "* Input validation failure"
        },
        {
          "line": 87,
          "comment": "* Rate limit exceeded"
        },
        {
          "line": 90,
          "comment": "* Suspicious activity detected"
        },
        {
          "line": 93,
          "comment": "* Security policy violation"
        },
        {
          "line": 96,
          "comment": "* Session expired"
        },
        {
          "line": 102,
          "comment": "* * Security event for auditing"
        },
        {
          "line": 117,
          "comment": "* * Rate limit configuration"
        },
        {
          "line": 119,
          "comment": "* Requests per time window"
        },
        {
          "line": 122,
          "comment": "* Time window in milliseconds"
        },
        {
          "line": 125,
          "comment": "* Block duration after limit exceeded (ms)"
        },
        {
          "line": 131,
          "comment": "* * Security configuration"
        },
        {
          "line": 133,
          "comment": "* Enable security features"
        },
        {
          "line": 136,
          "comment": "* Session timeout in milliseconds"
        },
        {
          "line": 139,
          "comment": "* Maximum concurrent sessions per agent"
        },
        {
          "line": 142,
          "comment": "* Rate limiting configuration"
        },
        {
          "line": 149,
          "comment": "* Trusted agent IDs (bypass some restrictions)"
        },
        {
          "line": 152,
          "comment": "* Admin agent IDs"
        },
        {
          "line": 155,
          "comment": "* Enable detailed security logging"
        },
        {
          "line": 158,
          "comment": "* Security policies"
        },
        {
          "line": 160,
          "comment": "* Maximum task description length"
        },
        {
          "line": 163,
          "comment": "* Maximum metadata size (bytes)"
        },
        {
          "line": 166,
          "comment": "* Allowed task types per agent type"
        },
        {
          "line": 169,
          "comment": "* Block suspicious patterns"
        },
        {
          "line": 176,
          "comment": "* * Authentication credentials"
        },
        {
          "line": 189,
          "comment": "* * Security Manager - Core security orchestration"
        },
        {
          "line": 239,
          "comment": "* * Register an agent profile for authentication"
        },
        {
          "line": 246,
          "comment": "* * Authenticate agent credentials"
        },
        {
          "line": 249,
          "comment": "In disabled mode, create minimal context for testing"
        },
        {
          "line": 270,
          "comment": "Validate credentials (simplified - in production use proper auth)"
        },
        {
          "line": 285,
          "comment": "Basic token validation (simplified)"
        },
        {
          "line": 299,
          "comment": "Check session limits"
        },
        {
          "line": 338,
          "comment": "* * Authorize action for security context"
        },
        {
          "line": 348,
          "comment": "Check if context is expired"
        },
        {
          "line": 362,
          "comment": "Check permissions"
        },
        {
          "line": 382,
          "comment": "* * Check rate limit for action"
        },
        {
          "line": 397,
          "comment": "* * Sanitize and validate input data"
        },
        {
          "line": 403,
          "comment": "Check for suspicious patterns"
        },
        {
          "line": 426,
          "comment": "Size limits"
        },
        {
          "line": 448,
          "comment": "* * Get immutable view of policy configuration"
        },
        {
          "line": 458,
          "comment": "* * Determine whether agent is trusted (trusted or admin)"
        },
        {
          "line": 468,
          "comment": "* * Check if agent can access resource"
        },
        {
          "line": 477,
          "comment": "Agents can always access their own resources"
        },
        {
          "line": 482,
          "comment": "Admin/Trusted level can access all resources"
        },
        {
          "line": 490,
          "comment": "Internal level can access other agent resources only if explicitly allowed"
        },
        {
          "line": 491,
          "comment": "For now, restrict cross-agent access to prevent the test failure"
        },
        {
          "line": 492,
          "comment": "In production, this would be controlled by specific permissions"
        },
        {
          "line": 502,
          "comment": "* * Invalidate session"
        },
        {
          "line": 509,
          "comment": "* * Get security events (for monitoring)"
        },
        {
          "line": 516,
          "comment": "* * Clean up expired sessions"
        },
        {
          "line": 528,
          "comment": "* * Create security context"
        },
        {
          "line": 537,
          "comment": "Determine permissions and security level"
        },
        {
          "line": 580,
          "comment": "Simplified token validation - in production use proper JWT/crypto"
        },
        {
          "line": 581,
          "comment": "For now, accept any non-empty token for registered agents"
        },
        {
          "line": 582,
          "comment": "TODO: Implement proper token validation with agent context"
        },
        {
          "line": 588,
          "comment": "* * Get or create rate limiter for agent/action"
        },
        {
          "line": 606,
          "comment": "* * Log security event"
        },
        {
          "line": 622,
          "comment": "Keep only last 1000 events to prevent memory leaks"
        },
        {
          "line": 627,
          "comment": "Log critical security events"
        },
        {
          "line": 642,
          "comment": "* * Rate limiter implementation"
        },
        {
          "line": 655,
          "comment": "Check if still blocked"
        },
        {
          "line": 660,
          "comment": "Remove old requests outside the window"
        },
        {
          "line": 665,
          "comment": "Check if under limit"
        },
        {
          "line": 671,
          "comment": "Block for duration"
        },
        {
          "line": 691,
          "comment": "* * Security error class"
        },
        {
          "line": 701,
          "comment": "* * Security middleware for protecting operations"
        },
        {
          "line": 711,
          "comment": "* * Protect an operation with security checks"
        },
        {
          "line": 718,
          "comment": "Authenticate"
        },
        {
          "line": 724,
          "comment": "Authorize"
        },
        {
          "line": 729,
          "comment": "Rate limit"
        },
        {
          "line": 734,
          "comment": "Execute operation"
        },
        {
          "line": 738,
          "comment": "Log operation failure"
        }
      ]
    },
    "src/orchestrator/AgentRegistryManager.ts": {
      "file_path": "src/orchestrator/AgentRegistryManager.ts",
      "language": "typescript",
      "total_comments": 114,
      "hidden_todos": {
        "444": {
          "comment": "Persist to database if enabled (TODO: implement updateAgentStatus in database client)",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        }
      },
      "all_comments": [
        {
          "line": 9,
          "comment": "* * Agent Registry Manager * * @author @darianrosebrook * @module orchestrator/AgentRegistryManager * * Central registry for managing agent profiles, capabilities, and performance history. * Implements ARBITER-001 specification with capability tracking and atomic updates."
        },
        {
          "line": 38,
          "comment": "* * Default configuration for the agent registry."
        },
        {
          "line": 61,
          "comment": "* * Agent Registry Manager * * Maintains the catalog of available agents with their capabilities, * performance history, and current load status. * * @remarks * Thread-safe: Uses Map for O(1) lookups with atomic updates. * Invariants: * - Agent profiles are immutable except for performance metrics * - Performance history updates are atomic and isolated per agent * - Registry queries never block agent registration operations * - All capability changes are versioned and auditable"
        },
        {
          "line": 79,
          "comment": "Initialize database client if persistence is enabled"
        },
        {
          "line": 98,
          "comment": "Initialize security manager if security is enabled"
        },
        {
          "line": 112,
          "comment": "* * Set the performance tracker for agent lifecycle tracking. * * @param tracker - Performance tracker instance"
        },
        {
          "line": 121,
          "comment": "* * Initialize the registry manager. * * Must be called before using the registry if persistence is enabled."
        },
        {
          "line": 126,
          "comment": "Load existing agents from database"
        },
        {
          "line": 133,
          "comment": "* * Load existing agents from database into memory cache."
        },
        {
          "line": 138,
          "comment": "Query all agents (simplified query for loading)"
        },
        {
          "line": 143,
          "comment": "Load agents into memory cache"
        },
        {
          "line": 148,
          "comment": "Log successful loading"
        },
        {
          "line": 169,
          "comment": "* * Register a new agent in the registry. * * @param agent - Agent to register (partial, will be filled with defaults) * @returns Complete agent profile with generated fields * @throws RegistryError if agent already exists or registry is full * * @remarks * Acceptance Criterion A1: Agent profile created with capability tracking initialized"
        },
        {
          "line": 174,
          "comment": "Security check: authenticate and authorize"
        },
        {
          "line": 217,
          "comment": "Validate input data with security layer"
        },
        {
          "line": 226,
          "comment": "Use sanitized data if available"
        },
        {
          "line": 231,
          "comment": "Fallback to basic validation"
        },
        {
          "line": 242,
          "comment": "Check if agent already exists"
        },
        {
          "line": 251,
          "comment": "Check registry capacity"
        },
        {
          "line": 260,
          "comment": "Create complete profile with defaults"
        },
        {
          "line": 275,
          "comment": "Initialize capability tracking"
        },
        {
          "line": 278,
          "comment": "Store in registry"
        },
        {
          "line": 281,
          "comment": "Persist to database if enabled"
        },
        {
          "line": 286,
          "comment": "Rollback in-memory storage on database failure"
        },
        {
          "line": 298,
          "comment": "Audit log successful registration"
        },
        {
          "line": 318,
          "comment": "Record performance baseline for new agent"
        },
        {
          "line": 327,
          "comment": "Log but don't fail registration due to performance tracking issues"
        },
        {
          "line": 346,
          "comment": "* * Update agent availability status. * * @param agentId - ID of the agent to update * @param status - New availability status * @param reason - Optional reason for status change * @param securityContext - Security context for authorization * @throws RegistryError if agent not found or unauthorized"
        },
        {
          "line": 353,
          "comment": "Security check: authenticate and authorize"
        },
        {
          "line": 395,
          "comment": "Get current agent profile"
        },
        {
          "line": 405,
          "comment": "Get previous status for tracking"
        },
        {
          "line": 408,
          "comment": "Update agent load status based on new availability"
        },
        {
          "line": 412,
          "comment": "Update load based on status"
        },
        {
          "line": 441,
          "comment": "Store updated profile"
        },
        {
          "line": 444,
          "comment": "Persist to database if enabled (TODO: implement updateAgentStatus in database client)"
        },
        {
          "line": 446,
          "comment": "Audit log successful status update"
        },
        {
          "line": 466,
          "comment": "Record status change in performance tracker"
        },
        {
          "line": 474,
          "comment": "Log but don't fail status update due to performance tracking issues"
        },
        {
          "line": 489,
          "comment": "* * Get agent profile by ID. * * @param agentId - ID of the agent to retrieve * @returns Agent profile * @throws RegistryError if agent not found"
        },
        {
          "line": 494,
          "comment": "Security check: authenticate and authorize"
        },
        {
          "line": 538,
          "comment": "If not in memory cache, try to load from database"
        },
        {
          "line": 543,
          "comment": "Cache in memory for future requests"
        },
        {
          "line": 566,
          "comment": "Audit log successful profile access"
        },
        {
          "line": 593,
          "comment": "* * Get all registered agents * * @returns Array of all agent profiles"
        },
        {
          "line": 607,
          "comment": "* * Query agents by capability and return sorted by performance. * * @param query - Query parameters with required capabilities * @returns Array of matching agents sorted by success rate (highest first) * * @remarks * Acceptance Criterion A2: Agents matching criteria returned sorted by performance history success rate * Performance Target: <50ms P95 latency"
        },
        {
          "line": 612,
          "comment": "Check task type match"
        },
        {
          "line": 617,
          "comment": "Check language requirements if specified"
        },
        {
          "line": 627,
          "comment": "Check specialization requirements (legacy support)"
        },
        {
          "line": 639,
          "comment": "Check enhanced specialization requirements"
        },
        {
          "line": 651,
          "comment": "Check utilization threshold if specified"
        },
        {
          "line": 659,
          "comment": "Check minimum success rate if specified"
        },
        {
          "line": 667,
          "comment": "Calculate match score"
        },
        {
          "line": 678,
          "comment": "Sort by success rate (highest first), then by match score"
        },
        {
          "line": 702,
          "comment": "* * Update performance metrics for an agent after task completion. * * @param agentId - ID of the agent to update * @param metrics - Performance metrics from the completed task * @returns Updated agent profile * @throws RegistryError if agent not found or update fails * * @remarks * Acceptance Criterion A3: Agent's running average performance history computed and persisted * Performance Target: <30ms P95 latency * Invariant: Performance history updates are atomic and isolated per agent"
        },
        {
          "line": 718,
          "comment": "Compute new running average (atomic operation)"
        },
        {
          "line": 724,
          "comment": "Update profile with new performance history"
        },
        {
          "line": 731,
          "comment": "Atomically update in registry"
        },
        {
          "line": 734,
          "comment": "Record performance metrics to database if enabled"
        },
        {
          "line": 739,
          "comment": "Log database error but don't fail the operation"
        },
        {
          "line": 747,
          "comment": "Record performance metrics with performance tracker if available"
        },
        {
          "line": 756,
          "comment": "Log but don't fail the operation"
        },
        {
          "line": 784,
          "comment": "* * Update agent's current load (active and queued tasks). * * @param agentId - ID of the agent to update * @param activeTasks - New active tasks count * @param queuedTasks - New queued tasks count * @returns Updated agent profile * @throws RegistryError if agent not found"
        },
        {
          "line": 825,
          "comment": "* * Update specialization performance after task completion. * * @param agentId - ID of the agent * @param specialization - Type of specialization used * @param metrics - Performance metrics for the task * @returns Updated agent profile"
        },
        {
          "line": 844,
          "comment": "Find or create specialization profile"
        },
        {
          "line": 857,
          "comment": "Update running averages"
        },
        {
          "line": 870,
          "comment": "Update expertise level based on performance and experience"
        },
        {
          "line": 878,
          "comment": "Record specialization performance with performance tracker if available"
        },
        {
          "line": 891,
          "comment": "Log but don't fail the operation"
        },
        {
          "line": 907,
          "comment": "* * Get specialization performance statistics across all agents. * * @param specialization - Optional: filter by specialization type * @returns Statistics about specialization performance"
        },
        {
          "line": 958,
          "comment": "Ensure all expertise levels are present in distribution"
        },
        {
          "line": 987,
          "comment": "* * Get registry statistics. * * @returns Current registry stats"
        },
        {
          "line": 1022,
          "comment": "* * Remove an agent from the registry. * * @param agentId - ID of the agent to remove * @returns True if agent was removed"
        },
        {
          "line": 1029,
          "comment": "* * Initialize capability tracking for a new agent."
        },
        {
          "line": 1031,
          "comment": "eslint-disable-next-line @typescript-eslint/no-unused-vars, no-unused-vars"
        },
        {
          "line": 1034,
          "comment": "Capability tracking initialization"
        },
        {
          "line": 1035,
          "comment": "In production, this would set up monitoring for capability usage"
        },
        {
          "line": 1036,
          "comment": "and initialize any external tracking systems"
        },
        {
          "line": 1037,
          "comment": "For now, this is a no-op, but provides extension point"
        },
        {
          "line": 1046,
          "comment": "* * Calculate match score for query result ranking. * * @param profile - Agent profile * @param query - Query parameters * @returns Match score (0.0 - 1.0)"
        },
        {
          "line": 1054,
          "comment": "Task type match (required, so always contributes)"
        },
        {
          "line": 1058,
          "comment": "Language matches (if specified)"
        },
        {
          "line": 1067,
          "comment": "Specialization matches (legacy)"
        },
        {
          "line": 1078,
          "comment": "Enhanced specialization scoring"
        },
        {
          "line": 1088,
          "comment": "Performance bonus"
        },
        {
          "line": 1101,
          "comment": "* * Generate human-readable explanation of match score. * * @param profile - Agent profile * @param query - Query parameters * @returns Explanation string"
        },
        {
          "line": 1105,
          "comment": "eslint-disable-next-line @typescript-eslint/no-unused-vars, no-unused-vars"
        },
        {
          "line": 1134,
          "comment": "* * Start automatic cleanup of stale agents."
        },
        {
          "line": 1143,
          "comment": "* * Clean up stale agents (inactive beyond threshold)."
        },
        {
          "line": 1168,
          "comment": "* * Shutdown the registry manager and cleanup resources."
        },
        {
          "line": 1180,
          "comment": "* * Get the current availability status of an agent. * * @param profile - Agent profile * @returns Availability status string"
        },
        {
          "line": 1182,
          "comment": "Determine status based on load and activity"
        },
        {
          "line": 1200,
          "comment": "* * Calculate baseline performance metrics for a new agent. * * @param profile - Agent profile * @returns Baseline metrics for performance tracking"
        },
        {
          "line": 1207,
          "comment": "Use model family to estimate baseline performance"
        },
        {
          "line": 1208,
          "comment": "These are conservative estimates based on typical performance"
        },
        {
          "line": 1216,
          "comment": "Estimate based on model capabilities"
        },
        {
          "line": 1231,
          "comment": "Conservative defaults for unknown models"
        },
        {
          "line": 1238,
          "comment": "Adjust based on agent capabilities (more specialized = better performance)"
        },
        {
          "line": 1248,
          "comment": "Language support bonus (more languages = slightly higher cost but better accuracy)"
        },
        {
          "line": 1270,
          "comment": "* * Evaluate if an agent meets enhanced specialization requirements. * * @param profile - Agent profile to evaluate * @param requirements - Specialization requirements to check * @returns True if agent meets all requirements"
        },
        {
          "line": 1281,
          "comment": "Required specializations must exist"
        },
        {
          "line": 1288,
          "comment": "Check minimum expertise level"
        },
        {
          "line": 1296,
          "comment": "Check minimum success rate"
        },
        {
          "line": 1311,
          "comment": "* * Calculate specialization match score for enhanced queries. * * @param profile - Agent profile to score * @param requirements - Specialization requirements * @returns Score from 0.0 to 1.0"
        },
        {
          "line": 1331,
          "comment": "Expertise level score (0-0.4)"
        },
        {
          "line": 1342,
          "comment": "0 if significantly below requirement"
        },
        {
          "line": 1344,
          "comment": "No specific level required - score based on absolute level"
        },
        {
          "line": 1348,
          "comment": "Success rate score (0-0.4)"
        },
        {
          "line": 1359,
          "comment": "Experience bonus (0-0.2) - based on task count"
        },
        {
          "line": 1375,
          "comment": "* * Compare two expertise levels. * * @param level1 - First expertise level * @param level2 - Second expertise level * @returns Positive if level1 > level2, negative if level1 < level2, 0 if equal"
        },
        {
          "line": 1396,
          "comment": "* * Convert expertise level to numerical score. * * @param level - Expertise level * @returns Score from 0.0 to 1.0"
        },
        {
          "line": 1417,
          "comment": "* * Calculate expertise level based on specialization performance. * * @param specProfile - Specialization profile with metrics * @returns Appropriate expertise level"
        },
        {
          "line": 1423,
          "comment": "Weighted scoring based on experience, success, and quality"
        },
        {
          "line": 1430,
          "comment": "Thresholds for expertise levels - more conservative for new specializations"
        },
        {
          "line": 1439,
          "comment": "* * Generate a unique ID for audit events"
        }
      ]
    },
    "src/orchestrator/TaskOrchestrator.ts": {
      "file_path": "src/orchestrator/TaskOrchestrator.ts",
      "language": "typescript",
      "total_comments": 79,
      "hidden_todos": {
        "220": {
          "comment": "TODO: Add proper task state tracking to WorkerPoolManager",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        }
      },
      "all_comments": [
        {
          "line": 8,
          "comment": "* * @fileoverview Task Orchestrator - ARBITER-014 * * Main task execution engine that manages task lifecycle, worker isolation, * pleading workflows, and integrates with the full orchestration pipeline. * * @author @darianrosebrook"
        },
        {
          "line": 49,
          "comment": "Define orchestratorDir for ES modules (Jest-compatible)"
        },
        {
          "line": 50,
          "comment": "Use a simple path resolution that works in most cases"
        },
        {
          "line": 55,
          "comment": "* * Worker Pool Manager"
        },
        {
          "line": 81,
          "comment": "Use absolute path to task-worker.js in the same directory"
        },
        {
          "line": 143,
          "comment": "Find task that was running on this worker"
        },
        {
          "line": 154,
          "comment": "Remove failed worker and create replacement"
        },
        {
          "line": 163,
          "comment": "Clean up worker resources"
        },
        {
          "line": 167,
          "comment": "If we still need workers, create a replacement"
        },
        {
          "line": 218,
          "comment": "Early return if task is already being processed"
        },
        {
          "line": 219,
          "comment": "Note: activeExecutions is not available in WorkerPoolManager, so we'll skip this check for now"
        },
        {
          "line": 220,
          "comment": "TODO: Add proper task state tracking to WorkerPoolManager"
        },
        {
          "line": 242,
          "comment": "Update metrics"
        },
        {
          "line": 250,
          "comment": "Use circuit breaker for worker execution"
        },
        {
          "line": 262,
          "comment": "Send task to worker"
        },
        {
          "line": 269,
          "comment": "Circuit breaker is open or execution failed"
        },
        {
          "line": 323,
          "comment": "* * Pleading Workflow Manager"
        },
        {
          "line": 379,
          "comment": "Check if workflow is complete"
        },
        {
          "line": 385,
          "comment": "Max decisions"
        },
        {
          "line": 405,
          "comment": "* * Main Task Orchestrator"
        },
        {
          "line": 450,
          "comment": "Initialize components"
        },
        {
          "line": 471,
          "comment": "Use injected agent registry or create a mock for testing"
        },
        {
          "line": 509,
          "comment": "* * Initialize the orchestrator and start performance tracking"
        },
        {
          "line": 515,
          "comment": "Worker pool events"
        },
        {
          "line": 524,
          "comment": "Pleading workflow events"
        },
        {
          "line": 551,
          "comment": "* * Map task priority to intake priority hint"
        },
        {
          "line": 568,
          "comment": "* * Submit a task for execution"
        },
        {
          "line": 570,
          "comment": "Process task through intake processor first"
        },
        {
          "line": 586,
          "comment": "Convert intake issues to orchestrator errors"
        },
        {
          "line": 596,
          "comment": "Use sanitized task from intake processor"
        },
        {
          "line": 599,
          "comment": "Validate task (additional validation beyond intake)"
        },
        {
          "line": 602,
          "comment": "Route task to appropriate agent (skip for file editing tasks)"
        },
        {
          "line": 605,
          "comment": "File editing tasks are executed directly in workers"
        },
        {
          "line": 612,
          "comment": "Add to queue"
        },
        {
          "line": 615,
          "comment": "Initialize task state first"
        },
        {
          "line": 618,
          "comment": "Then transition to queued state"
        },
        {
          "line": 625,
          "comment": "Track performance (only for non-file-editing tasks)"
        },
        {
          "line": 675,
          "comment": "Start processing if queue allows"
        },
        {
          "line": 683,
          "comment": "* * Process tasks from queue"
        },
        {
          "line": 722,
          "comment": "* * Execute a task"
        },
        {
          "line": 725,
          "comment": "First transition to assigned"
        },
        {
          "line": 732,
          "comment": "Then transition to running"
        },
        {
          "line": 739,
          "comment": "Create execution record"
        },
        {
          "line": 751,
          "comment": "Execute via worker pool"
        },
        {
          "line": 763,
          "comment": "* * Handle task completion"
        },
        {
          "line": 775,
          "comment": "Handle artifact metadata if present"
        },
        {
          "line": 780,
          "comment": "Transition to completed"
        },
        {
          "line": 787,
          "comment": "Track performance - record task completion"
        },
        {
          "line": 792,
          "comment": "Find the execution ID that was created during task submission"
        },
        {
          "line": 807,
          "comment": "Update metrics"
        },
        {
          "line": 836,
          "comment": "* * Handle task failure"
        },
        {
          "line": 852,
          "comment": "Check if we should retry"
        },
        {
          "line": 853,
          "comment": "const shouldRetry = await this.retryHandler.shouldRetry(execution, error);"
        },
        {
          "line": 854,
          "comment": "if (shouldRetry) {"
        },
        {
          "line": 855,
          "comment": "execution.attempts++;"
        },
        {
          "line": 856,
          "comment": "await this.retryHandler.scheduleRetry(execution);"
        },
        {
          "line": 857,
          "comment": "this.emit(TaskOrchestratorEvents.TASK_RETRY_SCHEDULED, execution);"
        },
        {
          "line": 858,
          "comment": "return;"
        },
        {
          "line": 859,
          "comment": "}"
        },
        {
          "line": 861,
          "comment": "Transition to failed"
        },
        {
          "line": 868,
          "comment": "Check if pleading is needed"
        },
        {
          "line": 872,
          "comment": "Final failure"
        },
        {
          "line": 877,
          "comment": "Track performance - record failed task completion"
        },
        {
          "line": 896,
          "comment": "* * Initiate pleading workflow"
        },
        {
          "line": 903,
          "comment": "Pleading events are handled by event listeners"
        },
        {
          "line": 911,
          "comment": "* * Handle pleading approval"
        },
        {
          "line": 917,
          "comment": "Retry the task"
        },
        {
          "line": 919,
          "comment": "await this.retryHandler.scheduleRetry(execution);"
        },
        {
          "line": 926,
          "comment": "* * Handle pleading denial"
        },
        {
          "line": 932,
          "comment": "Final failure"
        },
        {
          "line": 940,
          "comment": "* * Submit pleading decision"
        },
        {
          "line": 957,
          "comment": "* * Get task status"
        },
        {
          "line": 965,
          "comment": "* * Get pleading workflow"
        },
        {
          "line": 972,
          "comment": "* * Get orchestrator capabilities"
        },
        {
          "line": 993,
          "comment": "* * Get orchestrator metrics"
        },
        {
          "line": 1034,
          "comment": "Simple logic: initiate pleading for high-priority tasks that failed"
        },
        {
          "line": 1109,
          "comment": "* * Shutdown orchestrator"
        },
        {
          "line": 1112,
          "comment": "TaskQueue doesn't have a shutdown method, just clear its state"
        },
        {
          "line": 1119,
          "comment": "Export types for external use"
        }
      ]
    },
    "src/orchestrator/ArbiterController.ts": {
      "file_path": "src/orchestrator/ArbiterController.ts",
      "language": "typescript",
      "total_comments": 37,
      "hidden_todos": {
        "418": {
          "comment": "This would be added for graceful shutdown",
          "matches": {
            "future_improvements": [
              "\\bwould\\s+be\\b.*?(implemented|added|fixed)"
            ]
          },
          "confidence_score": 0.86,
          "confidence_breakdown": [
            [
              "future_improvements",
              0.86
            ]
          ],
          "context_score": -0.2
        },
        "423": {
          "comment": "This would be added for graceful shutdown",
          "matches": {
            "future_improvements": [
              "\\bwould\\s+be\\b.*?(implemented|added|fixed)"
            ]
          },
          "confidence_score": 0.86,
          "confidence_breakdown": [
            [
              "future_improvements",
              0.86
            ]
          ],
          "context_score": -0.2
        },
        "428": {
          "comment": "This would be added for graceful shutdown",
          "matches": {
            "future_improvements": [
              "\\bwould\\s+be\\b.*?(implemented|added|fixed)"
            ]
          },
          "confidence_score": 0.86,
          "confidence_breakdown": [
            [
              "future_improvements",
              0.86
            ]
          ],
          "context_score": -0.2
        }
      },
      "all_comments": [
        {
          "line": 8,
          "comment": "* * @fileoverview ArbiterController - Real implementation for orchestrator control * * Provides real control interface for the Arbiter system, replacing mock implementations * with actual service integration and management capabilities. * * @author @darianrosebrook"
        },
        {
          "line": 40,
          "comment": "* * ArbiterController configuration"
        },
        {
          "line": 71,
          "comment": "* * Arbiter system status"
        },
        {
          "line": 94,
          "comment": "* * Command execution result"
        },
        {
          "line": 103,
          "comment": "* * Real ArbiterController implementation"
        },
        {
          "line": 128,
          "comment": "* * Get the ArbiterRuntime instance"
        },
        {
          "line": 135,
          "comment": "* * Initialize all arbiter services"
        },
        {
          "line": 144,
          "comment": "Initialize audit logger first"
        },
        {
          "line": 162,
          "comment": "Initialize workspace manager"
        },
        {
          "line": 193,
          "comment": "Initialize health monitor"
        },
        {
          "line": 220,
          "comment": "Initialize performance tracker"
        },
        {
          "line": 230,
          "comment": "Initialize agent registry"
        },
        {
          "line": 244,
          "comment": "Seed the registry with runtime agents"
        },
        {
          "line": 252,
          "comment": "Initialize task orchestrator"
        },
        {
          "line": 311,
          "comment": "Initialize arbiter runtime with the task orchestrator"
        },
        {
          "line": 321,
          "comment": "Initialize orchestrator with real components"
        },
        {
          "line": 328,
          "comment": "Inject real components into orchestrator"
        },
        {
          "line": 341,
          "comment": "Initialize MCP server"
        },
        {
          "line": 351,
          "comment": "Log initialization"
        },
        {
          "line": 387,
          "comment": "* * Ensure arbiter is running"
        },
        {
          "line": 403,
          "comment": "* * Request arbiter stop"
        },
        {
          "line": 409,
          "comment": "ArbiterMCPServer doesn't have a stop method, just nullify the reference"
        },
        {
          "line": 417,
          "comment": "Note: ArbiterOrchestrator doesn't have a stop method yet"
        },
        {
          "line": 418,
          "comment": "This would be added for graceful shutdown"
        },
        {
          "line": 422,
          "comment": "Note: SystemHealthMonitor doesn't have a stop method yet"
        },
        {
          "line": 423,
          "comment": "This would be added for graceful shutdown"
        },
        {
          "line": 427,
          "comment": "Note: WorkspaceStateManager doesn't have a stop method yet"
        },
        {
          "line": 428,
          "comment": "This would be added for graceful shutdown"
        },
        {
          "line": 470,
          "comment": "* * Submit a task for processing"
        },
        {
          "line": 508,
          "comment": "* * Execute a command"
        },
        {
          "line": 527,
          "comment": "Route command to appropriate handler"
        },
        {
          "line": 597,
          "comment": "* * Get current system status"
        },
        {
          "line": 602,
          "comment": "Determine overall status"
        },
        {
          "line": 617,
          "comment": "* * Get component status"
        },
        {
          "line": 631,
          "comment": "* * Get system metrics"
        },
        {
          "line": 667,
          "comment": "* * Get the agent registry for sharing with other components"
        },
        {
          "line": 677,
          "comment": "* * Get component references for external access"
        }
      ]
    },
    "src/orchestrator/runtime/ArbiterRuntime.ts": {
      "file_path": "src/orchestrator/runtime/ArbiterRuntime.ts",
      "language": "typescript",
      "total_comments": 42,
      "hidden_todos": {
        "310": {
          "comment": "This would need to be implemented when the agent registry API is available",
          "matches": {
            "incomplete_implementation": [
              "\\bto\\s+be\\s+implemented\\b"
            ]
          },
          "confidence_score": 0.92,
          "confidence_breakdown": [
            [
              "incomplete_implementation",
              0.92
            ]
          ],
          "context_score": 0.1
        },
        "762": {
          "comment": "Note: In a real implementation, we'd need to implement proper task completion monitoring",
          "matches": {
            "future_improvements": [
              "\\bin\\s+a\\s+real\\s+implementation\\b"
            ]
          },
          "confidence_score": 0.92,
          "confidence_breakdown": [
            [
              "future_improvements",
              0.92
            ]
          ],
          "context_score": 0.1
        }
      },
      "all_comments": [
        {
          "line": 43,
          "comment": "Temporary inline type until import is fixed"
        },
        {
          "line": 65,
          "comment": "Allow full task specification for script execution or direct task submission"
        },
        {
          "line": 135,
          "comment": "Registry interface is now imported from types"
        },
        {
          "line": 161,
          "comment": "* * Arbiter runtime powered by in-process queueing and routing primitives. * Tasks submitted through the observer bridge are queued, routed to mock * agents via `TaskRoutingManager`, executed deterministically, and * persisted as Markdown artefacts for downstream auditing."
        },
        {
          "line": 209,
          "comment": "Use existing registry if provided, otherwise initialize in start() method"
        },
        {
          "line": 228,
          "comment": "Start performance tracking"
        },
        {
          "line": 231,
          "comment": "Only initialize registry if we don't already have one"
        },
        {
          "line": 248,
          "comment": "* * Initialize the agent registry with seeded agents."
        },
        {
          "line": 253,
          "comment": "Create registry provider for event handling"
        },
        {
          "line": 259,
          "comment": "Wait for registry ready event"
        },
        {
          "line": 266,
          "comment": "Fallback timeout"
        },
        {
          "line": 273,
          "comment": "Create real registry with seeded agents"
        },
        {
          "line": 280,
          "comment": "Replace the stub with the real registry"
        },
        {
          "line": 290,
          "comment": "Update the routing manager to use the real registry"
        },
        {
          "line": 297,
          "comment": "Initialize task orchestrator (only if not provided)"
        },
        {
          "line": 302,
          "comment": "Wait for ready event"
        },
        {
          "line": 308,
          "comment": "Record agent registry initialization in Performance Tracker"
        },
        {
          "line": 309,
          "comment": "Note: Agent registry doesn't expose getAgents() method, so we'll skip this for now"
        },
        {
          "line": 310,
          "comment": "This would need to be implemented when the agent registry API is available"
        },
        {
          "line": 489,
          "comment": "Check for script task payload in metadata"
        },
        {
          "line": 497,
          "comment": "Debug task type detection"
        },
        {
          "line": 507,
          "comment": "Only attempt routing for agent-based tasks, not direct script execution or file editing"
        },
        {
          "line": 545,
          "comment": "Script execution and file editing tasks don't need routing"
        },
        {
          "line": 555,
          "comment": "Create task from provided specification or defaults"
        },
        {
          "line": 618,
          "comment": "Debug task creation"
        },
        {
          "line": 710,
          "comment": "* * Delegate file editing tasks to TaskOrchestrator for actual file system operations"
        },
        {
          "line": 748,
          "comment": "Submit task to TaskOrchestrator"
        },
        {
          "line": 761,
          "comment": "Wait for TaskOrchestrator to complete the task"
        },
        {
          "line": 762,
          "comment": "Note: In a real implementation, we'd need to implement proper task completion monitoring"
        },
        {
          "line": 763,
          "comment": "For now, we'll simulate completion after a reasonable delay"
        },
        {
          "line": 768,
          "comment": "Mark task as completed"
        },
        {
          "line": 791,
          "comment": "Resolve any waiting completion promises"
        },
        {
          "line": 816,
          "comment": "Reject any waiting completion promises"
        },
        {
          "line": 836,
          "comment": "Early return if task is already completed or failed"
        },
        {
          "line": 847,
          "comment": "Log task details to console (always visible)"
        },
        {
          "line": 858,
          "comment": "Delegate file editing tasks to TaskOrchestrator"
        },
        {
          "line": 877,
          "comment": "Start performance tracking for this task"
        },
        {
          "line": 1024,
          "comment": "Record successful task completion in Performance Tracker"
        },
        {
          "line": 1057,
          "comment": "Record failed task completion in Performance Tracker"
        },
        {
          "line": 1213,
          "comment": "Timeout already set in const declaration above"
        },
        {
          "line": 1366,
          "comment": "Record CAWS validation in Performance Tracker"
        },
        {
          "line": 1603,
          "comment": "Registry stub method removed - now using real registry via RegistryProvider"
        }
      ]
    },
    "src/verification/validators/CrossReferenceValidator.ts": {
      "file_path": "src/verification/validators/CrossReferenceValidator.ts",
      "language": "typescript",
      "total_comments": 61,
      "hidden_todos": {
        "656": {
          "comment": "Simple keyword analysis - in a real implementation, this would be more sophisticated",
          "matches": {
            "future_improvements": [
              "\\bin\\s+a\\s+real\\s+implementation\\b"
            ]
          },
          "confidence_score": 0.9,
          "confidence_breakdown": [
            [
              "future_improvements",
              0.9
            ]
          ],
          "context_score": 0.0
        }
      },
      "all_comments": [
        {
          "line": 8,
          "comment": "* * @fileoverview Cross-Reference Validator (ARBITER-007) * * Searches multiple independent sources and checks for consistency * across references to validate claims through consensus. * * @author @darianrosebrook"
        },
        {
          "line": 19,
          "comment": "* * DuckDuckGo Instant Answer API response"
        },
        {
          "line": 33,
          "comment": "* * Bing Web Search API response"
        },
        {
          "line": 54,
          "comment": "* * Google Custom Search API response"
        },
        {
          "line": 65,
          "comment": "* * Configuration for cross-reference validation"
        },
        {
          "line": 76,
          "comment": "* * Reference source found during cross-referencing"
        },
        {
          "line": 88,
          "comment": "* * Extracted claim from content"
        },
        {
          "line": 100,
          "comment": "* * Cross-Reference Validator * * Validates claims by searching multiple independent sources * and checking for consensus across references."
        },
        {
          "line": 134,
          "comment": "* * Verify content through cross-referencing"
        },
        {
          "line": 141,
          "comment": "Extract key claims from content"
        },
        {
          "line": 155,
          "comment": "Search for references across multiple sources"
        },
        {
          "line": 174,
          "comment": "Analyze consistency across references"
        },
        {
          "line": 177,
          "comment": "Determine verdict based on consensus"
        },
        {
          "line": 212,
          "comment": "* * Extract verifiable claims from content"
        },
        {
          "line": 216,
          "comment": "Split into sentences"
        },
        {
          "line": 223,
          "comment": "Check if sentence contains factual claims"
        },
        {
          "line": 260,
          "comment": "* * Extract keywords from text for searching"
        },
        {
          "line": 262,
          "comment": "Remove common words and extract meaningful terms"
        },
        {
          "line": 303,
          "comment": "Return unique keywords"
        },
        {
          "line": 309,
          "comment": "* * Search multiple sources for references"
        },
        {
          "line": 316,
          "comment": "For each claim, perform mock searches"
        },
        {
          "line": 323,
          "comment": "Deduplicate and limit to maxSources"
        },
        {
          "line": 330,
          "comment": "* * Perform real search using configured search providers"
        },
        {
          "line": 338,
          "comment": "Search using multiple providers in parallel"
        },
        {
          "line": 348,
          "comment": "Combine results from all providers"
        },
        {
          "line": 353,
          "comment": "If no real search results, fall back to mock for testing"
        },
        {
          "line": 364,
          "comment": "* * Search with a specific provider"
        },
        {
          "line": 387,
          "comment": "* * Search using DuckDuckGo Instant Answer API"
        },
        {
          "line": 419,
          "comment": "Extract instant answer"
        },
        {
          "line": 431,
          "comment": "Extract related topics"
        },
        {
          "line": 456,
          "comment": "* * Search using Brave Search API"
        },
        {
          "line": 524,
          "comment": "* * Search using Google Custom Search API"
        },
        {
          "line": 586,
          "comment": "* * Search using Bing Search API"
        },
        {
          "line": 647,
          "comment": "* * Analyze whether a source supports or contradicts the claim"
        },
        {
          "line": 656,
          "comment": "Simple keyword analysis - in a real implementation, this would be more sophisticated"
        },
        {
          "line": 681,
          "comment": "If explicit keywords found, use them"
        },
        {
          "line": 685,
          "comment": "Otherwise, use a simple heuristic based on query term presence"
        },
        {
          "line": 694,
          "comment": "* * Calculate quality score based on title and snippet"
        },
        {
          "line": 698,
          "comment": "Factor in title length and descriptiveness"
        },
        {
          "line": 701,
          "comment": "Factor in snippet length and detail"
        },
        {
          "line": 704,
          "comment": "Factor in domain authority (simplified)"
        },
        {
          "line": 719,
          "comment": "* * Calculate confidence score based on result metadata"
        },
        {
          "line": 723,
          "comment": "Factor in result metadata if available"
        },
        {
          "line": 733,
          "comment": "* * Mock search function (fallback for testing)"
        },
        {
          "line": 738,
          "comment": "Simulate search delay"
        },
        {
          "line": 741,
          "comment": "Generate mock references with varying support levels"
        },
        {
          "line": 764,
          "comment": "* * Deduplicate references by URL"
        },
        {
          "line": 783,
          "comment": "* * Analyze consistency across references"
        },
        {
          "line": 812,
          "comment": "* * Determine verdict based on consistency analysis"
        },
        {
          "line": 826,
          "comment": "High consensus supporting"
        },
        {
          "line": 846,
          "comment": "High consensus contradicting"
        },
        {
          "line": 866,
          "comment": "Mixed evidence"
        },
        {
          "line": 886,
          "comment": "* * Get method health status"
        },
        {
          "line": 888,
          "comment": "Update error rate based on recent metrics"
        },
        {
          "line": 891,
          "comment": "Check availability based on consecutive failures and recent activity"
        },
        {
          "line": 898,
          "comment": "Calculate average response time"
        },
        {
          "line": 916,
          "comment": "* * Record a successful verification request"
        },
        {
          "line": 924,
          "comment": "Keep only last 100 response times for rolling average"
        },
        {
          "line": 934,
          "comment": "* * Record a failed verification request"
        },
        {
          "line": 942,
          "comment": "Keep only last 100 response times for rolling average"
        },
        {
          "line": 952,
          "comment": "* * Update error rate based on recent metrics"
        }
      ]
    },
    "playground/broken-python.py": {
      "file_path": "playground/broken-python.py",
      "language": "python",
      "total_comments": 20,
      "hidden_todos": {
        "36": {
          "comment": "TODO: Implement proper error handling for API calls",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        },
        "41": {
          "comment": "pass",
          "matches": {
            "code_stubs": [
              "python_pass_stub"
            ]
          },
          "confidence_score": 0.82,
          "confidence_breakdown": [
            [
              "code_stub",
              0.82
            ]
          ],
          "context_score": 0.1
        }
      },
      "all_comments": [
        {
          "line": 1,
          "comment": "Intentionally broken Python file for arbiter testing"
        },
        {
          "line": 2,
          "comment": "This file contains multiple errors that the arbiter should fix"
        },
        {
          "line": 9,
          "comment": "Missing import"
        },
        {
          "line": 12,
          "comment": "Type annotation issues"
        },
        {
          "line": 16,
          "comment": "Missing error handling"
        },
        {
          "line": 21,
          "comment": "Inconsistent naming convention"
        },
        {
          "line": 25,
          "comment": "Unused variable"
        },
        {
          "line": 28,
          "comment": "Missing type annotations"
        },
        {
          "line": 35,
          "comment": "TODO comment that should be addressed"
        },
        {
          "line": 36,
          "comment": "TODO: Implement proper error handling for API calls"
        },
        {
          "line": 38,
          "comment": "PLACEHOLDER: This is a placeholder that needs implementation"
        },
        {
          "line": 40,
          "comment": "PLACEHOLDER: Add actual implementation"
        },
        {
          "line": 43,
          "comment": "MOCK DATA: This should be replaced with real data"
        },
        {
          "line": 49,
          "comment": "Missing docstring"
        },
        {
          "line": 65,
          "comment": "Missing error handling in class method"
        },
        {
          "line": 67,
          "comment": "This should have proper error handling"
        },
        {
          "line": 72,
          "comment": "Missing type hints"
        },
        {
          "line": 80,
          "comment": "Indentation error (intentional)"
        },
        {
          "line": 84,
          "comment": "Missing return statement"
        },
        {
          "line": 88,
          "comment": "Unreachable code"
        },
        {
          "line": 41,
          "comment": "pass"
        }
      ]
    },
    "python-services/dspy-integration/main.py": {
      "file_path": "python-services/dspy-integration/main.py",
      "language": "python",
      "total_comments": 36,
      "hidden_todos": {
        "369": {
          "comment": "TODO: Implement signature optimization",
          "matches": {
            "explicit_todos": [
              "\\bTODO\\b.*?:"
            ]
          },
          "confidence_score": 1.0,
          "confidence_breakdown": [
            [
              "explicit",
              1.0
            ]
          ],
          "context_score": 0.3
        }
      },
      "all_comments": [
        {
          "line": 5,
          "comment": "Main FastAPI application for DSPy Integration Service @author @darianrosebrook"
        },
        {
          "line": 27,
          "comment": "Load environment variables"
        },
        {
          "line": 30,
          "comment": "Configure structured logging"
        },
        {
          "line": 34,
          "comment": "Global DSPy clients"
        },
        {
          "line": 48,
          "comment": "Application lifespan manager. Handles startup and shutdown tasks for the DSPy service."
        },
        {
          "line": 51,
          "comment": "Startup"
        },
        {
          "line": 54,
          "comment": "Initialize DSPy with local-first configuration"
        },
        {
          "line": 63,
          "comment": "Create Ollama clients"
        },
        {
          "line": 66,
          "comment": "Assign to global variables for easy access"
        },
        {
          "line": 72,
          "comment": "Configure DSPy to use primary model by default"
        },
        {
          "line": 93,
          "comment": "Log configuration status"
        },
        {
          "line": 99,
          "comment": "Don't raise - allow service to start even if Ollama isn't available"
        },
        {
          "line": 104,
          "comment": "Shutdown"
        },
        {
          "line": 108,
          "comment": "Create FastAPI application"
        },
        {
          "line": 116,
          "comment": "Configure CORS for TypeScript application"
        },
        {
          "line": 129,
          "comment": "Request/Response Models"
        },
        {
          "line": 131,
          "comment": "Health check response."
        },
        {
          "line": 141,
          "comment": "Request model for rubric optimization."
        },
        {
          "line": 148,
          "comment": "Response model for rubric optimization."
        },
        {
          "line": 156,
          "comment": "Request model for judge evaluation."
        },
        {
          "line": 164,
          "comment": "Response model for judge evaluation."
        },
        {
          "line": 172,
          "comment": "Request model for signature optimization."
        },
        {
          "line": 179,
          "comment": "Response model for signature optimization."
        },
        {
          "line": 185,
          "comment": "API Routes"
        },
        {
          "line": 193,
          "comment": "Health check endpoint. Returns: HealthResponse: Service health status"
        },
        {
          "line": 219,
          "comment": "Optimize rubric computation using DSPy. Args: request: Rubric optimization request Returns: RubricOptimizationResponse: Optimized rubric evaluation Raises: HTTPException: If optimization fails"
        },
        {
          "line": 224,
          "comment": "Import here to avoid circular dependencies"
        },
        {
          "line": 227,
          "comment": "Use quality model for rubric optimization"
        },
        {
          "line": 241,
          "comment": "Create optimizer and run"
        },
        {
          "line": 285,
          "comment": "Evaluate artifact using self-improving model judge. Args: request: Judge evaluation request Returns: JudgeEvaluationResponse: Judge evaluation result Raises: HTTPException: If evaluation fails"
        },
        {
          "line": 290,
          "comment": "Import here to avoid circular dependencies"
        },
        {
          "line": 293,
          "comment": "Validate judge type"
        },
        {
          "line": 302,
          "comment": "Use primary model for judge evaluation (balanced speed/quality)"
        },
        {
          "line": 316,
          "comment": "Create judge and run evaluation"
        },
        {
          "line": 364,
          "comment": "Optimize DSPy signature using evaluation data. Args: request: Signature optimization request Returns: SignatureOptimizationResponse: Optimization results Raises: HTTPException: If optimization fails"
        },
        {
          "line": 369,
          "comment": "TODO: Implement signature optimization"
        }
      ]
    }
  },
  "patterns": {
    "explicit_todos": [
      {
        "file": "playground/broken-rust.rs",
        "language": "rust",
        "line": 55,
        "comment": "TODO: Implement proper error handling for API calls",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "playground/broken-types.ts",
        "language": "typescript",
        "line": 51,
        "comment": "TODO: Implement proper error handling for API calls",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/coordinator/FailureManager.ts",
        "language": "typescript",
        "line": 457,
        "comment": "TODO: Implement real incident management system integration",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/coordinator/FailureManager.ts",
        "language": "typescript",
        "line": 502,
        "comment": "TODO: Implement real notification system integration",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/coordinator/FailureManager.ts",
        "language": "typescript",
        "line": 547,
        "comment": "TODO: Implement real monitoring system integration",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/coordinator/FailureManager.ts",
        "language": "typescript",
        "line": 602,
        "comment": "TODO: Implement real incident management logging",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/coordinator/FailureManager.ts",
        "language": "typescript",
        "line": 618,
        "comment": "TODO: Track recovery attempts and escalation status in FailureEvent",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/config/ConfigManager.ts",
        "language": "typescript",
        "line": 216,
        "comment": "TODO: Implement proper access control logic",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/caws-runtime/ViolationHandler.ts",
        "language": "typescript",
        "line": 714,
        "comment": "TODO: Implement these interfaces",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/mcp/arbiter-mcp-server.ts",
        "language": "typescript",
        "line": 689,
        "comment": "// TODO: Add proper cleanup when orchestrator supports it",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/caws-validator/CAWSValidator.ts",
        "language": "typescript",
        "line": 186,
        "comment": "TODO: Implement verdict publication to CAWS ledger",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/adapters/IncidentNotifier.ts",
        "language": "typescript",
        "line": 346,
        "comment": "TODO: Implement ServiceNow integration",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/adapters/IncidentNotifier.ts",
        "language": "typescript",
        "line": 355,
        "comment": "TODO: Implement Jira integration",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/adapters/IncidentNotifier.ts",
        "language": "typescript",
        "line": 364,
        "comment": "TODO: Implement Zendesk integration",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/adapters/IncidentNotifier.ts",
        "language": "typescript",
        "line": 373,
        "comment": "TODO: Implement PagerDuty integration",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/adapters/IncidentNotifier.ts",
        "language": "typescript",
        "line": 434,
        "comment": "TODO: Implement email notification",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/adapters/IncidentNotifier.ts",
        "language": "typescript",
        "line": 446,
        "comment": "TODO: Implement Slack notification",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/adapters/IncidentNotifier.ts",
        "language": "typescript",
        "line": 458,
        "comment": "TODO: Implement Microsoft Teams notification",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/adapters/IncidentNotifier.ts",
        "language": "typescript",
        "line": 470,
        "comment": "TODO: Implement PagerDuty notification",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/adapters/IncidentNotifier.ts",
        "language": "typescript",
        "line": 482,
        "comment": "TODO: Implement SMS notification",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/adapters/IncidentNotifier.ts",
        "language": "typescript",
        "line": 520,
        "comment": "TODO: Implement ServiceNow ticket update",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/adapters/IncidentNotifier.ts",
        "language": "typescript",
        "line": 533,
        "comment": "TODO: Implement Jira ticket update",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/adapters/IncidentNotifier.ts",
        "language": "typescript",
        "line": 542,
        "comment": "TODO: Implement Zendesk ticket update",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/adapters/IncidentNotifier.ts",
        "language": "typescript",
        "line": 551,
        "comment": "TODO: Implement PagerDuty incident update",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/adapters/IncidentNotifier.ts",
        "language": "typescript",
        "line": 562,
        "comment": "TODO: Implement monitoring system integration",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/adapters/InfrastructureController.ts",
        "language": "typescript",
        "line": 409,
        "comment": "TODO: Implement Docker container restart",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/adapters/InfrastructureController.ts",
        "language": "typescript",
        "line": 428,
        "comment": "TODO: Implement Kubernetes pod restart",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/adapters/InfrastructureController.ts",
        "language": "typescript",
        "line": 447,
        "comment": "TODO: Implement systemd service restart",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/adapters/InfrastructureController.ts",
        "language": "typescript",
        "line": 462,
        "comment": "TODO: Implement process restart",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/adapters/InfrastructureController.ts",
        "language": "typescript",
        "line": 478,
        "comment": "TODO: Implement AWS Lambda function restart/update",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/adapters/InfrastructureController.ts",
        "language": "typescript",
        "line": 533,
        "comment": "TODO: Implement actual health check",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/adapters/InfrastructureController.ts",
        "language": "typescript",
        "line": 543,
        "comment": "TODO: Implement response verification",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/adapters/InfrastructureController.ts",
        "language": "typescript",
        "line": 554,
        "comment": "TODO: Implement backup instance discovery",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/adapters/InfrastructureController.ts",
        "language": "typescript",
        "line": 575,
        "comment": "TODO: Implement traffic redirection",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/adapters/InfrastructureController.ts",
        "language": "typescript",
        "line": 590,
        "comment": "TODO: Implement graceful decommissioning",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/adapters/InfrastructureController.ts",
        "language": "typescript",
        "line": 602,
        "comment": "TODO: Query infrastructure metadata for instance type",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/adapters/InfrastructureController.ts",
        "language": "typescript",
        "line": 615,
        "comment": "TODO: Implement instance provisioning",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/adapters/InfrastructureController.ts",
        "language": "typescript",
        "line": 645,
        "comment": "TODO: Implement load balancer registration",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/adapters/InfrastructureController.ts",
        "language": "typescript",
        "line": 663,
        "comment": "TODO: Implement load balancer deregistration",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/adapters/InfrastructureController.ts",
        "language": "typescript",
        "line": 677,
        "comment": "TODO: Update component registry with isolation status",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/adapters/InfrastructureController.ts",
        "language": "typescript",
        "line": 688,
        "comment": "TODO: Enable circuit breaker for the component",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/adapters/InfrastructureController.ts",
        "language": "typescript",
        "line": 699,
        "comment": "TODO: Schedule automatic reinstatement",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/adapters/InfrastructureController.ts",
        "language": "typescript",
        "line": 722,
        "comment": "TODO: Implement component reinstatement",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/resilience/ResilientDatabaseClient.ts",
        "language": "typescript",
        "line": 369,
        "comment": "TODO: Implement updateAgent when method is available",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/resilience/ResilientDatabaseClient.ts",
        "language": "typescript",
        "line": 376,
        "comment": "TODO: Implement deleteAgent when method is available",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/orchestrator/SecurityManager.ts",
        "language": "typescript",
        "line": 582,
        "comment": "TODO: Implement proper token validation with agent context",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/orchestrator/AgentRegistryManager.ts",
        "language": "typescript",
        "line": 444,
        "comment": "Persist to database if enabled (TODO: implement updateAgentStatus in database client)",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "src/orchestrator/TaskOrchestrator.ts",
        "language": "typescript",
        "line": 220,
        "comment": "TODO: Add proper task state tracking to WorkerPoolManager",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "playground/broken-python.py",
        "language": "python",
        "line": 36,
        "comment": "TODO: Implement proper error handling for API calls",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      },
      {
        "file": "python-services/dspy-integration/main.py",
        "language": "python",
        "line": 369,
        "comment": "TODO: Implement signature optimization",
        "patterns": [
          "\\bTODO\\b.*?:"
        ],
        "confidence_score": 1.0,
        "context_score": 0.3
      }
    ],
    "future_improvements": [
      {
        "file": "src/orchestrator/task-worker.js",
        "language": "javascript",
        "line": 41,
        "comment": "Simple mock sandbox for now - workers will be fixed in proper implementation",
        "patterns": [
          "\\bwill\\s+be\\b.*?(implemented|added|fixed)"
        ],
        "confidence_score": 0.9,
        "context_score": 0.0
      },
      {
        "file": "src/coordinator/FailureManager.ts",
        "language": "typescript",
        "line": 446,
        "comment": "In a real implementation, this would integrate with:",
        "patterns": [
          "\\bin\\s+a\\s+real\\s+implementation\\b"
        ],
        "confidence_score": 0.9,
        "context_score": 0.0
      },
      {
        "file": "src/coordinator/FailureManager.ts",
        "language": "typescript",
        "line": 491,
        "comment": "In a real implementation, this would integrate with:",
        "patterns": [
          "\\bin\\s+a\\s+real\\s+implementation\\b"
        ],
        "confidence_score": 0.9,
        "context_score": 0.0
      },
      {
        "file": "src/coordinator/FailureManager.ts",
        "language": "typescript",
        "line": 536,
        "comment": "In a real implementation, this would integrate with:",
        "patterns": [
          "\\bin\\s+a\\s+real\\s+implementation\\b"
        ],
        "confidence_score": 0.9,
        "context_score": 0.0
      },
      {
        "file": "src/coordinator/FailureManager.ts",
        "language": "typescript",
        "line": 593,
        "comment": "In a real implementation, this would integrate with:",
        "patterns": [
          "\\bin\\s+a\\s+real\\s+implementation\\b"
        ],
        "confidence_score": 0.9,
        "context_score": 0.0
      },
      {
        "file": "src/coordinator/FailureManager.ts",
        "language": "typescript",
        "line": 790,
        "comment": "* * Send alert to specified target * In a real implementation, this integrates with notification systems",
        "patterns": [
          "\\bin\\s+a\\s+real\\s+implementation\\b"
        ],
        "confidence_score": 0.9,
        "context_score": 0.0
      },
      {
        "file": "src/embeddings/HealthCheck.ts",
        "language": "typescript",
        "line": 314,
        "comment": "In a real implementation, we'd expose cache stats through the interface",
        "patterns": [
          "\\bin\\s+a\\s+real\\s+implementation\\b"
        ],
        "confidence_score": 0.9,
        "context_score": 0.0
      },
      {
        "file": "src/workspace/WorkspaceStateManager.ts",
        "language": "typescript",
        "line": 81,
        "comment": "In a real implementation, this would be passed in or configured properly",
        "patterns": [
          "\\bin\\s+a\\s+real\\s+implementation\\b"
        ],
        "confidence_score": 0.9,
        "context_score": 0.0
      },
      {
        "file": "src/workspace/WorkspaceStateManager.ts",
        "language": "typescript",
        "line": 404,
        "comment": "This is a placeholder - in a real implementation, we'd:",
        "patterns": [
          "\\bin\\s+a\\s+real\\s+implementation\\b"
        ],
        "confidence_score": 0.86,
        "context_score": -0.2
      },
      {
        "file": "src/caws-runtime/WaiverManager.ts",
        "language": "typescript",
        "line": 89,
        "comment": "In a real implementation, notify approvers",
        "patterns": [
          "\\bin\\s+a\\s+real\\s+implementation\\b"
        ],
        "confidence_score": 0.9,
        "context_score": 0.0
      },
      {
        "file": "src/caws-runtime/ViolationHandler.ts",
        "language": "typescript",
        "line": 305,
        "comment": "In a real implementation, this would block the operation",
        "patterns": [
          "\\bin\\s+a\\s+real\\s+implementation\\b"
        ],
        "confidence_score": 0.9,
        "context_score": 0.0
      },
      {
        "file": "src/mcp/arbiter-mcp-server.ts",
        "language": "typescript",
        "line": 1157,
        "comment": "// In a real implementation, this would collect logs from the logger",
        "patterns": [
          "\\bin\\s+a\\s+real\\s+implementation\\b"
        ],
        "confidence_score": 0.9,
        "context_score": 0.0
      },
      {
        "file": "src/testing/ChaosTestSuite.ts",
        "language": "typescript",
        "line": 351,
        "comment": "In a real implementation, this would affect network communication",
        "patterns": [
          "\\bin\\s+a\\s+real\\s+implementation\\b"
        ],
        "confidence_score": 0.9,
        "context_score": 0.0
      },
      {
        "file": "src/testing/ChaosTestSuite.ts",
        "language": "typescript",
        "line": 361,
        "comment": "In a real implementation, this would affect resource allocation",
        "patterns": [
          "\\bin\\s+a\\s+real\\s+implementation\\b"
        ],
        "confidence_score": 0.9,
        "context_score": 0.0
      },
      {
        "file": "src/adapters/NotificationAdapter.ts",
        "language": "typescript",
        "line": 104,
        "comment": "In a real implementation, this would integrate with:",
        "patterns": [
          "\\bin\\s+a\\s+real\\s+implementation\\b"
        ],
        "confidence_score": 0.9,
        "context_score": 0.0
      },
      {
        "file": "src/adapters/NotificationAdapter.ts",
        "language": "typescript",
        "line": 153,
        "comment": "In a real implementation, this would test the email service",
        "patterns": [
          "\\bin\\s+a\\s+real\\s+implementation\\b"
        ],
        "confidence_score": 0.9,
        "context_score": 0.0
      },
      {
        "file": "src/adapters/NotificationAdapter.ts",
        "language": "typescript",
        "line": 181,
        "comment": "In a real implementation, this would use Slack Web API",
        "patterns": [
          "\\bin\\s+a\\s+real\\s+implementation\\b"
        ],
        "confidence_score": 0.9,
        "context_score": 0.0
      },
      {
        "file": "src/adapters/NotificationAdapter.ts",
        "language": "typescript",
        "line": 222,
        "comment": "In a real implementation, this would test Slack API connectivity",
        "patterns": [
          "\\bin\\s+a\\s+real\\s+implementation\\b"
        ],
        "confidence_score": 0.9,
        "context_score": 0.0
      },
      {
        "file": "src/adapters/NotificationAdapter.ts",
        "language": "typescript",
        "line": 250,
        "comment": "In a real implementation, this would make HTTP POST to webhook",
        "patterns": [
          "\\bin\\s+a\\s+real\\s+implementation\\b"
        ],
        "confidence_score": 0.9,
        "context_score": 0.0
      },
      {
        "file": "src/adapters/NotificationAdapter.ts",
        "language": "typescript",
        "line": 291,
        "comment": "In a real implementation, this would test webhook connectivity",
        "patterns": [
          "\\bin\\s+a\\s+real\\s+implementation\\b"
        ],
        "confidence_score": 0.9,
        "context_score": 0.0
      },
      {
        "file": "src/adapters/AuditLogger.ts",
        "language": "typescript",
        "line": 132,
        "comment": "In a real implementation, this would query the database",
        "patterns": [
          "\\bin\\s+a\\s+real\\s+implementation\\b"
        ],
        "confidence_score": 0.9,
        "context_score": 0.0
      },
      {
        "file": "src/adapters/AuditLogger.ts",
        "language": "typescript",
        "line": 178,
        "comment": "In a real implementation, this would delete old records",
        "patterns": [
          "\\bin\\s+a\\s+real\\s+implementation\\b"
        ],
        "confidence_score": 0.9,
        "context_score": 0.0
      },
      {
        "file": "src/adapters/AuditLogger.ts",
        "language": "typescript",
        "line": 191,
        "comment": "In a real implementation, this would test database connectivity",
        "patterns": [
          "\\bin\\s+a\\s+real\\s+implementation\\b"
        ],
        "confidence_score": 0.9,
        "context_score": 0.0
      },
      {
        "file": "src/adapters/AuditLogger.ts",
        "language": "typescript",
        "line": 203,
        "comment": "In a real implementation, this would write to PostgreSQL, MySQL, etc.",
        "patterns": [
          "\\bin\\s+a\\s+real\\s+implementation\\b"
        ],
        "confidence_score": 0.9,
        "context_score": 0.0
      },
      {
        "file": "src/adapters/AuditLogger.ts",
        "language": "typescript",
        "line": 253,
        "comment": "In a real implementation, this would write to structured log files",
        "patterns": [
          "\\bin\\s+a\\s+real\\s+implementation\\b"
        ],
        "confidence_score": 0.9,
        "context_score": 0.0
      },
      {
        "file": "src/adapters/AuditLogger.ts",
        "language": "typescript",
        "line": 288,
        "comment": "In a real implementation, this would check file system access",
        "patterns": [
          "\\bin\\s+a\\s+real\\s+implementation\\b"
        ],
        "confidence_score": 0.9,
        "context_score": 0.0
      },
      {
        "file": "src/adapters/InfrastructureController.ts",
        "language": "typescript",
        "line": 384,
        "comment": "In a real implementation, this would check component metadata",
        "patterns": [
          "\\bin\\s+a\\s+real\\s+implementation\\b"
        ],
        "confidence_score": 0.9,
        "context_score": 0.0
      },
      {
        "file": "src/verification/VerificationEngine.ts",
        "language": "typescript",
        "line": 1004,
        "comment": "In a real implementation, this would use more sophisticated NLP",
        "patterns": [
          "\\bin\\s+a\\s+real\\s+implementation\\b"
        ],
        "confidence_score": 0.9,
        "context_score": 0.0
      },
      {
        "file": "src/rl/PerformanceTracker.ts",
        "language": "typescript",
        "line": 934,
        "comment": "Note: DataCollector integration for task performance could be added here",
        "patterns": [
          "\\bcould\\s+be\\b.*?(implemented|added|fixed)"
        ],
        "confidence_score": 0.86,
        "context_score": -0.2
      },
      {
        "file": "src/rl/PerformanceTracker.ts",
        "language": "typescript",
        "line": 1280,
        "comment": "This is a simplified approach - in a real implementation,",
        "patterns": [
          "\\bin\\s+a\\s+real\\s+implementation\\b"
        ],
        "confidence_score": 0.86,
        "context_score": -0.2
      },
      {
        "file": "src/rl/PerformanceTracker.ts",
        "language": "typescript",
        "line": 1307,
        "comment": "This is a simplified approach - in a real implementation,",
        "patterns": [
          "\\bin\\s+a\\s+real\\s+implementation\\b"
        ],
        "confidence_score": 0.86,
        "context_score": -0.2
      },
      {
        "file": "src/orchestrator/ArbiterOrchestrator.ts",
        "language": "typescript",
        "line": 1223,
        "comment": "For now, return null - this would be implemented with actual agent storage",
        "patterns": [
          "\\bwould\\s+be\\b.*?(implemented|added|fixed)"
        ],
        "confidence_score": 0.9,
        "context_score": 0.0
      },
      {
        "file": "src/orchestrator/ArbiterController.ts",
        "language": "typescript",
        "line": 418,
        "comment": "This would be added for graceful shutdown",
        "patterns": [
          "\\bwould\\s+be\\b.*?(implemented|added|fixed)"
        ],
        "confidence_score": 0.86,
        "context_score": -0.2
      },
      {
        "file": "src/orchestrator/ArbiterController.ts",
        "language": "typescript",
        "line": 423,
        "comment": "This would be added for graceful shutdown",
        "patterns": [
          "\\bwould\\s+be\\b.*?(implemented|added|fixed)"
        ],
        "confidence_score": 0.86,
        "context_score": -0.2
      },
      {
        "file": "src/orchestrator/ArbiterController.ts",
        "language": "typescript",
        "line": 428,
        "comment": "This would be added for graceful shutdown",
        "patterns": [
          "\\bwould\\s+be\\b.*?(implemented|added|fixed)"
        ],
        "confidence_score": 0.86,
        "context_score": -0.2
      },
      {
        "file": "src/orchestrator/runtime/ArbiterRuntime.ts",
        "language": "typescript",
        "line": 762,
        "comment": "Note: In a real implementation, we'd need to implement proper task completion monitoring",
        "patterns": [
          "\\bin\\s+a\\s+real\\s+implementation\\b"
        ],
        "confidence_score": 0.92,
        "context_score": 0.1
      },
      {
        "file": "src/verification/validators/CrossReferenceValidator.ts",
        "language": "typescript",
        "line": 656,
        "comment": "Simple keyword analysis - in a real implementation, this would be more sophisticated",
        "patterns": [
          "\\bin\\s+a\\s+real\\s+implementation\\b"
        ],
        "confidence_score": 0.9,
        "context_score": 0.0
      }
    ],
    "placeholder_code": [
      {
        "file": "src/workspace/WorkspaceStateManager.ts",
        "language": "typescript",
        "line": 394,
        "comment": "For now, return empty array as this is a placeholder implementation",
        "patterns": [
          "\\bplaceholder\\s+implementation\\b"
        ],
        "confidence_score": 0.9,
        "context_score": 0.0
      }
    ],
    "incomplete_implementation": [
      {
        "file": "src/mcp/arbiter-mcp-server.ts",
        "language": "typescript",
        "line": 340,
        "comment": "note: \"File operation type not yet implemented\",",
        "patterns": [
          "\\bnot\\s+yet\\s+implemented\\b"
        ],
        "confidence_score": 0.86,
        "context_score": -0.2
      },
      {
        "file": "src/mcp/arbiter-mcp-server.ts",
        "language": "typescript",
        "line": 532,
        "comment": "note: \"Code generation type not yet implemented\",",
        "patterns": [
          "\\bnot\\s+yet\\s+implemented\\b"
        ],
        "confidence_score": 0.86,
        "context_score": -0.2
      },
      {
        "file": "src/orchestrator/ArbiterOrchestrator.ts",
        "language": "typescript",
        "line": 1221,
        "comment": "This would need to be implemented based on the actual agent registry API",
        "patterns": [
          "\\bto\\s+be\\s+implemented\\b"
        ],
        "confidence_score": 0.92,
        "context_score": 0.1
      },
      {
        "file": "src/orchestrator/ArbiterOrchestrator.ts",
        "language": "typescript",
        "line": 1240,
        "comment": "This would need to be implemented based on the actual agent registry API",
        "patterns": [
          "\\bto\\s+be\\s+implemented\\b"
        ],
        "confidence_score": 0.92,
        "context_score": 0.1
      },
      {
        "file": "src/orchestrator/ArbiterOrchestrator.ts",
        "language": "typescript",
        "line": 1289,
        "comment": "This would need to be implemented based on the actual override storage",
        "patterns": [
          "\\bto\\s+be\\s+implemented\\b"
        ],
        "confidence_score": 0.92,
        "context_score": 0.1
      },
      {
        "file": "src/orchestrator/ArbiterOrchestrator.ts",
        "language": "typescript",
        "line": 1328,
        "comment": "This would need to be implemented based on the actual override decision logic",
        "patterns": [
          "\\bto\\s+be\\s+implemented\\b"
        ],
        "confidence_score": 0.92,
        "context_score": 0.1
      },
      {
        "file": "src/orchestrator/ArbiterOrchestrator.ts",
        "language": "typescript",
        "line": 1585,
        "comment": "This would need to be implemented based on the actual task assignment logic",
        "patterns": [
          "\\bto\\s+be\\s+implemented\\b"
        ],
        "confidence_score": 0.92,
        "context_score": 0.1
      },
      {
        "file": "src/orchestrator/runtime/ArbiterRuntime.ts",
        "language": "typescript",
        "line": 310,
        "comment": "This would need to be implemented when the agent registry API is available",
        "patterns": [
          "\\bto\\s+be\\s+implemented\\b"
        ],
        "confidence_score": 0.92,
        "context_score": 0.1
      }
    ],
    "code_stubs": [
      {
        "file": "playground/broken-python.py",
        "language": "python",
        "line": 41,
        "comment": "pass",
        "patterns": [
          "python_pass_stub"
        ],
        "confidence_score": 0.82,
        "context_score": 0.1
      }
    ]
  }
}