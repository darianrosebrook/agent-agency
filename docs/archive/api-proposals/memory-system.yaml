openapi: 3.0.3
info:
  title: Memory System API
  description: API for multi-tenant memory management and context offloading
  version: 1.0.0
  contact:
    name: @darianrosebrook

servers:
  - url: http://localhost:3000/api/v1/memory
    description: Development server
  - url: https://api.agent-agency.com/v1/memory
    description: Production server

paths:
  /tenants:
    post:
      summary: Register a new tenant
      operationId: registerTenant
      tags:
        - Tenant Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantRegistration'
      responses:
        '201':
          description: Tenant registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  tenantId:
                    type: string
                  status:
                    type: string
                    enum: [active, pending]
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /tenants/{tenantId}/isolation:
    get:
      summary: Check tenant isolation status
      operationId: getTenantIsolation
      tags:
        - Tenant Management
      parameters:
        - name: tenantId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Tenant isolation status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantIsolationStatus'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /experiences:
    post:
      summary: Store agent experience
      operationId: storeExperience
      tags:
        - Experience Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExperienceData'
      responses:
        '201':
          description: Experience stored successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  experienceId:
                    type: string
                  stored:
                    type: boolean
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

    get:
      summary: Search experiences with similarity
      operationId: searchExperiences
      tags:
        - Experience Management
      parameters:
        - name: tenantId
          in: query
          required: true
          schema:
            type: string
        - name: query
          in: query
          required: true
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: threshold
          in: query
          schema:
            type: number
            minimum: 0
            maximum: 1
            default: 0.7
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExperienceSearchResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /context/offload:
    post:
      summary: Offload task context
      operationId: offloadContext
      tags:
        - Context Offloading
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContextOffloadRequest'
      responses:
        '200':
          description: Context offloaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContextOffloadResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /context/reconstruct:
    post:
      summary: Reconstruct offloaded context
      operationId: reconstructContext
      tags:
        - Context Offloading
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContextReconstructionRequest'
      responses:
        '200':
          description: Context reconstructed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContextReconstructionResult'
        '404':
          description: Context not found
        '500':
          $ref: '#/components/responses/InternalServerError'

  /federated/insights:
    post:
      summary: Aggregate federated insights
      operationId: aggregateFederatedInsights
      tags:
        - Federated Learning
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FederatedAggregationRequest'
      responses:
        '200':
          description: Insights aggregated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FederatedInsights'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /knowledge/graph/query:
    post:
      summary: Query knowledge graph with multi-hop reasoning
      operationId: queryKnowledgeGraph
      tags:
        - Knowledge Graph
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KnowledgeGraphQuery'
      responses:
        '200':
          description: Query results with reasoning paths
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KnowledgeGraphResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    TenantRegistration:
      type: object
      required:
        - projectId
        - name
        - isolationLevel
      properties:
        projectId:
          type: string
        name:
          type: string
        isolationLevel:
          type: string
          enum: [strict, shared, federated]
        accessPolicies:
          type: array
          items:
            $ref: '#/components/schemas/AccessPolicy'
        sharingRules:
          type: array
          items:
            $ref: '#/components/schemas/SharingRule'
        dataRetention:
          $ref: '#/components/schemas/RetentionPolicy'

    AccessPolicy:
      type: object
      required:
        - resourceType
        - accessLevel
      properties:
        resourceType:
          type: string
          enum: [memory, entity, relationship, embedding]
        accessLevel:
          type: string
          enum: [read, write, share, federate]
        allowedTenants:
          type: array
          items:
            type: string

    SharingRule:
      type: object
      required:
        - targetTenant
        - resourceTypes
      properties:
        targetTenant:
          type: string
        resourceTypes:
          type: array
          items:
            type: string
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/SharingCondition'
        anonymizationLevel:
          type: string
          enum: [none, basic, full]

    SharingCondition:
      type: object
      required:
        - type
        - value
        - operator
      properties:
        type:
          type: string
          enum: [similarity_threshold, performance_requirement, trust_level]
        value:
          type: string
        operator:
          type: string
          enum: [gt, gte, lt, lte, eq, contains]

    RetentionPolicy:
      type: object
      required:
        - defaultRetentionDays
        - archivalPolicy
      properties:
        defaultRetentionDays:
          type: integer
          minimum: 1
        archivalPolicy:
          type: string
          enum: [delete, compress, archive]
        complianceRequirements:
          type: array
          items:
            type: string

    TenantIsolationStatus:
      type: object
      required:
        - tenantId
        - isolationLevel
        - isIsolated
        - lastChecked
      properties:
        tenantId:
          type: string
        isolationLevel:
          type: string
        isIsolated:
          type: boolean
        lastChecked:
          type: string
          format: date-time
        rlsEnabled:
          type: boolean
        auditLogCount:
          type: integer

    ExperienceData:
      type: object
      required:
        - tenantId
        - agentId
        - type
        - content
        - outcome
        - relevanceScore
      properties:
        tenantId:
          type: string
        agentId:
          type: string
        taskId:
          type: string
        type:
          type: string
        content:
          type: object
          additionalProperties: true
        outcome:
          type: string
          enum: [success, failure, partial]
        relevanceScore:
          type: number
          minimum: 0
          maximum: 1
        contextMatch:
          $ref: '#/components/schemas/ContextMatch'
        reasoningPath:
          $ref: '#/components/schemas/ReasoningPath'
        temporalRelevance:
          $ref: '#/components/schemas/TemporalRelevance'
        weight:
          type: number
          minimum: 0
          maximum: 1

    ContextMatch:
      type: object
      required:
        - similarityScore
      properties:
        similarityScore:
          type: number
          minimum: 0
          maximum: 1
        keywordMatches:
          type: array
          items:
            type: string
        semanticMatches:
          type: array
          items:
            type: string
        temporalAlignment:
          type: number

    ReasoningPath:
      type: object
      required:
        - steps
        - confidence
      properties:
        steps:
          type: array
          items:
            $ref: '#/components/schemas/ReasoningStep'
        confidence:
          type: number
          minimum: 0
          maximum: 1
        depth:
          type: integer

    ReasoningStep:
      type: object
      required:
        - entityId
        - relationship
        - confidence
      properties:
        entityId:
          type: string
        relationship:
          type: string
        confidence:
          type: number
        reasoning:
          type: string

    TemporalRelevance:
      type: object
      required:
        - recencyScore
        - frequencyScore
      properties:
        recencyScore:
          type: number
        frequencyScore:
          type: number
        trendAlignment:
          type: number
        decayFactor:
          type: number

    ExperienceSearchResult:
      type: object
      required:
        - experiences
        - total
        - searchTime
      properties:
        experiences:
          type: array
          items:
            $ref: '#/components/schemas/ExperienceData'
        total:
          type: integer
        searchTime:
          type: number
        averageRelevance:
          type: number

    ContextOffloadRequest:
      type: object
      required:
        - tenantId
        - taskId
        - context
      properties:
        tenantId:
          type: string
        taskId:
          type: string
        context:
          $ref: '#/components/schemas/TaskContext'
        compressionLevel:
          type: string
          enum: [minimal, moderate, aggressive]
          default: moderate

    TaskContext:
      type: object
      required:
        - taskId
        - type
        - description
      properties:
        taskId:
          type: string
        type:
          type: string
        description:
          type: string
        requirements:
          type: array
          items:
            type: string
        constraints:
          type: object
          additionalProperties: true
        historicalContext:
          type: array
          items:
            $ref: '#/components/schemas/ContextualMemory'
        metadata:
          type: object
          additionalProperties: true

    ContextualMemory:
      type: object
      required:
        - relevanceScore
        - content
      properties:
        memoryId:
          type: string
        relevanceScore:
          type: number
        contextMatch:
          $ref: '#/components/schemas/ContextMatch'
        reasoningPath:
          $ref: '#/components/schemas/ReasoningPath'
        temporalRelevance:
          $ref: '#/components/schemas/TemporalRelevance'
        content:
          type: object
          additionalProperties: true
        weight:
          type: number

    ContextOffloadResult:
      type: object
      required:
        - success
        - contextId
        - compressionRatio
      properties:
        success:
          type: boolean
        contextId:
          type: string
        compressionRatio:
          type: number
        retrievalMetadata:
          $ref: '#/components/schemas/RetrievalMetadata'
        error:
          type: string

    RetrievalMetadata:
      type: object
      properties:
        relevanceThreshold:
          type: number
        retrievalStrategy:
          type: string
          enum: [semantic, temporal, hybrid]
        contextQuarantine:
          type: boolean
        summarizationApplied:
          type: boolean
        expectedRetrievalTime:
          type: number

    ContextReconstructionRequest:
      type: object
      required:
        - contextId
        - tenantId
      properties:
        contextId:
          type: string
        tenantId:
          type: string
        relevanceThreshold:
          type: number
          default: 0.7

    ContextReconstructionResult:
      type: object
      required:
        - found
        - relevanceScore
      properties:
        found:
          type: boolean
        context:
          $ref: '#/components/schemas/TaskContext'
        relevanceScore:
          type: number
        reconstructionMethod:
          type: string
          enum: [direct, summarized, hybrid]
        confidence:
          type: number

    FederatedAggregationRequest:
      type: object
      required:
        - topic
        - participants
        - insights
      properties:
        topic:
          type: string
        participants:
          type: array
          items:
            type: string
        insights:
          type: array
          items:
            $ref: '#/components/schemas/ContextualMemory'
        privacyLevel:
          type: string
          enum: [basic, differential, secure]
          default: basic

    FederatedInsights:
      type: object
      required:
        - insights
        - confidence
        - sourceTenants
      properties:
        insights:
          type: array
          items:
            $ref: '#/components/schemas/ContextualMemory'
        confidence:
          type: number
        sourceTenants:
          type: array
          items:
            type: string
        aggregationMethod:
          type: string
          enum: [weighted, consensus, hybrid]
        privacyPreserved:
          type: boolean

    KnowledgeGraphQuery:
      type: object
      required:
        - query
        - tenantId
      properties:
        query:
          type: string
        tenantId:
          type: string
        maxDepth:
          type: integer
          minimum: 1
          maximum: 5
          default: 3
        confidenceThreshold:
          type: number
          minimum: 0
          maximum: 1
          default: 0.6

    KnowledgeGraphResult:
      type: object
      required:
        - paths
        - entities
        - relationships
      properties:
        paths:
          type: array
          items:
            $ref: '#/components/schemas/ReasoningPath'
        entities:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              type:
                type: string
              name:
                type: string
              properties:
                type: object
                additionalProperties: true
        relationships:
          type: array
          items:
            type: object
            properties:
              sourceId:
                type: string
              targetId:
                type: string
              type:
                type: string
              weight:
                type: number
              properties:
                type: object
                additionalProperties: true
        queryTime:
          type: number
        totalEntities:
          type: integer
        totalRelationships:
          type: integer

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              message:
                type: string
              details:
                type: object
                additionalProperties: true

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              message:
                type: string

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              message:
                type: string
              requestId:
                type: string

tags:
  - name: Tenant Management
    description: Multi-tenant isolation and access control
  - name: Experience Management
    description: Agent experience storage and retrieval
  - name: Context Offloading
    description: Task context compression and reconstruction
  - name: Federated Learning
    description: Privacy-preserving cross-tenant learning
  - name: Knowledge Graph
    description: Multi-hop reasoning and relationship queries
